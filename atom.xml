<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>五五</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-07T15:09:45.788Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>闫海江</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs缓冲区模块</title>
    <link href="http://example.com/2021/03/07/nodejs/nodejs%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/03/07/nodejs/nodejs%E7%BC%93%E5%86%B2%E5%8C%BA%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-07T13:49:48.000Z</published>
    <updated>2021-03-07T15:09:45.788Z</updated>
    
    <content type="html"><![CDATA[<p>面试指南</p><blockquote><p>缓冲（Buffer）与缓存（Cache）的区别？</p></blockquote><h2 id="Buffer初识"><a href="#Buffer初识" class="headerlink" title="Buffer初识"></a>Buffer初识</h2><p>在引入 TypedArray 之前，JavaScript 语言没有用于读取或操作二进制数据流的机制。 Buffer 类是作为 Node.js API 的一部分引入的，用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。这是来自 Node.js 官网的一段描述，比较晦涩难懂，<code>总结起来一句话 Node.js 可以用来处理二进制流数据或者与之进行交互</code>。</p><p>Buffer 用于读取或操作二进制数据流，做为 Node.js API 的一部分使用时无需 require，用于操作网络协议、数据库、图片和文件 I/O 等一些需要大量二进制数据的场景。Buffer 在创建时大小已经被确定且是无法调整的，在内存分配这块 Buffer 是由 C++ 层面提供而不是 V8 具体后面会讲解。</p><p>在这里不知道你是否认为这是很简单的？但是上面提到的一些关键词<code>二进制、流（Stream）、缓冲区（Buffer）</code>，这些又都是什么呢？下面尝试做一些简单的介绍。</p><h2 id="什么是二进制数据？"><a href="#什么是二进制数据？" class="headerlink" title="什么是二进制数据？"></a>什么是二进制数据？</h2><p>谈到二进制我们大脑可能会浮想到就是 010101 这种代码命令<br>二进制数据使用 0 和 1 两个数码来表示的数据，为了存储或展示一些数据，计算机需要先将这些数据转换为二进制来表示。例如，我想存储 66 这个数字，计算机会先将数字 66 转化为二进制 01000010 表示，印象中第一次接触这个是在大学期间 C 语言课程中，转换公式如下所示：</p><table><thead><tr><th>128</th><th>64</th><th>32</th><th>16</th><th>8</th><th>4</th><th>2</th><th>1</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>上面用数字举了一个示例，我们知道数字只是数据类型之一，其它的还有字符串、图像、文件等。例如我们对一个英文 M 操作，在 JavaScript 里通过 <code>&#39;M&#39;.charCodeAt()</code> 取到对应的 ASCII 码之后（通过以上的步骤）会转为二进制表示。</p><h2 id="什么是-Stream？"><a href="#什么是-Stream？" class="headerlink" title="什么是 Stream？"></a>什么是 Stream？</h2><p>流，英文 Stream 是对输入输出设备的抽象，这里的设备可以是文件、网络、内存等。<br>流是有方向性的，当程序从某个数据源读入数据，会开启一个输入流，这里的数据源可以是文件或者网络等，例如我们从 a.txt 文件读入数据。相反的当我们的程序需要写出数据到指定数据源（文件、网络等）时，则开启一个输出流。当有一些大文件操作时，我们就需要 Stream 像管道一样，一点一点的将数据流出。<br><img src="/images/nodejs/fountain_stream.jpg" alt="fountain_stream.jpg"><br>通过上面的讲解进一步的理解了 Stream 是什么？那么 Stream 和 Buffer 之间又是什么关系呢？看以下介绍，关于 Stream 本身也有很多知识点</p><h2 id="什么是-Buffer？"><a href="#什么是-Buffer？" class="headerlink" title="什么是 Buffer？"></a>什么是 Buffer？</h2><p>通过以上 Stream 的讲解，我们已经看到数据是从一端流向另一端，那么他们是如何流动的呢？</p><p>通常，数据的移动是为了处理或者读取它，并根据它进行决策。伴随着时间的推移，每一个过程都会有一个最小或最大数据量。如果数据到达的速度比进程消耗的速度快，那么少数早到达的数据会处于等待区等候被处理。反之，如果数据到达的速度比进程消耗的数据慢，那么早先到达的数据需要等待一定量的数据到达之后才能被处理。</p><p>这里的等待区就指的缓冲区（Buffer），它是计算机中的一个小物理单位，通常位于计算机的 RAM 中。这些概念可能会很难理解，不要担心下面通过一个例子进一步说明。</p><h3 id="公共汽车站乘车例子"><a href="#公共汽车站乘车例子" class="headerlink" title="公共汽车站乘车例子"></a>公共汽车站乘车例子</h3><p>举一个公共汽车站乘车的例子，通常公共汽车会每隔几十分钟一趟，在这个时间到达之前就算乘客已经满了，车辆也不会提前发车，早到的乘客就需要先在车站进行等待。假设到达的乘客过多，后到的一部分则需要在公共汽车站等待下一趟车驶来。<br><img src="/images/nodejs/bus-stop-1516549_1280.jpg" alt="bus-stop-1516549_1280.jpg"><br>在上面例子中的等待区公共汽车站，对应到我们的 Node.js 中也就是缓冲区（Buffer），另外乘客到达的速度是我们不能控制的，我们能控制的也只有何时发车，对应到我们的程序中就是我们无法控制数据流到达的时间，可以做的是能决定何时发送数据。</p><h2 id="Buffer基本使用"><a href="#Buffer基本使用" class="headerlink" title="Buffer基本使用"></a>Buffer基本使用</h2><p>了解了 Buffer 的一些概念之后，我们来看下 Buffer 的一些基本使用，这里并不会列举所有的 API 使用，仅列举一部分常用的，更详细的可参考 Node.js 中文网。</p><h3 id="创建Buffer"><a href="#创建Buffer" class="headerlink" title="创建Buffer"></a>创建Buffer</h3><p>在 6.0.0 之前的 Node.js 版本中， Buffer 实例是使用 Buffer 构造函数创建的，该函数根据提供的参数以不同方式分配返回的 Buffer <code>new Buffer()</code>。<br>现在可以通过 Buffer.from()、Buffer.alloc() 与 Buffer.allocUnsafe() 三种方式来创建<br><strong>Buffer.from()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const b1 &#x3D; Buffer.from(&#39;10&#39;);</span><br><span class="line">const b2 &#x3D; Buffer.from(&#39;10&#39;, &#39;utf8&#39;);</span><br><span class="line">const b3 &#x3D; Buffer.from([10]);</span><br><span class="line">const b4 &#x3D; Buffer.from(b3);</span><br><span class="line"></span><br><span class="line">console.log(b1, b2, b3, b4); &#x2F;&#x2F; &lt;Buffer 31 30&gt; &lt;Buffer 31 30&gt; &lt;Buffer 0a&gt; &lt;Buffer 0a&gt;</span><br></pre></td></tr></table></figure><p><strong>Buffer.alloc</strong><br>返回一个已初始化的 Buffer，可以保证新创建的 Buffer 永远不会包含旧数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const bAlloc1 &#x3D; Buffer.alloc(10); &#x2F;&#x2F; 创建一个大小为 10 个字节的缓冲区</span><br><span class="line"></span><br><span class="line">console.log(bAlloc1); &#x2F;&#x2F; &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span><br></pre></td></tr></table></figure><p><strong>Buffer.allocUnsafe</strong><br>创建一个大小为 size 字节的新的未初始化的 Buffer，由于 Buffer 是未初始化的，因此分配的内存片段可能包含敏感的旧数据。在 Buffer 内容可读情况下，则可能会泄露它的旧数据，这个是不安全的，使用时要谨慎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const bAllocUnsafe1 &#x3D; Buffer.allocUnsafe(10);</span><br><span class="line"></span><br><span class="line">console.log(bAllocUnsafe1); &#x2F;&#x2F; &lt;Buffer 49 ae c9 cd 49 1d 00 00 11 4f&gt;</span><br></pre></td></tr></table></figure><p><strong>Buffer 字符编码</strong><br>通过使用字符编码，可实现 Buffer 实例与 JavaScript 字符串之间的相互转换，目前所支持的字符编码如下所示：</p><ul><li>‘ascii’ - 仅适用于 7 位 ASCII 数据。此编码速度很快，如果设置则会剥离高位。</li><li>‘utf8’ - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8。</li><li>‘utf16le’ - 2 或 4 个字节，小端序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li>‘ucs2’ - ‘utf16le’ 的别名。</li><li>‘base64’ - Base64 编码。当从字符串创建 Buffer 时，此编码也会正确地接受 RFC 4648 第 5 节中指定的 “URL 和文件名安全字母”。</li><li>‘latin1’ - 一种将 Buffer 编码成单字节编码字符串的方法（由 RFC 1345 中的 IANA 定义，第 63 页，作为 Latin-1 的补充块和 C0/C1 控制码）。</li><li>‘binary’ - ‘latin1’ 的别名。</li><li>‘hex’ - 将每个字节编码成两个十六进制的字符。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const buf &#x3D; Buffer.from(&#39;hello world&#39;, &#39;ascii&#39;);</span><br><span class="line">console.log(buf.toString(&#39;hex&#39;)); &#x2F;&#x2F; 68656c6c6f20776f726c64</span><br></pre></td></tr></table></figure><h3 id="字符串与-Buffer-类型互转"><a href="#字符串与-Buffer-类型互转" class="headerlink" title="字符串与 Buffer 类型互转"></a>字符串与 Buffer 类型互转</h3></li></ul><p><strong>字符串转 Buffer</strong><br>这个相信不会陌生了，通过上面讲解的 Buffer.form() 实现，如果不传递 encoding 默认按照 UTF-8 格式转换存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const buf &#x3D; Buffer.from(&#39;Node.js 技术栈&#39;, &#39;UTF-8&#39;);</span><br><span class="line"></span><br><span class="line">console.log(buf); &#x2F;&#x2F; &lt;Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9c af e6 a0 88&gt;</span><br><span class="line">console.log(buf.length); &#x2F;&#x2F; 17</span><br></pre></td></tr></table></figure><p><strong>Buffer 转换为字符串</strong><br>Buffer 转换为字符串也很简单，使用 toString([encoding], [start], [end]) 方法，默认编码仍为 UTF-8，如果不传 start、end 可实现全部转换，传了 start、end 可实现部分转换（这里要小心了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const buf &#x3D; Buffer.from(&#39;Node.js 技术栈&#39;, &#39;UTF-8&#39;);</span><br><span class="line"></span><br><span class="line">console.log(buf); &#x2F;&#x2F; &lt;Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9c af e6 a0 88&gt;</span><br><span class="line">console.log(buf.length); &#x2F;&#x2F; 17</span><br><span class="line">console.log(buf.toString(&#39;UTF-8&#39;, 0, 9)); &#x2F;&#x2F; Node.js �</span><br></pre></td></tr></table></figure><p>运行查看，可以看到以上输出结果为 Node.js � 出现了乱码，为什么？</p><h3 id="转换过程中为什么出现乱码？"><a href="#转换过程中为什么出现乱码？" class="headerlink" title="转换过程中为什么出现乱码？"></a>转换过程中为什么出现乱码？</h3><p>首先以上示例中使用的默认编码方式 UTF-8，问题就出在这里一个中文在 UTF-8 下占用 3 个字节，技 这个字在 buf 中对应的字节为 8a 80 e6 而我们的设定的范围为 0～9 因此只输出了 8a，这个时候就会造成字符被截断出现乱码。<br>下面我们改下示例的截取范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const buf &#x3D; Buffer.from(&#39;Node.js 技术栈&#39;, &#39;UTF-8&#39;);</span><br><span class="line"></span><br><span class="line">console.log(buf); &#x2F;&#x2F; &lt;Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9c af e6 a0 88&gt;</span><br><span class="line">console.log(buf.length); &#x2F;&#x2F; 17</span><br><span class="line">console.log(buf.toString(&#39;UTF-8&#39;, 0, 11)); &#x2F;&#x2F; Node.js 技</span><br></pre></td></tr></table></figure><h2 id="Buffer内存机制"><a href="#Buffer内存机制" class="headerlink" title="Buffer内存机制"></a>Buffer内存机制</h2><p>由于 Buffer 需要处理的是大量的二进制数据，假如用一点就向系统去申请，则会造成频繁的向系统申请内存调用，所以 Buffer 所占用的内存不再由 <code>V8 分配</code>，而是在 Node.js 的 C++ 层面完成申请，在 JavaScript 中进行内存分配。因此，这部分内存我们称之为<code>堆外内存</code>。<br><strong>注意：</strong>以下使用到的buffer.js源码为 Node.js v10.x 版本，地址：<a href="https://github.com/nodejs/node/blob/v10.x/lib/buffer.js">https://github.com/nodejs/node/blob/v10.x/lib/buffer.js</a></p><h3 id="Buffer内存分配原理"><a href="#Buffer内存分配原理" class="headerlink" title="Buffer内存分配原理"></a>Buffer内存分配原理</h3><p>Node.js 采用了 slab 机制进行<code>预先申请、事后分配</code>，是一种动态的管理机制。<br>使用 Buffer.alloc(size) 传入一个指定的 size 就会申请一块固定大小的内存区域，slab 具有如下三种状态：</p><ul><li>full：完全分配状态</li><li>partial：部分分配状态</li><li>empty：没有被分配状态</li></ul><p><strong>8KB 限制</strong><br>Node.js 以 8KB 为界限来区分是小对象还是大对象，在 buffer.js 中可以看到以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Buffer.poolSize &#x3D; 8 * 1024; &#x2F;&#x2F; 102 行，Node.js 版本为 v10.x</span><br></pre></td></tr></table></figure><p>在Buffer初识一节里有提到过 Buffer<code>在创建时大小已经被确定且是无法调整的</code>到这里应该就明白了。<br><strong>Buffer 对象分配</strong><br>以下代码示例，在加载时直接调用了 createPool() 相当于直接初始化了一个 8 KB 的内存空间，这样在第一次进行内存分配时也会变得更高效。另外在初始化的同时还初始化了一个新的变量<strong>poolOffset = 0</strong>这个变量会记录已经使用了多少字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Buffer.poolSize &#x3D; 8 * 1024;</span><br><span class="line">var poolSize, poolOffset, allocPool;</span><br><span class="line"></span><br><span class="line">... &#x2F;&#x2F; 中间代码省略</span><br><span class="line"></span><br><span class="line">function createPool() &#123;</span><br><span class="line">  poolSize &#x3D; Buffer.poolSize;</span><br><span class="line">  allocPool &#x3D; createUnsafeArrayBuffer(poolSize);</span><br><span class="line">  poolOffset &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">createPool(); &#x2F;&#x2F; 129 行</span><br></pre></td></tr></table></figure><p>此时，新构造的 slab 如下所示：<br><img src="/images/nodejs/slab_poolOffset_0.png" alt="slab_poolOffset_0.png"><br>现在让我们来尝试分配一个大小为 2048 的 Buffer 对象，代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Buffer.alloc(2 * 1024)</span><br></pre></td></tr></table></figure><p>现在让我们先看下当前的 slab 内存是怎么样的？如下所示：<br><img src="/images/nodejs/slab_poolOffset_2048.png" alt="slab_poolOffset_2048.png"><br>那么这个分配过程是怎样的呢？让我们再看 buffer.js 另外一个核心的方法 allocate(size)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;v10.x&#x2F;lib&#x2F;buffer.js#L318</span><br><span class="line">function allocate(size) &#123;</span><br><span class="line">  if (size &lt;&#x3D; 0) &#123;</span><br><span class="line">    return new FastBuffer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 当分配的空间小于 Buffer.poolSize 向右移位，这里得出来的结果为 4KB</span><br><span class="line">  if (size &lt; (Buffer.poolSize &gt;&gt;&gt; 1)) &#123;</span><br><span class="line">    if (size &gt; (poolSize - poolOffset))</span><br><span class="line">      createPool();</span><br><span class="line">    var b &#x3D; new FastBuffer(allocPool, poolOffset, size);</span><br><span class="line">    poolOffset +&#x3D; size; &#x2F;&#x2F; 已使用空间累加</span><br><span class="line">    alignPool(); &#x2F;&#x2F; 8 字节内存对齐处理</span><br><span class="line">    return b;</span><br><span class="line">  &#125; else &#123; &#x2F;&#x2F; C++ 层面申请</span><br><span class="line">    return createUnsafeBuffer(size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读完上面的代码，已经很清晰的可以看到何时会分配小 Buffer 对象，又何时会去分配大 Buffer 对象。</p><h3 id="Buffer-内存分配总结"><a href="#Buffer-内存分配总结" class="headerlink" title="Buffer 内存分配总结"></a>Buffer 内存分配总结</h3><p>这块内容着实难理解，翻了几本 Node.js 相关书籍，朴灵大佬的「深入浅出 Node.js」Buffer 一节还是讲解的挺详细的，推荐大家去阅读下。</p><ol><li>在初次加载时就会初始化 1 个 8KB 的内存空间，buffer.js 源码有体现</li><li>根据申请的内存大小分为 小 Buffer 对象 和 大 Buffer 对象</li><li>小 Buffer 情况，会继续判断这个 slab 空间是否足够</li><li>如果空间足够就去使用剩余空间同时更新 slab 分配状态，偏移量会增加</li><li>如果空间不足，slab 空间不足，就会去创建一个新的 slab 空间用来分配</li><li>大 Buffer 情况，则会直接走 createUnsafeBuffer(size) 函数</li><li>不论是小 Buffer 对象还是大 Buffer 对象，内存分配是在 C++ 层面完成，内存管理在 JavaScript 层面，最终还是可以被 V8 的垃圾回收标记所回收。</li></ol><h2 id="Buffer应用场景"><a href="#Buffer应用场景" class="headerlink" title="Buffer应用场景"></a>Buffer应用场景</h2><p>以下列举一些 Buffer 在实际业务中的应用场景</p><h3 id="I-O-操作"><a href="#I-O-操作" class="headerlink" title="I/O 操作"></a>I/O 操作</h3><p>关于 I/O 可以是文件或网络 I/O，以下为通过流的方式将 input.txt 的信息读取出来之后写入到 output.txt 文件，关于 Stream 与 Buffer 的关系不明白的在回头看下 Buffer 初识 一节讲解的 什么是 Stream?、什么是 Buffer?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">const inputStream &#x3D; fs.createReadStream(&#39;input.txt&#39;); &#x2F;&#x2F; 创建可读流</span><br><span class="line">const outputStream &#x3D; fs.createWriteStream(&#39;output.txt&#39;); &#x2F;&#x2F; 创建可写流</span><br><span class="line"></span><br><span class="line">inputStream.pipe(outputStream); &#x2F;&#x2F; 管道读写</span><br></pre></td></tr></table></figure><p>在 Stream 中我们是不需要手动去创建自己的缓冲区，在 Node.js 的流中将会自动创建。</p><h3 id="zlib-js"><a href="#zlib-js" class="headerlink" title="zlib.js"></a>zlib.js</h3><p>zlib.js 为 Node.js 的核心库之一，其利用了缓冲区（Buffer）的功能来操作二进制数据流，提供了压缩或解压功能。参考源代码 <a href="https://github.com/nodejs/node/blob/master/lib/zlib.js">zlib.js 源码</a></p><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><p>在一些加解密算法中会遇到使用 Buffer，例如 crypto.createCipheriv 的第二个参数 key 为 String 或 Buffer 类型，如果是 Buffer 类型，就用到了本篇我们讲解的内容，以下做了一个简单的加密示例，重点使用了 Buffer.alloc() 初始化一个实例（这个上面有介绍），之后使用了 fill 方法做了填充，这里重点在看下这个方法的使用。<br>buf.fill(value[, offset[, end]][, encoding])</p><ul><li>value: 第一个参数为要填充的内容</li><li>offset: 偏移量，填充的起始位置</li><li>end: 结束填充 buf 的偏移量</li><li>encoding: 编码集</li></ul><p><strong>以下为 Cipher 的对称加密 Demo</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line">const [key, iv, algorithm, encoding, cipherEncoding] &#x3D; [</span><br><span class="line">    &#39;a123456789&#39;, &#39;&#39;, &#39;aes-128-ecb&#39;, &#39;utf8&#39;, &#39;base64&#39;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const handleKey &#x3D; key &#x3D;&gt; &#123;</span><br><span class="line">    const bytes &#x3D; Buffer.alloc(16); &#x2F;&#x2F; 初始化一个 Buffer 实例，每一项都用 00 填充</span><br><span class="line">    console.log(bytes); &#x2F;&#x2F; &lt;Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;</span><br><span class="line">    bytes.fill(key, 0, 10) &#x2F;&#x2F; 填充</span><br><span class="line">    console.log(bytes); &#x2F;&#x2F; &lt;Buffer 61 31 32 33 34 35 36 37 38 39 00 00 00 00 00 00&gt;</span><br><span class="line"></span><br><span class="line">    return bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let cipher &#x3D; crypto.createCipheriv(algorithm, handleKey(key), iv);</span><br><span class="line">let crypted &#x3D; cipher.update(&#39;Node.js 技术栈&#39;, encoding, cipherEncoding);</span><br><span class="line">    crypted +&#x3D; cipher.final(cipherEncoding);</span><br><span class="line"></span><br><span class="line">console.log(crypted) &#x2F;&#x2F; jE0ODwuKN6iaKFKqd3RF4xFZkOpasy8WfIDl8tRC5t0&#x3D;</span><br></pre></td></tr></table></figure><h2 id="Buffer-VS-Cache"><a href="#Buffer-VS-Cache" class="headerlink" title="Buffer VS Cache"></a>Buffer VS Cache</h2><blockquote><p>缓冲（Buffer）与缓存（Cache）的区别？<br><strong>缓冲（Buffer）</strong><br>缓冲（Buffer）是用于处理二进制流数据，将数据缓冲起来，它是临时性的，对于流式数据，会采用缓冲区将数据临时存储起来，等缓冲到一定的大小之后在存入硬盘中。视频播放器就是一个经典的例子，有时你会看到一个缓冲的图标，这意味着此时这一组缓冲区并未填满，当数据到达填满缓冲区并且被处理之后，此时缓冲图标消失，你可以看到一些图像数据。<br><strong>缓存（Cache）</strong><br>缓存（Cache）我们可以看作是一个中间层，它可以是永久性的将热点数据进行缓存，使得访问速度更快，例如我们通过 Memory、Redis 等将数据从硬盘或其它第三方接口中请求过来进行缓存，目的就是将数据存于内存的缓存区中，这样对同一个资源进行访问，速度会更快，也是性能优化一个重要的点。</p></blockquote><h3 id="Buffer-VS-String"><a href="#Buffer-VS-String" class="headerlink" title="Buffer VS String"></a>Buffer VS String</h3><p>通过压力测试来看看 String 和 Buffer 两者的性能如何？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">let s &#x3D; &#39;&#39;;</span><br><span class="line">for (let i&#x3D;0; i&lt;1024*10; i++) &#123;</span><br><span class="line">    s+&#x3D;&#39;a&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const str &#x3D; s;</span><br><span class="line">const bufStr &#x3D; Buffer.from(s);</span><br><span class="line">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    if (req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;buffer&#39;) &#123;</span><br><span class="line">        res.end(bufStr);</span><br><span class="line">    &#125; else if (req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;string&#39;) &#123;</span><br><span class="line">        res.end(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(3000);</span><br></pre></td></tr></table></figure><p>以上实例我放在虚拟机里进行测试，你也可以在本地电脑测试，使用 AB 测试工具。</p><h3 id="测试-string"><a href="#测试-string" class="headerlink" title="测试 string"></a>测试 string</h3><p>看以下几个重要的参数指标，之后通过 buffer 传输进行对比</p><ul><li>Complete requests: 21815</li><li>Requests per second: 363.58 [#/sec] (mean)</li><li>Transfer rate: 3662.39 [Kbytes/sec] received<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 200 -t 60 http:&#x2F;&#x2F;192.168.6.131:3000&#x2F;string</span><br></pre></td></tr></table></figure><img src="/images/nodejs/ab_string.png" alt="ab_string"><h3 id="测试-buffer"><a href="#测试-buffer" class="headerlink" title="测试 buffer"></a>测试 buffer</h3>可以看到通过 buffer 传输总共的请求数为 50000、QPS 达到了两倍多的提高、每秒传输的字节为 9138.82 KB，从这些数据上可以证明提前将数据转换为 Buffer 的方式，可以使性能得到近一倍的提升。</li><li>Complete requests: 50000</li><li>Requests per second: 907.24 [#/sec] (mean)</li><li>Transfer rate: 9138.82 [Kbytes/sec] received<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 200 -t 60 http:&#x2F;&#x2F;192.168.6.131:3000&#x2F;buffer</span><br></pre></td></tr></table></figure><img src="/images/nodejs/ab_buffer.png" alt="ab_buffer"><br>在 HTTP 传输中传输的是二进制数据，上面例子中的 /string 接口直接返回的字符串，这时候 HTTP 在传输之前会先将字符串转换为 Buffer 类型，以二进制数据传输，通过流（Stream）的方式一点点返回到客户端。但是直接返回 Buffer 类型，则少了每次的转换操作，对于性能也是有提升的。</li></ul><p>在一些 Web 应用中，对于静态数据可以预先转为 Buffer 进行传输，可以有效减少 CPU 的重复使用（重复的字符串转 Buffer 操作）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面试指南&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缓冲（Buffer）与缓存（Cache）的区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Buffer初识&quot;&gt;&lt;a href=&quot;#Buffer初识&quot; class=&quot;headerlink&quot; title=&quot;Buffe</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Crypto加解密模块</title>
    <link href="http://example.com/2021/03/07/nodejs/nodejs_Crypto%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/03/07/nodejs/nodejs_Crypto%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-07T13:34:32.000Z</published>
    <updated>2021-03-07T13:48:19.323Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Crypto加解密模块</strong></p><blockquote><p>Crypto 加密模块是 C／C++ 实现这些算法后，暴露为 javascript 接口的模块，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p></blockquote><h2 id="Cipher"><a href="#Cipher" class="headerlink" title="Cipher"></a>Cipher</h2><blockquote><p>Cipher 类用于加密数据，属于对称密钥加密，假设通信双方 A、B 通讯方 A 使用 key 对明文进行加密传输，通讯方 B 接收到密文后，使用同样的 key 进行解密得到明文。</p></blockquote><h3 id="AES-ECB-PKCS5Padding"><a href="#AES-ECB-PKCS5Padding" class="headerlink" title="AES/ECB/PKCS5Padding"></a>AES/ECB/PKCS5Padding</h3><ul><li>AES：代表算法</li><li>ECB：代表模式</li><li>PKCS5Padding：代表填充量<h3 id="与java、c-等语言交互踩过的坑"><a href="#与java、c-等语言交互踩过的坑" class="headerlink" title="与java、c#等语言交互踩过的坑"></a>与java、c#等语言交互踩过的坑</h3><blockquote><p>和 java 程序进行交互的时候，Java 那边使用 AES 128 位填充模式：AES/CBC/PKCS5Padding 加密方法，在 Nodejs 中采用对应的 aes-128-cbc 加密方法就能对应上，因为有使用向量（iv），但是 Nodejs 语言本身不默认自动填充，所以 Nodejs 中要用 createCipheriv 方法，来补全填充量，而不是 createCipher。</p></blockquote><h3 id="查看系统所支持的算法"><a href="#查看系统所支持的算法" class="headerlink" title="查看系统所支持的算法"></a>查看系统所支持的算法</h3>使用 <code>openssl list-cipher-algorithms </code>可以查看系统所支持的算法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aes-128-cbc    aes-128-ecb    aes-192-cbc    aes-192-ecb    aes-256-cbc</span><br><span class="line">aes-256-ecb    base64         bf             bf-cbc         bf-cfb</span><br><span class="line">bf-ecb         bf-ofb         cast           cast-cbc       cast5-cbc</span><br><span class="line">cast5-cfb      cast5-ecb      cast5-ofb      des            des-cbc</span><br><span class="line">des-cfb        des-ecb        des-ede        des-ede-cbc    des-ede-cfb</span><br><span class="line">des-ede-ofb    des-ede3       des-ede3-cbc   des-ede3-cfb   des-ede3-ofb</span><br><span class="line">des-ofb        des3           desx           rc2            rc2-40-cbc</span><br><span class="line">rc2-64-cbc     rc2-cbc        rc2-cfb        rc2-ecb        rc2-ofb</span><br><span class="line">rc4            rc4-40         seed           seed-cbc       seed-cfb</span><br><span class="line">seed-ecb       seed-ofb</span><br></pre></td></tr></table></figure><h3 id="Cipher加解密实例演示"><a href="#Cipher加解密实例演示" class="headerlink" title="Cipher加解密实例演示"></a>Cipher加解密实例演示</h3><blockquote><p>推荐使用 crypto.createCipheriv</p></blockquote><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3></li><li>crypto.createCipher(algorithm’, pwd) 指定算法、密码创建 cipher 加密对象</li><li>crypto.createCipheriv(algorithm, pwd, iv)  指定算法、密码、向量创建 cipher 加密对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function cipher(str)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        const crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line">        &#x2F;&#x2F; const cipher &#x3D; crypto.createCipher(&#39;des-ecb&#39;, &#39;123456&#39;);</span><br><span class="line"></span><br><span class="line">        const cipher &#x3D; crypto.createCipheriv(&#39;des-ecb&#39;, &#39;12345678&#39;, &#39;&#39;); 与其他语言加密采用这种写法</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * update方法</span><br><span class="line">         * 第一个参数代表加密的数据</span><br><span class="line">         * 第二参数代表传入数据的格式，可以是&#39;utf8&#39;, &#39;ascii&#39;, &#39;latin1&#39;</span><br><span class="line">         * 第三个参数代表加密数据的输出格式，可以是&#39;latin1&#39;， &#39;base64&#39; 或者 &#39;hex&#39;。没有执行则返回Buffer</span><br><span class="line">         *&#x2F;</span><br><span class="line">        let encrypted &#x3D; cipher.update(str, &#39;utf8&#39;, &#39;hex&#39;);</span><br><span class="line"></span><br><span class="line">            &#x2F;**</span><br><span class="line">             * final方法，返回任何加密的内容</span><br><span class="line">             * 参数可以是&#39;latin1&#39;, &#39;base64&#39; 或者 &#39;hex&#39;，没有指定返回Buffer</span><br><span class="line">             *&#x2F;</span><br><span class="line">            encrypted +&#x3D; cipher.final(&#39;hex&#39;);</span><br><span class="line"></span><br><span class="line">        return encrypted;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(&#39;加密失败&#39;);</span><br><span class="line"></span><br><span class="line">        return e.message || e;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cipher(&#39;hello world ！！！&#39;) &#x2F;&#x2F; 81c66a1d39d302205c55f0afac95c06bc985155d4ddb751c</span><br></pre></td></tr></table></figure><h3 id="数据解密"><a href="#数据解密" class="headerlink" title="数据解密"></a>数据解密</h3></li><li>crypto.createDecipher(algorithm, pwd) 指定算法、密码创建 decipher 解密对象</li><li>crypto.createDecipheriv(algorithm, pwd, iv) 指定算法、密码、向量创建 decipher 解密对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function decipher(encrypted)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        const crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line">        &#x2F;&#x2F; const decipher &#x3D; crypto.createDecipher(&#39;des-ecb&#39;, &#39;123456&#39;);</span><br><span class="line"></span><br><span class="line">        const decipher &#x3D; crypto.createDecipheriv(&#39;des-ecb&#39;, &#39;12345678&#39;, &#39;&#39;);</span><br><span class="line"></span><br><span class="line">        let decrypted &#x3D; decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);</span><br><span class="line">            decrypted +&#x3D; decipher.final(&#39;utf8&#39;);</span><br><span class="line"></span><br><span class="line">        return decrypted;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(&#39;解密失败&#39;);</span><br><span class="line"></span><br><span class="line">        return e.message || e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">decipher(&#39;81c66a1d39d302205c55f0afac95c06bc985155d4ddb751c&#39;); &#x2F;&#x2F; hello world ！！！</span><br></pre></td></tr></table></figure></li></ul><h2 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h2><h3 id="MD5作用与特点"><a href="#MD5作用与特点" class="headerlink" title="MD5作用与特点"></a>MD5作用与特点</h3><ul><li>作用: 是让大容量信息在数字签名软件签署私人秘钥前被 “压缩” 成一种保密格式，也就是把一个任意长度的字节串变换成一定长度的十六进制数字串（32个字符） 一致性验证</li><li>特点<ul><li>不可逆</li><li>输入两个不同的明文不会得到相同的输出值</li><li>根据输出值，不能得到原始的明文，即过程不可逆<h3 id="MD5三种实现方式"><a href="#MD5三种实现方式" class="headerlink" title="MD5三种实现方式"></a>MD5三种实现方式</h3></li></ul></li><li>crypto.createHash(algorithm)<br>创建并返回一个 hash 对象，它是一个指定算法的加密 hash，用于生成 hash 摘要。<br>参数 algorithm 可选择系统上安装的 OpenSSL 版本所支持的算法。例如：<code>sha1、md5、sha256、sha512</code> 等。在近期发行的版本中，<code>openssl list-message-digest-algorithms </code>会显示这些可用的摘要算法。</li><li>hash.update(data)<br>更新 hash 的内容为指定的 data。当使用流数据时可能会多次调用该方法。</li><li>hash.digest(encoding=’binary’)<br>计算所有传入数据的 hash 摘要。参数 encoding（编码方式）可以为<code> hex、binary、base64</code>。</li><li>MD5加解密实例演示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line">const md5 &#x3D; str &#x3D;&gt; &#123;</span><br><span class="line">    return crypto.createHash(&#39;md5&#39;).update(str, &#39;utf8&#39;).digest(&#39;hex&#39;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 默认输出长度为32位小写字母</span><br><span class="line">&#x2F;&#x2F; 25f9e794323b453885f5181f1b624d0b</span><br><span class="line">console.log(md5(&#39;123456789&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下转换为32位大写字母</span><br><span class="line">&#x2F;&#x2F; 25F9E794323B453885F5181F1B624D0B</span><br><span class="line">console.log(md5(&#39;123456789&#39;).toUpperCase()); </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Crypto加解密模块&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Crypto 加密模块是 C／C++ 实现这些算法后，暴露为 javascript 接口的模块，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodejsEvents模块</title>
    <link href="http://example.com/2021/03/07/nodejs/nodejsEvents%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/03/07/nodejs/nodejsEvents%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-07T11:47:19.000Z</published>
    <updated>2021-03-07T13:33:26.367Z</updated>
    
    <content type="html"><![CDATA[<p>在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），也称为发布/订阅模式，为什么说它重要，因为在 Node.js 中绝大多数模块都依赖于此，例如 Net、HTTP、FS、Stream 等，除了这些系统模块比较知名的 Express、Koa 框架中也能看到 EventEmitter 的踪迹。</p><p>谈起事件前端的同学可能会联想到浏览器中的事件，与浏览器中的事件不同的是它不存在事件冒泡、preventDefault()、stopPropagation() 等方法，EventEmitter 提供了 on()、once()、removeListener() 等方法来对事件进行监听移除。</p><h2 id="通过本文你能学到什么"><a href="#通过本文你能学到什么" class="headerlink" title="通过本文你能学到什么"></a>通过本文你能学到什么</h2><ul><li>了解 EventEmitter 是什么？一些基础 API 的使用</li><li>在 Node.js 的一些核心模块（Stream、Net）中是如何使用 EventEmitter 的?</li><li>主流的 Express/Koa 框架也是基于此实现，我们如何实现一个基于 EventEmitter 的自定义对象？</li><li>高并发场景下雪崩问题如何利用 EventEmitter 特性解决？</li><li>事件是否等价于异步？</li></ul><h3 id="先从一个简单的例子开始"><a href="#先从一个简单的例子开始" class="headerlink" title="先从一个简单的例子开始"></a>先从一个简单的例子开始</h3><p>事件驱动是 Node.js 的核心，怎么体现事件驱动呢？通常一种最常见的形式就是回调，触发一次事件，然后通过回调来接收一些处理，关于这种形式在 JavaScript 编程中屡见不鲜，例如 fs.readFile(path, callback)、TCP 中的 server.on(‘data’, callback) 等。</p><h3 id="一个简单的实现"><a href="#一个简单的实现" class="headerlink" title="一个简单的实现"></a>一个简单的实现</h3><p>主要用到以下两个 API，触发、注册一个监听函数。</p><ul><li>emit：触发一个监听函数</li><li>on：注册一个监听函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;</span><br><span class="line">const emitter &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.on(&quot;起床&quot;, function(time) &#123;</span><br><span class="line">    console.log(&#96;早上 $&#123;time&#125; 开始起床，新的一天加油！&#96;)</span><br><span class="line">    &#x2F;&#x2F;console.log(&#96;关注公众号Nodejs技术栈，早上 $&#123;time&#125; 点开始起床阅读，从 Node.js 技术栈&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emitter.emit(&quot;起床&quot;, &quot;6:00&quot;);</span><br></pre></td></tr></table></figure>除了上面使用 emit、on 方法外还有一些很有用的 API，你也许需要先去 Node.js 官网（<a href="http://nodejs.cn/api/events.html%EF%BC%89%E5%81%9A%E4%B8%80%E4%B8%AA%E4%BA%86%E8%A7%A3%EF%BC%8C%E9%82%A3%E9%87%8C%E4%BB%8B%E7%BB%8D%E7%9A%84%E5%BE%88%E5%85%A8%EF%BC%8C%E5%9C%A8%E6%8E%A5%E6%9D%A5%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BC%9A%E5%9C%A8%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B%E4%B8%AD%E6%BC%94%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%E7%9A%84%E6%A0%B8%E5%BF%83">http://nodejs.cn/api/events.html）做一个了解，那里介绍的很全，在接来的学习中，我会在一些示例中演示一部分的核心</a> API 如何应用。</li></ul><h2 id="自定义-EventEmitter-类"><a href="#自定义-EventEmitter-类" class="headerlink" title="自定义 EventEmitter 类"></a>自定义 EventEmitter 类</h2><p>当你了解了 EventEmitter，你会发现它在 Node.js 中无所不在，Node.js 的核心模块、Express/Koa 等知名框架中，你都会发现它的踪迹，例如，下面在 Koa 中 new 一个 app 对象，通过 app.emit() 触发一个事件，实现在整个系统中进行传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line"></span><br><span class="line">app.on(&quot;koa&quot;, function() &#123;</span><br><span class="line">    console.log(&quot;在 Koa 中使用 EventEmitter&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.emit(&quot;koa&quot;);</span><br></pre></td></tr></table></figure><h3 id="系统模块自定义-EventEmitter-类的实现"><a href="#系统模块自定义-EventEmitter-类的实现" class="headerlink" title="系统模块自定义 EventEmitter 类的实现"></a>系统模块自定义 EventEmitter 类的实现</h3><p>在这开始之前让我们先看下 Node.js 中的 Stream、Net 模块是怎么实现的？<br>在 Stream 模块中的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;v10.x&#x2F;lib&#x2F;internal&#x2F;streams&#x2F;legacy.js#L6</span><br><span class="line"></span><br><span class="line">const EE &#x3D; require(&#39;events&#39;);</span><br><span class="line">const util &#x3D; require(&#39;util&#39;);</span><br><span class="line"></span><br><span class="line">function Stream() &#123;</span><br><span class="line">  EE.call(this);</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Stream, EE);</span><br></pre></td></tr></table></figure><p>在 Net 模块中的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;v10.x&#x2F;lib&#x2F;net.js#L1121</span><br><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;);</span><br><span class="line">const util &#x3D; require(&#39;util&#39;);</span><br><span class="line"></span><br><span class="line">function Server(options, connectionListener) &#123;</span><br><span class="line">  if (!(this instanceof Server))</span><br><span class="line">    return new Server(options, connectionListener);</span><br><span class="line"></span><br><span class="line">  EventEmitter.call(this);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Server, EventEmitter);</span><br></pre></td></tr></table></figure><p>观察上面两个 Node.js 模块的自定义 EventEmitter 实现，都有一个共同点使用了 util.inherits(constructor, superConstructor) 方法，这个是 Node.js 中的工具类，这让我想起来了之前在看 JavaScript 权威指南（第 6 章 122 页）中的一个方法 function inherit(p)，意思为<code>通过原型继承创建一个新对象，而 util.inherits 是通过原型复制来实现的对象间的继承。</code></p><p>例如上面的 util.inherits(Server, EventEmitter) 函数，也就是 Server 对象继承了 EventEmitter 在原型中定义的函数，也就拥有了 EventEmitter 事件触发器中的 on、emit 等方法。但是现在 Node.js 官网不建议使用 util.inherits() 方法，而是使用 ES6 中的 class 和 extends 关键词获得语言层面的继承支持，那么在原声 JS 中还是使用 <code>Object.setPrototypeOf()</code> 来实现的继承，因此在 Node.js 12x 版本中你会看到如下代码实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;v12.x&#x2F;lib&#x2F;net.js#L1142</span><br><span class="line">function Server(options, connectionListener) &#123;</span><br><span class="line">  if (!(this instanceof Server))</span><br><span class="line">    return new Server(options, connectionListener);</span><br><span class="line"></span><br><span class="line">  EventEmitter.call(this);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;v12.x&#x2F;lib&#x2F;net.js#L1188</span><br><span class="line">Object.setPrototypeOf(Server.prototype, EventEmitter.prototype);</span><br><span class="line">Object.setPrototypeOf(Server, EventEmitter);</span><br></pre></td></tr></table></figure><h3 id="实现一个基于-EventEmitter-的自定义类"><a href="#实现一个基于-EventEmitter-的自定义类" class="headerlink" title="实现一个基于 EventEmitter 的自定义类"></a>实现一个基于 EventEmitter 的自定义类</h3><p>这里用一个例子一天的计划来展示如何基于 EventEmitter 自定义类，在不同的时间触发相应的事件，通过监听事件来做一些事情。<br>下面展示了我们自定义的 OneDayPlan 是如何继承于 EventEmitter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;);</span><br><span class="line">const oneDayPlanRun &#x3D; &#123;</span><br><span class="line">    &quot;6:00&quot;: function() &#123;</span><br><span class="line">        console.log(&#96;现在是早上 6:00，起床，开始新的一天加油！&#96;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;7:00&quot;: function() &#123;</span><br><span class="line">        console.log(&#96;现在是早上 7:00，吃早饭！&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function OneDayPlan() &#123;</span><br><span class="line">    EventEmitter.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.setPrototypeOf(OneDayPlan.prototype, EventEmitter.prototype);</span><br><span class="line">Object.setPrototypeOf(OneDayPlan, EventEmitter);</span><br></pre></td></tr></table></figure><p>现在让我们实例化上面自定义的 OneDayPlan 类，实现事件的触发/监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const oneDayPlan &#x3D; new OneDayPlan();</span><br><span class="line"></span><br><span class="line">oneDayPlan.on(&quot;6:00&quot;, function() &#123;</span><br><span class="line">    oneDayPlanRun[&quot;6:00&quot;]();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">oneDayPlan.on(&quot;7:00&quot;, function() &#123;</span><br><span class="line">    oneDayPlanRun[&quot;7:00&quot;]();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">async function doMain() &#123;</span><br><span class="line">    oneDayPlan.emit(&quot;6:00&quot;);</span><br><span class="line"></span><br><span class="line">    await sleep(2000); &#x2F;&#x2F; 间隔 2 秒钟输出</span><br><span class="line"></span><br><span class="line">    oneDayPlan.emit(&quot;7:00&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doMain();</span><br><span class="line"></span><br><span class="line">async function sleep(s) &#123;</span><br><span class="line">    return new Promise(function(reslve) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            reslve(1);</span><br><span class="line">        &#125;, s);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">现在是早上 6:00，起床，开始新的一天加油！</span><br><span class="line">现在是早上 7:00，吃早饭！</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-解决高并发下雪崩问题"><a href="#EventEmitter-解决高并发下雪崩问题" class="headerlink" title="EventEmitter 解决高并发下雪崩问题"></a>EventEmitter 解决高并发下雪崩问题</h2><p>对于需要查询 DB 的数据，我们一般称之为热点数据，这类数据通常是要在 DB 之上增加一层缓存，但是在高并发场景下，如果这个缓存正好失效，此时就会有大量的请求直接涌入数据库，对数据库造成一定的压力，对于缓存雪崩的解决方案，网上也不乏有更好的解决方案，但是在 Node.js 中我们可以利用 events 模块提供的 once() 方法来解决。</p><h3 id="once-方法介绍"><a href="#once-方法介绍" class="headerlink" title="once 方法介绍"></a>once 方法介绍</h3><p>当触发多次相同名称事件，通过 once 添加的侦听器只会执行一次，并且在执行之后会接触与它关联的事件，相当于 on 方法和 removeListener 方法的组合，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proxy.once(&#39;我很帅&#39;, function() &#123;</span><br><span class="line">    console.log(&#39;once: 我很帅！&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.on(&#39;我很帅&#39;, function() &#123;</span><br><span class="line">    console.log(&#39;on: 我很帅！&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxy.emit(&#39;我很帅&#39;);</span><br><span class="line">proxy.emit(&#39;我很帅&#39;);</span><br><span class="line">proxy.emit(&#39;我很帅&#39;);</span><br></pre></td></tr></table></figure><p>上面触发了三次 “我很帅” 事件，on 方法乖乖的重复了三次，但是 once 方法说我知道我很帅我只说一次就够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">once: 我很帅！</span><br><span class="line">on: 我很帅！</span><br><span class="line">on: 我很帅！</span><br><span class="line">on: 我很帅！</span><br></pre></td></tr></table></figure><p>上面说的 once 方法是 on 和 removeListener 的结合体，在源码中也可看到 <a href="https://github.com/nodejs/node/blob/v10.x/lib/events.js#L282">https://github.com/nodejs/node/blob/v10.x/lib/events.js#L282</a> once 方法接收到信息之后使用 on 方法监听，在 onceWrapper 方法中通过 removeListener 删掉监听函数自身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function onceWrapper(...args) &#123;</span><br><span class="line">  if (!this.fired) &#123;</span><br><span class="line">    this.target.removeListener(this.type, this.wrapFn);</span><br><span class="line">    this.fired &#x3D; true;</span><br><span class="line">    return Reflect.apply(this.listener, this.target, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _onceWrap(target, type, listener) &#123;</span><br><span class="line">  var state &#x3D; &#123; fired: false, wrapFn: undefined, target, type, listener &#125;;</span><br><span class="line">  var wrapped &#x3D; onceWrapper.bind(state);</span><br><span class="line">  wrapped.listener &#x3D; listener;</span><br><span class="line">  state.wrapFn &#x3D; wrapped;</span><br><span class="line">  return wrapped;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventEmitter.prototype.once &#x3D; function once(type, listener) &#123;</span><br><span class="line">  checkListener(listener);</span><br><span class="line"></span><br><span class="line">  this.on(type, _onceWrap(this, type, listener));</span><br><span class="line">  return this;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>利用 once 方法将所有请求的回调都压入事件队列中，对于相同的文件名称查询保证在同一个查询开始到结束的过程中永远只有一次，如果是 DB 查询也避免了重复数据带来的数据库查询开销。代码编写参考了深入浅出 Nodejs Events 模块一书，这里使用 fs 进行文件查询，如果是 DB 也同理，另外注意使用 status 键值对形式保存了触发/监听的事件名称和状态，最后建议进行清除，避免引起大对象导致内存泄露问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">const status &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">const select &#x3D; function(file, filename, cb) &#123;</span><br><span class="line">    emitter.once(file, cb);</span><br><span class="line">    </span><br><span class="line">    if (status[file] &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">        status[file] &#x3D; &#39;ready&#39;; &#x2F;&#x2F; 不存在设置默认值</span><br><span class="line">    &#125;</span><br><span class="line">    if (status[file] &#x3D;&#x3D;&#x3D; &#39;ready&#39;) &#123;</span><br><span class="line">        status[file] &#x3D; &#39;pending&#39;;</span><br><span class="line">        fs.readFile(file, function(err, result) &#123;</span><br><span class="line">            console.log(filename);</span><br><span class="line">            emitter.emit(file, err, result.toString());</span><br><span class="line">            status[file] &#x3D; &#39;ready&#39;;</span><br><span class="line">            </span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                delete status[file];</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let i&#x3D;1; i&lt;&#x3D;11; i++) &#123;</span><br><span class="line">    if (i % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">        select(&#96;&#x2F;tmp&#x2F;a.txt&#96;, &#39;a 文件&#39;, function(err, result) &#123;</span><br><span class="line">            console.log(&#39;err: &#39;, err, &#39;result: &#39;, result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        select(&#96;&#x2F;tmp&#x2F;b.txt&#96;, &#39;b 文件&#39;, function(err, result) &#123;</span><br><span class="line">            console.log(&#39;err: &#39;, err, &#39;result: &#39;, result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台运行以上代码进行测试，虽然发起了多次文件查询请求，fs 模块真正只执行了两次，分别查询了 a、b 两个文件，对于相同的请求，通过利用事件监听器 once 的特性避免了相同条件重复查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">b 文件</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">err:  null result:  b</span><br><span class="line">a 文件</span><br><span class="line">err:  null result:  a</span><br><span class="line">err:  null result:  a</span><br><span class="line">err:  null result:  a</span><br><span class="line">err:  null result:  a</span><br><span class="line">err:  null result:  a</span><br></pre></td></tr></table></figure><p>默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 但是，并不是所有的事件都要限制 10 个监听器。 emitter.setMaxListeners() 方法可以为指定的 EventEmitter 实例修改限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(node:88835) Warning: Possible EventEmitter memory leak detected. 11 &#x2F;tmp&#x2F;b.txt listeners added. Use emitter.setMaxListeners() to increase limit</span><br><span class="line">(node:88835) Warning: Possible EventEmitter memory leak detected. 11 &#x2F;tmp&#x2F;a.txt listeners added. Use emitter.setMaxListeners() to increase limit</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-循环调用问题"><a href="#EventEmitter-循环调用问题" class="headerlink" title="EventEmitter 循环调用问题"></a>EventEmitter 循环调用问题</h2><p>如下代码所示，尝试分析以下两种情况的输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line">const test &#x3D; () &#x3D;&gt; console.log(&#39;test&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** 例一 *&#x2F;</span><br><span class="line">emitter.on(&#39;test&#39;, function() &#123;</span><br><span class="line">    test();</span><br><span class="line">    emitter.emit(&#39;test&#39;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">emitter.emit(&#39;test&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** 例二 *&#x2F;</span><br><span class="line">emitter.on(&#39;test&#39;, function() &#123;</span><br><span class="line">    test();</span><br><span class="line">    emitter.on(&#39;test&#39;, test);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">emitter.emit(&#39;test&#39;);</span><br></pre></td></tr></table></figure><p>例一因为在监听函数 on 里执行了 emit 事件触发，会陷入死循环导致栈溢出。<br>例二结果为只输出一次 test，emitter.on(‘test’, test); 这行代码只是在当前的事件回调中添加了一个事件监听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例一：RangeError: Maximum call stack size exceeded</span><br><span class="line">例二：test</span><br></pre></td></tr></table></figure><h2 id="同步还是异步"><a href="#同步还是异步" class="headerlink" title="同步还是异步"></a>同步还是异步</h2><p>换一个问题事件是否等于异步？答案是不等的，看以下代码示例执行顺序，先输出 111 再输出 222，为什么这样？摘自官方 API 的一段话 <code>“EventEmitter 会按照监听器注册的顺序同步地调用所有监听器。 所以必须确保事件的排序正确，且避免竞态条件。”</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.on(&#39;test&#39;,function()&#123;</span><br><span class="line">    console.log(111)</span><br><span class="line">&#125;);</span><br><span class="line">emitter.emit(&#39;test&#39;);</span><br><span class="line">console.log(222)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出</span><br><span class="line">&#x2F;&#x2F; 111</span><br><span class="line">&#x2F;&#x2F; 222</span><br></pre></td></tr></table></figure><p>也可以使用 setImmediate() 或 process.nextTick() 切换到异步模式，代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.on(&#39;test&#39;,function()&#123;</span><br><span class="line">    setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(111);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">emitter.emit(&#39;test&#39;);</span><br><span class="line">console.log(222)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出</span><br><span class="line">&#x2F;&#x2F; 222</span><br><span class="line">&#x2F;&#x2F; 111</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>最后一个最重要的错误处理，在 Node.js 中错误处理是一个需要重视的事情，一旦抛出一个错误没有人为处理，可能造成的结果是进程自动退出，如下代码因为事件触发器带有错误信息，而没有相应的错误监听在，会导致进程退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.emit(&#39;error&#39;, new Error(&#39;This is a error&#39;));</span><br><span class="line">console.log(&#39;test&#39;);</span><br></pre></td></tr></table></figure><p>调用后程序崩溃导致 Node 进程自动退出，因受上一行的影响，之后的 console.log(‘test’); 也不会得到执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events.js:167</span><br><span class="line">      throw er; &#x2F;&#x2F; Unhandled &#39;error&#39; event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: This is a error</span><br></pre></td></tr></table></figure><p>作为最佳实践，应该始终为 ‘error’ 事件注册监听器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const events &#x3D; require(&#39;events&#39;);</span><br><span class="line">const emitter &#x3D; new events.EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.on(&#39;error&#39;, function(err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">emitter.emit(&#39;error&#39;, new Error(&#39;This is a error&#39;));</span><br><span class="line"></span><br><span class="line">console.log(&#39;test&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: This is a error</span><br><span class="line">    at Object.&lt;anonymous&gt; ...</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>如上代码所示，第一次调用后错误 error 事件会被监听，Node 进程也不会像之前的程序一样会自动退出，console.log(‘test’); 也得到了正常运行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>许多 Node.js 成功的模块和框架都是基于 EventEmitter 的，学会 EventEmitter 的使用，并且知道该在什么时候去使用是非常有用的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），也称为发布/订阅模式，为什么说它重要，因为在 Node.js 中绝大多数模块都依赖于此，例如 Net、HTTP、FS、Stream 等，除了这些系统模块比较知名的 Express、</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodejs模块机制</title>
    <link href="http://example.com/2021/03/07/nodejs/nodejs%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/03/07/nodejs/nodejs%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-07T10:59:06.000Z</published>
    <updated>2021-03-07T11:47:11.677Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 模块机制采用了 Commonjs 规范，弥补了当前 JavaScript 开发大型应用没有标准的缺陷，类似于 Java 中的类文件，Python 中的 import 机制，Node.js 中可以通过 module.exports、require 来导出和引入一个模块.</p><p>在模块加载机制中，Node.js 采用了延迟加载的策略，只有在用到的情况下，系统模块才会被加载，加载完成后会放到 binding_cache 中。</p><h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%88%86%E7%B1%BB">模块的分类</a><ul><li>系统模块</li><li>第三方模块</li><li>目录结构</li></ul></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">模块加载机制</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">模块循环引用</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E5%85%B3%E7%B3%BB%E8%80%83%E5%AF%9F">exports 与 module.exports的区别</a></li></ul><h2 id="面试指南"><a href="#面试指南" class="headerlink" title="面试指南"></a>面试指南</h2><ul><li>require 的加载机制？ ，参考：模块加载机制</li><li>module.exports 与 exports 的区别，参考：对象引用关系考察</li><li>假设有 a.js、b.js 两个模块相互引用，会有什么问题？是否为陷入死循环？，参考正文“模块循环引用问题1”</li><li>a 模块中的 undeclaredVariable 变量在 b.js 中是否会被打印？，参考正文“模块循环引用问题2”</li><li>模块在 require 的过程中是同步还是异步？，参考正文模块加载机制 “文件模块“</li></ul><h2 id="模块的分类"><a href="#模块的分类" class="headerlink" title="模块的分类"></a>模块的分类</h2><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><ul><li>C/C++ 模块，也叫 built-in 内建模块，一般用于 native 模块调用，在 require 出去</li><li>native 模块，在开发中使用的 Node.js 的 http、buffer、fs 等，底层也是调用的内建模块 (C/C++)。<h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3>非 Node.js 自带的模块称为第三方模块，其实还分为路径形式的文件模块（以 <code>.</code>、<code>..</code>、<code>/</code> 开头的）和自定义的模块（比如 express、koa 框架、moment.js 等）</li><li>javaScript 模块：例如 hello.js</li><li>json 模块：例如 hello.json</li><li>C/C++ 模块：编译之后扩展名为 .node 的模块，例如 hello.node<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── benchmark                         一些 Node.js 性能测试代码</span><br><span class="line">├── deps                              Node.js 依赖</span><br><span class="line">├── doc                               文档</span><br><span class="line">├── lib                               Node.js 对外暴露的 js 模块源码</span><br><span class="line">├── src                               Node.js 的 c&#x2F;c++ 源码文件，内建模块</span><br><span class="line">├── test                              单元测试</span><br><span class="line">├── tools                             编译时用到的工具</span><br><span class="line">├── doc                               api 文档</span><br><span class="line">├── vcbuild.bat                       win 平台 makefile 文件</span><br><span class="line">├── node.gyp                          node-gyp 构建编译任务的配置文件                           </span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h2><blockquote><p>面试中可能会问到能说下 require 的加载机制吗?<br>在 Node.js 中模块加载一般会经历 3 个步骤，<code>路径分析</code>、<code>文件定位</code>、<code>编译执行</code>。<br>按照模块的分类，按照以下顺序进行优先加载：</p></blockquote><ul><li><strong>系统缓存</strong>：模块被执行之后会会进行缓存，首先是先进行缓存加载，判断缓存中是否有值。</li><li><strong>系统模块</strong>：也就是原生模块，这个优先级仅次于缓存加载，部分核心模块已经被编译成二进制，省略了 <code>路径分析</code>、<code>文件定位</code>，直接加载到了内存中，系统模块定义在 Node.js 源码的 lib 目录下，可以去查看。</li><li><strong>文件模块</strong>：优先加载 <code>.、..、/</code> 开头的，如果文件没有加上扩展名，会依次按照 <code>.js、.json、.node</code> 进行扩展名补足尝试，<strong>那么在尝试的过程中也是以同步阻塞模式来判断文件是否存在</strong>，从性能优化的角度来看待，.json、.node最好还是加上文件的扩展名。</li><li><strong>目录做为模块</strong>：这种情况发生在文件模块加载过程中，也没有找到，但是发现是一个目录的情况，这个时候会将这个目录当作一个 <code>包</code> 来处理，Node 这块采用了 Commonjs 规范，先会在项目根目录查找 package.json 文件，取出文件中定义的 main 属性<code> (&quot;main&quot;: &quot;lib/hello.js&quot;)</code> 描述的入口文件进行加载，也没加载到，则会抛出默认错误: Error: Cannot find module ‘lib/hello.js’</li><li><strong>node_modules</strong> 目录加载：对于系统模块、路径文件模块都找不到，Node.js 会从当前模块的父目录进行查找，直到系统的根目录<br><img src="/images/nodejs/catalog.jpg" alt="catalog.jpg"><br>require 模块加载时序图</li></ul><h2 id="模块缓存在哪"><a href="#模块缓存在哪" class="headerlink" title="模块缓存在哪"></a>模块缓存在哪</h2><p>上面讲解了模块的加载机制，中间有提到模块初次加载之后会缓存起来，有没有疑问，模块缓存在哪里？</p><p>Node.js 提供了 require.cache API 查看已缓存的模块，返回值为对象，为了验证，这里做一个简单的测试，如下所示：</p><ul><li>新建 test-module.js 文件<br>这里我导出一个变量和一个方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    test: () &#x3D;&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>新建 test.js 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require(&#39;.&#x2F;test-module.js&#39;);</span><br><span class="line"></span><br><span class="line">console.log(require.cache);</span><br></pre></td></tr></table></figure>在这个文件里加载 test-module.js 文件，在之后打印下 require.cache 看下里面返回的是什么？看到以下结果应该就很清晰了，模块的文件名、地址、导出数据都很清楚。<br><img src="/images/nodejs/test-module.png" alt="test-module.png"></li></ul><h2 id="模块循环引用"><a href="#模块循环引用" class="headerlink" title="模块循环引用"></a>模块循环引用</h2><p><strong>问题1</strong></p><blockquote><p>假设有 a.js、b.js 两个模块相互引用，会有什么问题？是否为陷入死循环？看以下例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; a.js</span><br><span class="line">console.log(&#39;a模块start&#39;);</span><br><span class="line"></span><br><span class="line">exports.test &#x3D; 1;</span><br><span class="line"></span><br><span class="line">undeclaredVariable &#x3D; &#39;a模块未声明变量&#39;</span><br><span class="line"></span><br><span class="line">const b &#x3D; require(&#39;.&#x2F;b&#39;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;a模块加载完毕: b.test值：&#39;,b.test);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; b.js</span><br><span class="line">console.log(&#39;b模块start&#39;);</span><br><span class="line"></span><br><span class="line">exports.test &#x3D; 2;</span><br><span class="line"></span><br><span class="line">const a &#x3D; require(&#39;.&#x2F;a&#39;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;undeclaredVariable: &#39;, undeclaredVariable);</span><br><span class="line"></span><br><span class="line">console.log(&#39;b模块加载完毕: a.test值：&#39;, a.test);</span><br></pre></td></tr></table></figure><p><strong>问题2</strong></p><blockquote><p>a 模块中的 undeclaredVariable 变量在 b.js 中是否会被打印？<br>控制台执行<code>node a.js</code>，查看输出结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a模块start</span><br><span class="line">b模块start</span><br><span class="line">undeclaredVariable:  a模块未声明变量</span><br><span class="line">b模块加载完毕: a.test值： 1</span><br><span class="line">a模块加载完毕: b.test值： 2</span><br></pre></td></tr></table></figure><p>问题1，启动 a.js 的时候，会加载 b.js，那么在 b.js 中又加载了 a.js，但是此时 a.js 模块还没有执行完，返回的是一个 a.js 模块的 exports 对象 未完成的副本 给到 b.js 模块（因此是不会陷入死循环的）。然后 b.js 完成加载之后将 exports 对象提供给了 a.js 模块<br>问题2，因为 undeclaredVariable 是一个未声明的变量，也就是一个挂在全局的变量，那么在其他地方当然是可以拿到的。<br>在执行代码之前，Node.js 会使用一个代码封装器进行封装，例如下面所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(exports, require, module, __filename, __dirname) &#123;</span><br><span class="line">&#x2F;&#x2F; 模块的代码</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对象引用关系考察"><a href="#对象引用关系考察" class="headerlink" title="对象引用关系考察"></a>对象引用关系考察</h2><blockquote><p>也许是面试考察最多的问题：module.exports 与 exports 的区别？<br>exports 相当于 module.exports 的快捷方式如下所示:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const exports &#x3D; modules.exports;</span><br></pre></td></tr></table></figure><p>但是要注意不能改变 exports 的指向，我们可以通过 exports.test = ‘a’ 这样来导出一个对象, 但是不能向下面示例直接赋值，这样会改变 exports 的指向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误的写法 将会得到 undefined</span><br><span class="line">exports &#x3D; &#123;</span><br><span class="line">  &#39;a&#39;: 1,</span><br><span class="line">  &#39;b&#39;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确的写法</span><br><span class="line">modules.exports &#x3D; &#123;</span><br><span class="line">  &#39;a&#39;: 1,</span><br><span class="line">  &#39;b&#39;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Node.js 模块机制采用了 Commonjs 规范，弥补了当前 JavaScript 开发大型应用没有标准的缺陷，类似于 Java 中的类文件，Python 中的 import 机制，Node.js 中可以通过 module.exports、require 来导出和引入</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>算法栈</title>
    <link href="http://example.com/2021/03/07/nodejs/%E7%AE%97%E6%B3%95%E6%A0%88/"/>
    <id>http://example.com/2021/03/07/nodejs/%E7%AE%97%E6%B3%95%E6%A0%88/</id>
    <published>2021-03-07T07:58:58.000Z</published>
    <updated>2021-03-07T08:19:18.496Z</updated>
    
    <content type="html"><![CDATA[<p>栈，英文 Last In First Out 简称 LIFO，遵从后进先出的原则，与 “队列” 相反，在栈的头部添加元素、删除元素，如果栈中没有元素就称为空栈。<br>在现实生活场景中也很多例子，例如盘子叠放，从上面一个一个放置，取时也是从上面一个一个拿走，不可能从下面直接抽着拿，如下图所示<br><img src="/images/algorithm/stack_plate.png" alt="stack_plate"></p><p>这也是栈的典型应用，通过这个例子也可总结出栈的两个特性：</p><p>仅能从栈顶端存取数据<br>数据存取遵从后进先出原则</p><h3 id="栈的运行机制"><a href="#栈的运行机制" class="headerlink" title="栈的运行机制"></a>栈的运行机制</h3><p>关于栈的概念通过前面的学习，应该有了初步的认知，这里从零实现一个栈进一步对栈的运行机制做一个分析，下面看下我们实现栈需要哪些步骤：</p><ol><li>Constructor(capacity): 初始化栈内存空间，设定栈的容量</li><li>isEmpty(): 检查栈是否为空，是否有元素</li><li>isOverflow(): 检查栈空间是否已满，如果满了是不能在入栈的</li><li>enStack(element): 栈顶位置入栈，先判断栈是否已满</li><li>deStack(): 栈顶位置出栈，先判断栈元素是否为空</li><li>len(): 栈空间已有元素长度</li><li>clear(): 清空栈元素，内存空间还是保留的</li><li>destroy(): 销毁栈，同时内存也要回收（通常高级语言都会有自动回收机制，例如 C 语言这时就需要手动回收）</li><li>traversing(): 遍历输出栈元素</li></ol><p><strong>初始化栈空间</strong><br>在构造函数的 constructor 里进行声明，传入 capacity 初始化栈空间同时初始化栈的顶部（top）为 0，底部则无需关注永远为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123; Number &#125; capacity 栈空间容量</span><br><span class="line"> *&#x2F;</span><br><span class="line">constructor(capacity) &#123;</span><br><span class="line">    if (!capacity) &#123;</span><br><span class="line">        throw new Error(&#39;The capacity field is required!&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.capacity &#x3D; capacity;</span><br><span class="line">    this.stack &#x3D; new Array(capacity);</span><br><span class="line">    this.top &#x3D; 0; &#x2F;&#x2F; 初始化栈顶为 0 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈空间是否为空检查</strong><br>定义 isEmpty() 方法返回栈空间是否为空，根据 top 栈顶位置进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isEmpty() &#123;</span><br><span class="line">    return this.top &#x3D;&#x3D;&#x3D; 0 ? true : false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈空间是否溢出检查</strong><br>定义 isOverflow() 方法返回栈空间是否溢出，根据栈顶位置和栈的空间容量进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isOverflow() &#123;</span><br><span class="line">    return this.top &#x3D;&#x3D;&#x3D; this.capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入栈</strong><br>定义 enStack(element) 方法进行入栈操作，element 为入栈传入的参数，入栈之前先判断，栈是否已满，栈未满情况下可进行入栈操作，最后栈位置做 ++ 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 入栈</span><br><span class="line"> * @param &#123; * &#125; element 入栈元素</span><br><span class="line"> *&#x2F;</span><br><span class="line">enStack(element) &#123;</span><br><span class="line">    if (this.isOverflow()) &#123;</span><br><span class="line">        throw new Error(&#39;栈已满&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.stack[this.top] &#x3D; element;</span><br><span class="line">    this.top++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>出栈</strong><br>定义 enStack(element) 方法进行出栈操作，首先判断栈空间是否为空，未空的情况进行出栈操作，注意这里的栈位置，由于元素进栈之后会进行 ++ 操作，那么在出栈时当前栈位置肯定是没有元素的，需要先做 – 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deStack() &#123;</span><br><span class="line">    if (this.isEmpty()) &#123;</span><br><span class="line">        throw new Error(&#39;栈已为空&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.top--;</span><br><span class="line">    return this.stack[this.top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈元素长度</strong><br>这个好判断，根据栈的 top 位置信息即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len() &#123;</span><br><span class="line">    return this.top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清除栈元素</strong><br>这里有几种实现，你也可以把 stack 的空间进行初始化，或者把 top 栈位置设为 0 也可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clear() &#123;</span><br><span class="line">    this.top &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈销毁</strong><br>在一些高级语言中都会有垃圾回收机制，例如 JS 中只要当前对象不再持有引用，下次垃圾回收来临时将会被回收。不清楚的可以看看我之前写的 <a href="https://mp.weixin.qq.com/s?__biz=MzIyNDU2NTc5Mw==&mid=2247483715&idx=1&sn=00600d07ce4fd2b465d6cc7692d050f0&chksm=e80c4e0ddf7bc71bf22dca61b945eb4ed6dae9b4a3ec8d437ff37212740e276965b7597de413&token=1574280773&lang=zh_CN#rd">Node.js 内存管理和 V8 垃圾回收机制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">destroy() &#123;</span><br><span class="line">    this.stack &#x3D; null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈元素遍历</strong><br>定义 traversing(isBottom) 方法对栈的元素进行遍历输出，默认为顶部遍历，也可传入 isBottom 参数为 true 从底部开始遍历。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">traversing(isBottom &#x3D; false)&#123;</span><br><span class="line">    const arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">    if (isBottom) &#123;</span><br><span class="line">        for (let i&#x3D;0; i &lt; this.top; i++) &#123;</span><br><span class="line">            arr.push(this.stack[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (let i&#x3D;this.top-1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">            arr.push(this.stack[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(arr.join(&#39; | &#39;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做一些测试</strong><br>做下测试分别看下入栈、出栈、遍历操作，其它的功能大家在练习的过程中可自行实践。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const s1 &#x3D; new StackStudy(4);</span><br><span class="line"></span><br><span class="line">s1.enStack(&#39;Nodejs&#39;); &#x2F;&#x2F; 入栈</span><br><span class="line">s1.enStack(&#39;技&#39;);</span><br><span class="line">s1.enStack(&#39;术&#39;);</span><br><span class="line">s1.enStack(&#39;栈&#39;);</span><br><span class="line">s1.traversing() &#x2F;&#x2F; 栈 | 术 | 技 | Nodejs</span><br><span class="line">console.log(s1.deStack()); &#x2F;&#x2F; 出栈 -&gt; 栈</span><br><span class="line">s1.traversing() &#x2F;&#x2F; 术 | 技 | Nodejs</span><br><span class="line">s1.traversing(true) &#x2F;&#x2F; 从栈底遍历：Nodejs | 技 | 术</span><br></pre></td></tr></table></figure><p><img src="/images/algorithm/stack_machine_made.png" alt="stack_machine_made"><br><a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/stack.js">栈的运行机制源码地址</a></p><h3 id="JavaScript-数组实现栈"><a href="#JavaScript-数组实现栈" class="headerlink" title="JavaScript 数组实现栈"></a>JavaScript 数组实现栈</h3><p>JavaScript 中提供的数组功能即可实现一个简单的栈，使用起来也很方便，熟悉相关 API 即可，下面我们来看下基于 JS 数组的入栈、出栈过程实现。<br><img src="/images/algorithm/js-array-stack.png" alt="js-array-stack"><br>以上图片展示了栈的初始化、入栈、出栈过程，下面我们采用 JavaScript 原型链的方式实现。<br><strong>初始化队列</strong><br>初始化一个存储栈元素的数据结构，如果未传入默认赋值空数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function StackStudy(elements) &#123;</span><br><span class="line">    this.elements &#x3D; elements || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加栈元素</strong><br>实现一个 enStack 方法，向栈添加元素，注意只能是栈头添加，使用 JavaScript 数组中的 push 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StackStudy.prototype.enStack &#x3D; function(element) &#123;</span><br><span class="line">    this.elements.push(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>移除栈元素</strong><br>实现一个 deStack 方法，栈尾部弹出元素，使用 JavaScript 数组中的 pop 方法（这一点是和队列不同的）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StackStudy.prototype.deStack &#x3D; function() &#123;</span><br><span class="line">    return this.elements.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/stack-js.js">通过 JavaScript 数组实现</a></p><h3 id="栈的经典应用"><a href="#栈的经典应用" class="headerlink" title="栈的经典应用"></a>栈的经典应用</h3><p>通过对前面的讲解，相信已经对栈有了一定的了解，那么它可以用来做什么呢，本节举几个典型的应用案例。<br><strong>十进制转换为二进制、八进制、十六进制</strong><br>现在生活中我们使用最多的是十进制来表示，也是人们最易懂和记得的，但是计算机在处理的时候就要转为二进制进行计算，在十进制与二进制的转换过程之间一般还会用八进制或者十六进制作为二进制的缩写。</p><p>因此，这里主要讲解十进制、八进制、十六进制、二进制转换过程中在栈中的实际应用。首先你需要先了解这几种数据类型之间的转换规则，也不难通过一张图来告诉你。<br><img src="/images/algorithm/data_transformation.png" alt="data_transformation"></p><p>上图中我们用十进制整除需要转换的数据类型(二进制、八进制、十六进制)，将余数放入栈中，明白这个原理在用代码实现就很简单了。<br><strong>编码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const StackStudy &#x3D; require(&#39;.&#x2F;stack.js&#39;);</span><br><span class="line">const str &#x3D; &#39;0123456789ABCDEF&#39;;</span><br><span class="line"></span><br><span class="line">function dataConversion(num, type) &#123;</span><br><span class="line">    let x &#x3D; num;</span><br><span class="line">    const s1 &#x3D; new StackStudy(20);</span><br><span class="line"></span><br><span class="line">    while (x !&#x3D; 0) &#123;</span><br><span class="line">        s1.enStack(x % type);</span><br><span class="line">        x &#x3D; Math.floor(x &#x2F; type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (!s1.isEmpty()) &#123;</span><br><span class="line">        console.log(str[s1.deStack()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#39;--------------------&#39;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用我们在<code>栈的运行机制</code>里面讲解的代码，编写 dataConversion 方法，入栈、出栈进行遍历输出。代码中定义的变量 str 是为了十六进制会出现字母的情况做的处理。</p><p>以下运行结果完全符合我们的预期，大家也可用电脑自带的计算器功能进行验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 测试八进制</span><br><span class="line">dataConversion(1024, 8); &#x2F;&#x2F; 2000</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试十六进制</span><br><span class="line">dataConversion(1024, 16); &#x2F;&#x2F; 400</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试十六进制带字母的情况</span><br><span class="line">dataConversion(3000, 16); &#x2F;&#x2F; BB8</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试二进制</span><br><span class="line">dataConversion(1024, 2); &#x2F;&#x2F; 10000000000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/stack-data-conversion.js">十进制转换为二进制、八进制、十六进制源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;栈，英文 Last In First Out 简称 LIFO，遵从后进先出的原则，与 “队列” 相反，在栈的头部添加元素、删除元素，如果栈中没有元素就称为空栈。&lt;br&gt;在现实生活场景中也很多例子，例如盘子叠放，从上面一个一个放置，取时也是从上面一个一个拿走，不可能从下面直接</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法队列</title>
    <link href="http://example.com/2021/03/07/nodejs/%E7%AE%97%E6%B3%95%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2021/03/07/nodejs/%E7%AE%97%E6%B3%95%E9%98%9F%E5%88%97/</id>
    <published>2021-03-07T07:23:51.000Z</published>
    <updated>2021-03-07T07:56:01.746Z</updated>
    
    <content type="html"><![CDATA[<p>队列，英文 First In First Out 简称 FIFO，遵从<strong>先进先出</strong>的原则，与 “栈” 相反，在队列的尾部添加元素，在队列的头部删除元素，如果队列中没有元素就称为空队列。</p><p>队列对应到生活场景中有很多例子，例如，我们去火车站窗口购票总要排队，先排队的人先购票，有新的人来了则在队尾排队等待前面的完成了依次购票。另外我们的订单超时队列、活动抢购先到先得等等，队列在生活中应用很广泛。</p><h3 id="JavaScript-数组实现队列"><a href="#JavaScript-数组实现队列" class="headerlink" title="JavaScript 数组实现队列"></a>JavaScript 数组实现队列</h3><p>JavaScript 中提供的数组功能即可实现一个简单的队列，使用起来也很方便，熟悉相关 API 即可，下面我们来看下基于 JS 数组的入队、出队过程实现。<br><img src="/images/algorithm/js-array-queue.png" alt="js-array-queue"><br>以上图片展示了队列的初始化、入队、出队过程，下面我们采用 JavaScript 原型链的方式实现。</p><ul><li>初始化队列<br>初始化一个存储队列中元素的数据结构，如果未传入默认赋值空数组，传入需先校验类型是否正确。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function QueueStudy(elements) &#123;</span><br><span class="line">    if (elements &amp;&amp; !(elements instanceof Array)) &#123;</span><br><span class="line">        throw new Error(&#39;必须为数组格式！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.elements &#x3D; elements || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>队列添加元素<br>实现一个 enQueue 方法，向队列添加元素，注意只能是队列尾部添加，使用 JavaScript 数组中的 push 方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueueStudy.prototype.enQueue &#x3D; function(element) &#123;</span><br><span class="line">    this.elements.push(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>队列移除元素<br>实现一个 deQueue 方法，向队列头部弹出元素，使用 JavaScript 数组中的 shift 方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueueStudy.prototype.deQueue &#x3D; function() &#123;</span><br><span class="line">    return this.elements.shift();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过 JavaScript 数组实现是很简单的，源码参见 <a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-js.js">https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-js.js</a></li></ul><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>优先队列，元素的添加、删除是基于优先级进行的。一个现实的例子就是机场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇（或带小孩的妇女）登机时也享有高于其他乘客的优先级。</p><p>优先队列对应到我们生活场景中也有很多例子，例如我们去银行办理业务，一般都会排号先到的先办理，但是呢，还会有 VIP 会员优先办理，又或者去火车站窗口上购票也会有提示军人可以优先办理等等</p><p><strong>实现步骤</strong><br>核心实现继 JavaScript 数组实现队列的例子，对入队函数进行改造如下所示：</p><ul><li>声明 queueElement 对象，包含了要添加到队列的元素</li><li>如果队列为空直接入队</li><li>如果找到一个比 priority 优先级大的元素，插入新元素，这里使用到了 JS 数组中的 splice 方法</li><li>最后如果队列中的所有元素的优先级都小于 priority，则直接在队列尾部入队</li><li>另外打印输出的方法也做了简单修改</li></ul><p>代码示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.prototype.enQueue &#x3D; function(element, priority) &#123;</span><br><span class="line">    const queueElement &#x3D; &#123; element, priority &#125;;</span><br><span class="line"></span><br><span class="line">    if (this.isEmpty()) &#123;</span><br><span class="line">        return this.elements.push(queueElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let added &#x3D; false;</span><br><span class="line">    for (let i&#x3D;0; i &lt; this.elements.length; i++) &#123;</span><br><span class="line">        if (priority &lt; this.elements[i][&#39;priority&#39;]) &#123;</span><br><span class="line">            added &#x3D; true;</span><br><span class="line">            this.elements.splice(i, 0, queueElement)</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!added) &#123;</span><br><span class="line">        this.elements.push(queueElement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PriorityQueue.prototype.print &#x3D; function() &#123;</span><br><span class="line">    console.log(this.elements.map(item &#x3D;&gt; item.element).join(&#39; | &#39;));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>运行测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const queue &#x3D; new PriorityQueue();</span><br><span class="line">queue.enQueue(&#39;普通会员1&#39;, 5);</span><br><span class="line">queue.enQueue(&#39;普通会员2&#39;, 10);</span><br><span class="line">queue.print() &#x2F;&#x2F; 普通会员1 | 普通会员2</span><br><span class="line">queue.enQueue(&#39;VIP会员1&#39;, 3);</span><br><span class="line">queue.print() &#x2F;&#x2F; VIP会员1 | 普通会员1 | 普通会员2</span><br><span class="line">queue.enQueue(&#39;VIP会员2&#39;, 3);</span><br><span class="line">queue.print() &#x2F;&#x2F; VIP会员1 | VIP会员2 | 普通会员1 | 普通会员2</span><br><span class="line">queue.deQueue();</span><br><span class="line">queue.print() &#x2F;&#x2F; VIP会员2 | 普通会员1 | 普通会员2</span><br></pre></td></tr></table></figure><p><strong>图例展示</strong><br>下面以图例的形式展示以上优先队列程序的运行过程<br><img src="/images/algorithm/queue-priority.png" alt="queue-priority"><br>以上是将优先级最小的元素放置于队列前面，称之为最小优先队列，最大优先队列的实现则反之。源码参见 <a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-priority.js">https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-priority.js</a></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>循环队列有些地方也称之为<code>环形队列</code>，其本身是一种环形结构的队列，相较于普通队列有个好处是第一个元素出队之后，剩下元素无需依次向前移位，充分利用了向量空间，在以下介绍中给出了完整的实现过程。</p><p>在设计环形队列时即可顺时针也可逆时针两个方向进行实现，在入队时可根据 (tail % capacity) 规则，进行队尾添加元素，tail 表示队尾的指针，capacity 表示容量，出队同样以（head % capacity）规则操作，head 表示队头指针，下面以长度为 6 的队列进行图文形式说明下实现过程。<br><img src="/images/algorithm/queue-ring.png" alt="queue-ring"></p><p><strong>ES6 实现循环队列</strong><br>以下采用 EcameScript 6 的 Class 写法，实现一个环形队列，需要做哪些点呢？以下列出需要实现的功能点：</p><ul><li>创建队列，初始化队列空间</li><li>检查队列是否为空</li><li>检查队列是否溢出</li><li>入队</li><li>出队</li><li>队列长度</li><li>清空队列</li><li>销毁队列，内存空间也将释放</li><li>队列遍历输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">const Init &#x3D; Symbol(&#39;QueueStudy#Init&#39;);</span><br><span class="line"></span><br><span class="line">class QueueStudy &#123;</span><br><span class="line">    constructor (capacity) &#123;</span><br><span class="line">        if (!capacity) &#123;</span><br><span class="line">            throw new Error(&#39;The capacity field is required!&#39;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.capacity &#x3D; capacity; &#x2F;&#x2F; 初始化容量</span><br><span class="line">        this[Init]();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 清空队列，内存保留</span><br><span class="line">     *&#x2F;</span><br><span class="line">    clear() &#123;</span><br><span class="line">        this[Init]()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Init]() &#123;</span><br><span class="line">        this.queue &#x3D; new Array(this.capacity); &#x2F;&#x2F; 初始化队列内存空间</span><br><span class="line">        this.queueLen &#x3D; 0; &#x2F;&#x2F; 初始化队列元素</span><br><span class="line">        this.head &#x3D; 0; &#x2F;&#x2F; 队头</span><br><span class="line">        this.tail &#x3D; 0; &#x2F;&#x2F; 尾部</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 队列是否为空</span><br><span class="line">     *&#x2F;</span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">        return this.queueLen &#x3D;&#x3D;&#x3D; 0 ? true : false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 队列是否溢出</span><br><span class="line">     *&#x2F;</span><br><span class="line">    isOverflow() &#123;</span><br><span class="line">        return this.queueLen &#x3D;&#x3D;&#x3D; this.capacity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 入队</span><br><span class="line">     *&#x2F;</span><br><span class="line">    enQueue(element) &#123;</span><br><span class="line">        if (this.isOverflow()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.queue[this.tail] &#x3D; element;</span><br><span class="line">        this.tail++;</span><br><span class="line">        this.tail &#x3D; this.tail % this.capacity;</span><br><span class="line">        this.queueLen++;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 出队</span><br><span class="line">     *&#x2F;</span><br><span class="line">    deQueue() &#123;</span><br><span class="line">        if (this.isEmpty()) &#123;</span><br><span class="line">            throw new Error(&#39;队列为空&#39;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            const element &#x3D; this.queue[this.head];</span><br><span class="line">            this.head++; &#x2F;&#x2F; 队头位置移动</span><br><span class="line">            this.head &#x3D; this.head % this.capacity;</span><br><span class="line">            this.queueLen--;</span><br><span class="line">            return element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 队列长度</span><br><span class="line">     *&#x2F;</span><br><span class="line">    len() &#123;</span><br><span class="line">        return this.queueLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 销毁队列，内存回收</span><br><span class="line">     *&#x2F;</span><br><span class="line">    destroy() &#123;</span><br><span class="line">        this.queue &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 队列元素遍历</span><br><span class="line">     *&#x2F;</span><br><span class="line">    traversing() &#123;</span><br><span class="line">        console.log(&#39;------------traversing start------------&#39;);</span><br><span class="line">        </span><br><span class="line">        for (let i&#x3D;this.head; i&lt;this.queueLen + this.head; i++) &#123;</span><br><span class="line">            console.log(this.queue[i % this.capacity]);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#39;------------traversing end------------\n&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const q1 &#x3D; new QueueStudy(6);</span><br><span class="line"></span><br><span class="line">q1.enQueue(&#39;a&#39;);</span><br><span class="line">q1.traversing();</span><br><span class="line">q1.enQueue(&#39;b&#39;);</span><br><span class="line">q1.enQueue(&#39;c&#39;);</span><br><span class="line">q1.enQueue(&#39;d&#39;);</span><br><span class="line">q1.enQueue(&#39;e&#39;);</span><br><span class="line">q1.enQueue(&#39;f&#39;);</span><br><span class="line">q1.traversing();</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">q1.enQueue(&#39;g&#39;);</span><br><span class="line">q1.traversing();</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">q1.enQueue(&#39;h&#39;);</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">console.log(&#39;出队: &#39;, q1.deQueue());</span><br><span class="line">q1.traversing();</span><br><span class="line">q1.clear();</span><br><span class="line">q1.traversing();</span><br></pre></td></tr></table></figure><p><img src="/images/algorithm/queue-ring-test.png" alt="queue-ring-test"><br>源码参见 <a href="https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-ring.js">https://github.com/Q-Angelo/project-training/tree/master/algorithm/queue-ring.js</a><br>推荐我在学习数据结构中看的两本书 学习<a href="https://book.douban.com/subject/27129352/">JavaScript数据结构与算法（第2版）</a>、图解数据结构使用 Python</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;队列，英文 First In First Out 简称 FIFO，遵从&lt;strong&gt;先进先出&lt;/strong&gt;的原则，与 “栈” 相反，在队列的尾部添加元素，在队列的头部删除元素，如果队列中没有元素就称为空队列。&lt;/p&gt;
&lt;p&gt;队列对应到生活场景中有很多例子，例如，我们去</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 扩展系列</title>
    <link href="http://example.com/2021/03/07/nodejs/JavaScript_%E6%89%A9%E5%B1%95%E7%B3%BB%E5%88%97/"/>
    <id>http://example.com/2021/03/07/nodejs/JavaScript_%E6%89%A9%E5%B1%95%E7%B3%BB%E5%88%97/</id>
    <published>2021-03-07T04:44:24.000Z</published>
    <updated>2021-03-07T05:35:49.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式扩展"><a href="#正则表达式扩展" class="headerlink" title="正则表达式扩展"></a>正则表达式扩展</h3><ul><li>构造函数 ES5声明对象 情况一<blockquote><p>第一个参数是字符; 第二个是修饰符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let regex &#x3D; new RegExp(&#39;xyz&#39;, &#39;i&#39;);</span><br><span class="line"></span><br><span class="line">console.log(regex.test(&#39;xyz123&#39;), regex.test(&#39;xyZ123&#39;)); &#x2F;&#x2F; true true</span><br></pre></td></tr></table></figure></li><li>构造函数 ES5声明对象 情况二<blockquote><p>第一个参数是正则表达式; 但是此时不接受第二个参数是一个修饰符，否则会报错</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let regex2 &#x3D; new RegExp(&#x2F;xyz&#x2F;i); &#x2F;&#x2F; 正确</span><br><span class="line">let regex3 &#x3D; new RegExp(&#x2F;xyz&#x2F;i, &#39;i&#39;); &#x2F;&#x2F; 错误；Uncaught TypeError: Cannot supply flags when constructing one RegExp </span><br><span class="line"></span><br><span class="line">console.log(regex2.test(&#39;xyz123&#39;), regex2.test(&#39;xyZ123&#39;)); &#x2F;&#x2F; true true</span><br></pre></td></tr></table></figure></li><li>构造函数 ES6中的声明对象<blockquote><p>ES6改变了此行为，第一个参数是正则表达式，第二个参数也可以在指定修饰符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let regex3 &#x3D; new RegExp(&#x2F;abc&#x2F;ig, &#39;i&#39;);</span><br><span class="line"></span><br><span class="line">console.log(regex3.flags); &#x2F;&#x2F; i</span><br></pre></td></tr></table></figure>以上示例中，原有正则对象的修饰符是ig，它会被第二个参数i覆盖。</li></ul><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li>Unicode表示法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(&#39;a&#39;,&#96;\u0061&#96;); &#x2F;&#x2F;a a</span><br><span class="line">  &#x2F;&#x2F;乱码，因为\u20bb7转换成二进制以大于0xFFFF，会当做两个字符处理</span><br><span class="line">  console.log(&#39;s&#39;,&#96;\u20BB7&#96;); &#x2F;&#x2F;s ₻7</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;ES6中处理大于0xFFFF这种情况，用大括号&#123;&#125;把这种Unicode编码包括起来</span><br><span class="line">  console.log(&#39;s&#39;,&#96;\u&#123;20BB7&#125;&#96;); &#x2F;&#x2F;s 𠮷</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let s&#x3D;&#39;𠮷&#39;;</span><br><span class="line">  &#x2F;&#x2F;取长度，四个字节为两个字符</span><br><span class="line">  console.log(&#39;length&#39;,s.length); &#x2F;&#x2F;2</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;ES5中charAt()取字符，charCodeAt()取码值</span><br><span class="line">  console.log(&#39;0&#39;,s.charAt(0)); &#x2F;&#x2F;0 �</span><br><span class="line">  console.log(&#39;1&#39;,s.charAt(1)); &#x2F;&#x2F;1 �</span><br><span class="line">  console.log(&#39;at0&#39;,s.charCodeAt(0)); &#x2F;&#x2F;at0 55362</span><br><span class="line">  console.log(&#39;at1&#39;,s.charCodeAt(1)); &#x2F;&#x2F;at1 57271</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;ES6中codePointAt()取码值，toString(16)转换成16进制</span><br><span class="line">  let s1&#x3D;&#39;𠮷a&#39;;</span><br><span class="line">  console.log(&#39;length&#39;,s1.length);</span><br><span class="line">  console.log(&#39;code0&#39;,s1.codePointAt(0)); &#x2F;&#x2F;code0 134071</span><br><span class="line">  console.log(&#39;code0&#39;,s1.codePointAt(0).toString(16)); &#x2F;&#x2F;code0 20bb7</span><br><span class="line">  console.log(&#39;code1&#39;,s1.codePointAt(1)); &#x2F;&#x2F;code1 57271</span><br><span class="line">  console.log(&#39;code2&#39;,s1.codePointAt(2)); &#x2F;&#x2F;code2 97</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F;ES5中fromCharCode()处理大于两个字节，会乱码</span><br><span class="line">  console.log(String.fromCharCode(&quot;0x20bb7&quot;)); &#x2F;&#x2F;ஷ</span><br><span class="line">  &#x2F;&#x2F;ES6中fromCodePoint()处理大于两个字节，正常显示</span><br><span class="line">  console.log(String.fromCodePoint(&quot;0x20bb7&quot;)); &#x2F;&#x2F;𠮷</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>遍历接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;字符串遍历器接口</span><br><span class="line">let str&#x3D;&#39;\u&#123;20bb7&#125;abc&#39;;</span><br><span class="line">&#x2F;&#x2F;ES5处理会将&#123;20bb7&#125;按照两个字节处理，造成前一个字符乱码</span><br><span class="line">for(let i&#x3D;0;i&lt;str.length;i++)&#123;</span><br><span class="line">  console.log(&#39;es5&#39;,str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出结果:� � a b c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ES6使用for of遍历处理，可以自动处理大于0xFFFF这种情况</span><br><span class="line">for(let code of str)&#123;</span><br><span class="line">  console.log(&#39;es6&#39;,code);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出结果:𠮷 a b c</span><br></pre></td></tr></table></figure></li><li>模板字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let name &#x3D; &quot;张三&quot;;</span><br><span class="line">  let info &#x3D; &quot;我来自China&quot;;</span><br><span class="line">  let str &#x3D; &#96;I am $&#123;name&#125; , $&#123;info&#125;&#96;;</span><br><span class="line">  console.log(str);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F;row对所有的斜杠进行了转义，原样输出</span><br><span class="line">  console.log(String.raw&#96;Hi\n$&#123;1+2&#125;&#96;);&#x2F;&#x2F;Hi\n3</span><br><span class="line">  console.log(&#96;Hi\n$&#123;1+2&#125;&#96;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>标签模板<blockquote><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的是函数，紧跟在后面的模板字符串就是它的参数。<br>两个作用： 第一在过滤 html 字符串的时候防止 xss 攻击用这个处理，第二可以用于多语言转换</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let user &#x3D; &#123;</span><br><span class="line">    name:&#39;zhangsan&#39;,</span><br><span class="line">    info:&#39;hello world&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(abc&#96;I am $&#123;user.name&#125;,$&#123;user.info&#125;&#96;);</span><br><span class="line">  function abc(s,v1,v2)&#123;</span><br><span class="line">    console.log(s,v1,v2);</span><br><span class="line">    return s+v1+v2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新增方法(10种)<br>padStart()、padEnd() 这两个方法是 ES7 的草案中提案的，在 ES6 中使用，需要安装库<code>npm install babel-polyfill --save-dev</code>打补丁，处理兼容性，在项目中引入 babel-polyfill<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#39;babel-polyfill&#39;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let str&#x3D;&quot;string&quot;;</span><br><span class="line">  &#x2F;&#x2F;includes()判断是否包含某个字符</span><br><span class="line">  console.log(&#39;includes&#39;,str.includes(&quot;c&quot;));</span><br><span class="line">  &#x2F;&#x2F;startsWith()判断是否以某个字符为起始</span><br><span class="line">  console.log(&#39;start&#39;,str.startsWith(&#39;str&#39;));</span><br><span class="line">  &#x2F;&#x2F;endsWith()判断是否以某个字符为结束</span><br><span class="line">  console.log(&#39;end&#39;,str.endsWith(&#39;ng&#39;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  let str&#x3D;&quot;abc&quot;;</span><br><span class="line">  &#x2F;&#x2F;repeat()使字符串重复多少次</span><br><span class="line">  console.log(str.repeat(3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F;第一个参数指定要显示的长度，第二个参数表示如果长度不够要添加的字符</span><br><span class="line">  console.log(&#39;1&#39;.padStart(2,&#39;0&#39;)); &#x2F;&#x2F;01</span><br><span class="line">  console.log(&#39;1&#39;.padEnd(2,&#39;0&#39;)); &#x2F;&#x2F;10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li>Number.isInteger()<blockquote><p>判断是否为整数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;25&#39;,Number.isInteger(25)); &#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;25.0&#39;,Number.isInteger(25.0)); &#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;25.1&#39;,Number.isInteger(25.1)); &#x2F;&#x2F;false</span><br><span class="line">console.log(&#39;25.1&#39;,Number.isInteger(&#39;25&#39;)); &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure></li><li>Number.isFinite()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;15&#39;,Number.isFinite(15)); &#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;NaN&#39;,Number.isFinite(NaN)); &#x2F;&#x2F;false</span><br><span class="line">console.log(&#39;1&#x2F;0&#39;,Number.isFinite(&#39;true&#39;&#x2F;0)); &#x2F;&#x2F;false</span><br><span class="line">console.log(&#39;NaN&#39;,Number.isNaN(NaN)); &#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;0&#39;,Number.isNaN(0)); &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure></li><li>Number.isNaN()<blockquote><p>判断一个值是否为NaN</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;NaN&#39;,Number.isNaN(NaN)); &#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;0&#39;,Number.isNaN(0)); &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure></li><li>Number.MAX_SAFE_INTEGER<blockquote><p>数的最大上限</p></blockquote></li><li>Number.MIN_SAFE_INTEGER<blockquote><p>数的最小下限</p></blockquote></li><li>Number.isSafeInteger()<blockquote><p>判断给的这个数是否在有效范围内<br>注意： ES6中如果一个数不在-2的53方和2的53次方之间就会不准确</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(Number.MAX_SAFE_INTEGER,Number.MIN_SAFE_INTEGER);</span><br><span class="line">  console.log(&#39;10&#39;,Number.isSafeInteger(10));&#x2F;&#x2F;10 true</span><br><span class="line">  console.log(&#39;a&#39;,Number.isSafeInteger(&#39;a&#39;));&#x2F;&#x2F;a false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Math.trunc()<blockquote><p>取整</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">console.log(4.1,Math.trunc(4.1)); &#x2F;&#x2F; 4</span><br><span class="line">console.log(4.9,Math.trunc(4.9)); &#x2F;&#x2F; 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Math.sign()<blockquote><p>返回-1,0,1 小于0返回-1，等于0返回0，大于0返回1,注意参数为数值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;-5&#39;,Math.sign(-5)); &#x2F;&#x2F;-1</span><br><span class="line">console.log(&#39;0&#39;,Math.sign(0)); &#x2F;&#x2F;0</span><br><span class="line">console.log(&#39;5&#39;,Math.sign(5)); &#x2F;&#x2F;1</span><br></pre></td></tr></table></figure></li><li>Math.cbrt()<blockquote><p>返回一个数的立方根</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">console.log(&#39;-1&#39;,Math.cbrt(-1)); &#x2F;&#x2F;-1</span><br><span class="line">console.log(&#39;8&#39;,Math.cbrt(8)); &#x2F;&#x2F;2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><ul><li>Array.of()<blockquote><p>把一组<code>数组变量</code>转换成数组类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let arr &#x3D; Array.of(3,4,7,9,11);</span><br><span class="line">  console.log(&#39;arr&#x3D;&#39;,arr); &#x2F;&#x2F;arr&#x3D; [3, 4, 7, 9, 11]</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;返回空数组</span><br><span class="line">  let empty&#x3D;Array.of();</span><br><span class="line">  console.log(&#39;empty&#39;,empty); &#x2F;&#x2F;empty []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Array.from()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;第一种用法，传入一个参数</span><br><span class="line">&lt;div id&#x3D;&quot;doc3&quot; class&#x3D;&quot;syy&quot;&gt;</span><br><span class="line">    &lt;p&gt;p1&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;p2&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;p3&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;获取所有的p标签</span><br><span class="line">let p&#x3D;document.querySelectorAll(&#39;p&#39;);</span><br><span class="line">let pArr&#x3D;Array.from(p);</span><br><span class="line">pArr.forEach(function(item)&#123;</span><br><span class="line">  &#x2F;&#x2F;textContent是ES5的一个原生方法，获取文本</span><br><span class="line">  console.log(item.textContent);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;输出 p1 p2 p3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种用法传入两个参数,第二个参数类似于map映射</span><br><span class="line">console.log(Array.from([1,3,5],function(item)&#123;return item*2&#125;)); &#x2F;&#x2F;[2, 6, 10]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>fill()<blockquote><p>填充,只写一个参数全部替换，三个参数情况下：第一个参数是替换内容，第二个参数是起始位置，第三个参数是结束位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(&#39;fill-7&#39;,[1,&#39;a&#39;,undefined].fill(7)); &#x2F;&#x2F;[7, 7, 7]</span><br><span class="line">  console.log(&#39;fill,pos&#39;,[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].fill(7,1,3));&#x2F;&#x2F;[&quot;a&quot;, 7, 7]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>keys()<blockquote><p>获取索引</p></blockquote></li><li>values()<blockquote><p>获取值，是ES7中的一个提案，存在浏览器兼容性需要加载 import ‘babel-polyfill’;</p></blockquote></li><li>entries()<blockquote><p>既获取索引又获取值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">for(let index of [&#39;1&#39;,&#39;c&#39;,&#39;ks&#39;].keys())&#123;</span><br><span class="line">  console.log(&#39;keys&#39;,index); &#x2F;&#x2F; 0 1 2</span><br><span class="line">&#125;</span><br><span class="line">for(let value of [&#39;1&#39;,&#39;c&#39;,&#39;ks&#39;].values())&#123;</span><br><span class="line">  console.log(&#39;values&#39;,value); &#x2F;&#x2F;1 c ks</span><br><span class="line">&#125;</span><br><span class="line">for(let [index,value] of [&#39;1&#39;,&#39;c&#39;,&#39;ks&#39;].entries())&#123;</span><br><span class="line">  console.log(&#39;values&#39;,index,value); &#x2F;&#x2F;0 1 1 c 2 ks</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>copyWithin(target,start,end)</li></ul><ul><li>target(必须)：从该位置开始替换数据</li><li>start(可选)：从该位置开始读取数据，默认为0</li><li>end(可选)：到该位置前停止读取数据，默认等于数组长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log([1,2,3,4,5].copyWithin(0,3,4)); &#x2F;&#x2F;[4, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>find(fn)<blockquote><p>查找符合条件的第一个元素,查找不到时返回undefined</p></blockquote></li><li>findIndex(fn)<blockquote><p>查找符合条件的第一个元素的下标值，查找不到时返回-1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log([1,2,3,4,5,6].find(function(item)&#123;return item&gt;3&#125;)); &#x2F;&#x2F;4</span><br><span class="line">  console.log([1,2,3,4,5,6].findIndex(function(item)&#123;return item&gt;3&#125;)); &#x2F;&#x2F;3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>展开运算符…<blockquote><p>数组拼接使用展开运算符可以取代concat的位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class="line">const b &#x3D; [&#39;c&#39;, &#39;d&#39;]</span><br><span class="line">const c &#x3D; [...a, ...b];</span><br><span class="line"></span><br><span class="line">console.log(c); &#x2F;&#x2F;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用concat</span><br><span class="line">const d &#x3D; a.concat(b)</span><br><span class="line">console.log(d); &#x2F;&#x2F;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><ul><li>参数默认值<blockquote><p>注意： 默认值后面不能跟没有默认值得变量，如(x, y = ‘world’,c)c没有默认值错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function test(x, y &#x3D; &#39;world&#39;)&#123;</span><br><span class="line">    console.log(&#39;默认值&#39;,x,y);</span><br><span class="line">  &#125;</span><br><span class="line">  test(&#39;hello&#39;); &#x2F;&#x2F;默认值 hello world</span><br><span class="line">  test(&#39;hello&#39;,&#39;China&#39;); &#x2F;&#x2F;默认值 hello China</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>作用域问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let x&#x3D;&#39;test&#39;;</span><br><span class="line">function test2(x,y&#x3D;x)&#123;</span><br><span class="line">  console.log(&#39;作用域&#39;,x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;参数中第一个x没有值</span><br><span class="line">test2(); &#x2F;&#x2F;作用域 undefined undefined</span><br><span class="line">test2(&#39;kill&#39;); &#x2F;&#x2F;作用域 kill kill</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;x为上面let定义的x</span><br><span class="line">function test3(z,y&#x3D;x)&#123;</span><br><span class="line">  console.log(&#39;作用域&#39;,z,y);</span><br><span class="line">&#125;</span><br><span class="line">test3(&#39;kill&#39;); &#x2F;&#x2F;作用域 kill test</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>rest参数<blockquote><p>rest参数就是在你不确定有多少个参数的时候，把你输入的一系列参数转换成了数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">function test3(...arg)&#123;</span><br><span class="line">  for(let v of arg)&#123;</span><br><span class="line">    console.log(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test3(1,2,3,4,&#39;a&#39;); &#x2F;&#x2F; 1 3 4 5 a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>扩展运算符<blockquote><p>ES6的扩展运算符则可以看作是rest参数的逆运算。可以将数组转化为参数列表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 把一个数组拆分成离散的值</span><br><span class="line">console.log(...[1,2,4]); &#x2F;&#x2F;1 2 4</span><br><span class="line">console.log(&#39;a&#39;,...[1,2,4]); &#x2F;&#x2F;a 1 2 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>箭头函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let arrow &#x3D; v &#x3D;&gt; v*2;</span><br><span class="line">let arrow2 &#x3D; () &#x3D;&gt; 5;</span><br><span class="line">console.log(&#39;arrow&#39;,arrow(3)); &#x2F;&#x2F;6</span><br><span class="line">console.log(arrow2()); &#x2F;&#x2F;5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>尾调用<blockquote><p>尾调用存在于函数式编程概念里，函数的最后是不是是一个函数，可以用来提升性能，如果在性能优化过程中，是不断的嵌套其他函数，或者说这个函数依赖于另一个函数的操作，建议用尾调用的形式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function tail(x)&#123;</span><br><span class="line">    console.log(&#39;tail&#39;,x);</span><br><span class="line">  &#125;</span><br><span class="line">  function fx(x)&#123;</span><br><span class="line">    return tail(x)</span><br><span class="line">  &#125;</span><br><span class="line">  fx(123) &#x2F;&#x2F;tail 123</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><ul><li>简洁表示法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let o&#x3D;1;</span><br><span class="line">  let k&#x3D;2;</span><br><span class="line">  &#x2F;&#x2F;es5属性定义</span><br><span class="line">  let es5&#x3D;&#123;</span><br><span class="line">    o:o,</span><br><span class="line">    k:k</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;&#x2F;es6属性定义</span><br><span class="line">  let es6&#x3D;&#123;</span><br><span class="line">    o,</span><br><span class="line">    k</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(es5,es6);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;es5定义方法</span><br><span class="line">  let es5_method&#x3D;&#123;</span><br><span class="line">    hello:function()&#123;</span><br><span class="line">      console.log(&#39;hello&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;&#x2F;es6定义方法，更简洁</span><br><span class="line">  let es6_method&#x3D;&#123;</span><br><span class="line">    hello()&#123;</span><br><span class="line">      console.log(&#39;hello&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(es5_method.hello(),es6_method.hello());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性表达式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 属性表达式</span><br><span class="line">  let a&#x3D;&#39;b&#39;;</span><br><span class="line">  &#x2F;&#x2F;es5中key是固定的</span><br><span class="line">  let es5_obj&#x3D;&#123;</span><br><span class="line">    a:&#39;c&#39;,</span><br><span class="line">    b:&#39;c&#39;</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;&#x2F;es6中可以使用变量，这块相当于b</span><br><span class="line">  let es6_obj&#x3D;&#123;</span><br><span class="line">    [a]:&#39;c&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(es5_obj,es6_obj);</span><br><span class="line">  &#x2F;&#x2F;输出 Object &#123;a: &quot;c&quot;, b: &quot;c&quot;&#125; Object &#123;b: &quot;c&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Object.is()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(&#39;字符串&#39;,Object.is(&#39;abc&#39;,&#39;abc&#39;),&#39;abc&#39;&#x3D;&#x3D;&#x3D;&#39;abc&#39;); &#x2F;&#x2F;字符串 true true</span><br><span class="line">  &#x2F;&#x2F; 数组是引用类型，虽然以下是两个空数组，在值上都是空，但这两个数组引用的是不同的地址，因此在严格意义上来讲，他两个不是完全相等的</span><br><span class="line">  console.log(&#39;数组&#39;,Object.is([],[]),[]&#x3D;&#x3D;&#x3D;[]); &#x2F;&#x2F;数组 false false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Object.assign()<blockquote><p>拷贝函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;拷贝&#39;,Object.assign(&#123;a:&#39;a&#39;&#125;,&#123;b:&#39;b&#39;&#125;));</span><br><span class="line">&#x2F;&#x2F;拷贝 Object &#123;a: &quot;a&quot;, b: &quot;b&quot;&#125;</span><br></pre></td></tr></table></figure></li><li>Object.entries()<blockquote><p>遍历</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let test&#x3D;&#123;k:123,o:456&#125;;</span><br><span class="line">for(let [key,value] of Object.entries(test))&#123;</span><br><span class="line">console.log([key,value]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Object.keys()<blockquote><p>对数组排序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var anObj &#x3D; &#123; 100: &#39;a&#39;, 2: &#39;b&#39;, 7: &#39;c&#39; &#125;;</span><br><span class="line">console.log(Object.keys(anObj).sort( (x,y) &#x3D;&gt; x &gt; y));</span><br></pre></td></tr></table></figure></li><li>对象扩展拷贝<blockquote><p>node v8.5.0版本支持</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;&quot;name&quot;: &quot;zhangsan&quot;&#125;</span><br><span class="line">const b &#x3D; &#123;&quot;age&quot;: 8, &quot;email&quot;: &quot;XXX@qq.com&quot;&#125;</span><br><span class="line">console.log(&#123;...a, ...b, &quot;type&quot;: &quot;儿童&quot;&#125;);</span><br><span class="line">&#x2F;&#x2F; &#123;name: &quot;zhangsan&quot;, age: 18, email: &quot;XXX@qq.com&quot;, type: &quot;成人&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则表达式扩展&quot;&gt;&lt;a href=&quot;#正则表达式扩展&quot; class=&quot;headerlink&quot; title=&quot;正则表达式扩展&quot;&gt;&lt;/a&gt;正则表达式扩展&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构造函数 ES5声明对象 情况一&lt;blockquote&gt;
&lt;p&gt;第一个参数是字符; 第二</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://example.com/2021/03/07/nodejs/JavaScript_Promise/"/>
    <id>http://example.com/2021/03/07/nodejs/JavaScript_Promise/</id>
    <published>2021-03-06T16:09:38.000Z</published>
    <updated>2021-03-07T04:39:06.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>在JavaScript的世界中，所有代码都是单线程执行的。为了使程序不阻塞执行有了异步（I/O操作、事件操作），但是异步也有其不好之处，例如：异步回调callback回调地狱的问题，伴随着这些问题有了解决方案Promise。<br>面试指南</p></blockquote><ul><li>Promise 中 .then 的第二参数与 .catch 有什么区别?，参考：错误捕获</li><li>怎么让一个函数无论promise对象成功和失败都能被调用？，参考：finally</li></ul><h3 id="promise的基本使用和原理"><a href="#promise的基本使用和原理" class="headerlink" title="promise的基本使用和原理"></a>promise的基本使用和原理</h3><ol><li>如何异常捕获（Error、reject）通过catch捕获</li><li>多个串联-链式执行的好处</li><li>Promise.all和Promise.race</li><li>Promise标准-状态变化（Pending —— Fulfilled/Rejected）</li><li>then函数，不明文指定返回实例，返回本身的promise实例，否则返回指定的promise实例</li></ol><h3 id="callback方式书写"><a href="#callback方式书写" class="headerlink" title="callback方式书写"></a>callback方式书写</h3><blockquote><p>回调函数方式书写，如果异步请求多了，将会很难维护，程序看着很乱，最终会导致回调地狱。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let ajax &#x3D; function(callback)&#123;</span><br><span class="line">    console.log(&#39;执行&#39;);</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">      callback &amp;&amp; callback()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ajax(function()&#123;</span><br><span class="line">    console.log(&#39;执行 ajax方法&#39;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise方式书写"><a href="#promise方式书写" class="headerlink" title="promise方式书写"></a>promise方式书写</h3><ul><li><strong>resove</strong>：执行下一步操作</li><li><strong>reject</strong>：中断当前操作</li><li><strong>then</strong>：是Promise返回的对象，执行下一个，如果有两个函数，第一个表示resolved(已成功),第二个表示rejected(已失败)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let ajax &#x3D; function()&#123;</span><br><span class="line">  console.log(&#39;promise&#39;,&#39;执行&#39;);</span><br><span class="line">  return new Promise(function(resolve,reject)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;,1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax().then(function()&#123;</span><br><span class="line">  console.log(&#39;promise&#39;,&#39;执行ajax方法&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>执行两个Promise的效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let ajax &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;promise&#39;,&#39;执行&#39;);</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;,1000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ajax()</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;,1000);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      console.log(&#39;promise3&#39;,&#39;执行3&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多个Promise实例实现串行操作<blockquote><p>执行a b c d 如果中间出了错误使用catch来捕获</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let ajax &#x3D; function(num)&#123;</span><br><span class="line">    console.log(&#39;执行4&#39;);</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">      if (num &gt; 5) &#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        throw new Error(&#39;出错了&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ajax(6).then(function()&#123;</span><br><span class="line">    console.log(&#39;log&#39;,&#39;6&#39;);</span><br><span class="line">  &#125;).catch(function(err)&#123;</span><br><span class="line">    console.log(&#39;catch&#39;,err);</span><br><span class="line">  &#125;);</span><br><span class="line">  ajax(3).then(function()&#123;</span><br><span class="line">    console.log(&#39;log&#39;,&#39;3&#39;);</span><br><span class="line">  &#125;).catch(function(err)&#123;</span><br><span class="line">    console.log(&#39;catch&#39;,&#39;err&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 输出：</span><br><span class="line">  &#x2F;&#x2F; 执行4</span><br><span class="line">  &#x2F;&#x2F; 执行4</span><br><span class="line">  &#x2F;&#x2F; log 6</span><br><span class="line">  &#x2F;&#x2F; catch err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><blockquote><p>finally() 方法返回一个Promise，在promise执行结束时，无论结果是fulfilled或者是rejected，在执行then()和catch()后，都会执行finally指定的回调函数。这为指定执行完promise后，无论结果是fulfilled还是rejected都需要执行的代码提供了一种方式，避免同样的语句需要在then()和catch()中各写一次的情况。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&#39;success&#39;).then(result &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;then: &#39;, result)</span><br><span class="line"></span><br><span class="line">  return Promise.resolve(result);</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">  console.error(&#39;catch: &#39;, err);</span><br><span class="line"></span><br><span class="line">  return Promise.reject(err);</span><br><span class="line">&#125;).finally(result &#x3D;&gt; &#123;</span><br><span class="line">  console.info(&#39;finally: &#39;, result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; then:  success</span><br><span class="line">&#x2F;&#x2F; finally:  undefined</span><br><span class="line">&#x2F;&#x2F; Promise &#123;&lt;resolved&gt;: &quot;success&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="promise并行执行"><a href="#promise并行执行" class="headerlink" title="promise并行执行"></a>promise并行执行</h3><ul><li>Promise.all()<blockquote><p>Promise.all是将多个Promise实例当成一个Promise实例，all方法里是一个数组，数组传进来多个Promise实例，当多个Promise实例状态发生改变的时候，这个新的Promise实例才会发生变化。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;所有图片加载完在添加到页面上</span><br><span class="line">function loadImg(src)&#123;</span><br><span class="line">  return new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">    let img &#x3D; document.createElement(&#39;img&#39;);</span><br><span class="line">    img.src &#x3D; src;</span><br><span class="line">    img.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      resolve(img);</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror &#x3D; (err) &#x3D;&gt; &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showImgs(imgs)&#123;</span><br><span class="line">  imgs.forEach(function(img)&#123;</span><br><span class="line">    document.body.appendChild(img)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 每个loadImg()方法都是一个Promise实例只有当三个都发生该变化，才会执行新的Promise实例既Promise.all()</span><br><span class="line">Promise.all([</span><br><span class="line">  loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170512190539489.jpeg&#39;),</span><br><span class="line">  loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170225143135972.jpg&#39;),</span><br><span class="line">  loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170217225453679.jpg&#39;)</span><br><span class="line">]).then(showImgs)</span><br></pre></td></tr></table></figure></li></ul><h3 id="promise率先执行"><a href="#promise率先执行" class="headerlink" title="promise率先执行"></a>promise率先执行</h3><ul><li>Promise.race只要其中一个实例率先发生改变，Promise.race实例也将发生改变，其他的将不在响应。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 有一个图片加载完就添加到页面上</span><br><span class="line">  function loadImg(src)&#123;</span><br><span class="line">    return new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">      let img &#x3D; document.createElement(&#39;img&#39;);</span><br><span class="line">      img.src &#x3D; src;</span><br><span class="line">      img.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        resolve(img);</span><br><span class="line">      &#125;</span><br><span class="line">      img.onerror &#x3D; (err) &#x3D;&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function showImgs(img)&#123;</span><br><span class="line">    let p &#x3D; document.createElement(&#39;p&#39;);</span><br><span class="line">    p.appendChild(img);</span><br><span class="line">    document.body.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Promise.race([</span><br><span class="line">    loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170512190539489.jpeg&#39;),</span><br><span class="line">    loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170225143135972.jpg&#39;),</span><br><span class="line">    loadImg(&#39;http:&#x2F;&#x2F;www.qzfweb.com&#x2F;uploads&#x2F;20170217225453679.jpg&#39;)</span><br><span class="line">  ]).then(showImgs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h3><blockquote><p>Promise.then第二个参数与catch捕获错误的区别?</p></blockquote><ul><li>.then第二参数捕获错误<blockquote><p>.then第二个回调参数捕获错误具有就近的原则，不会影响后续then的进行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  const ajax &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;promise开始执行&#39;);</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        reject(&#96;There&#39;s a mistake&#96;);</span><br><span class="line">      &#125;,1000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ajax()</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      console.log(&#39;then1&#39;);</span><br><span class="line"></span><br><span class="line">      return Promise.resolve();</span><br><span class="line">    &#125;, err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;then1里面捕获的err: &#39;, err);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      console.log(&#39;then2&#39;);</span><br><span class="line"></span><br><span class="line">      return Promise.reject(&#96;There&#39;s a then mistake&#96;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;catch里面捕获的err: &#39;, err);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 输出</span><br><span class="line">  &#x2F;&#x2F; promise开始执行</span><br><span class="line">  &#x2F;&#x2F; then1里面捕获的err:  There&#39;s a mistake</span><br><span class="line">  &#x2F;&#x2F; then2</span><br><span class="line">  &#x2F;&#x2F; catch里面捕获的err:  There&#39;s a then mistake</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>catch捕获错误<blockquote><p>Promise抛错具有冒泡机制，能够不断传递，可以使用catch统一处理，下面代码中不会输出then1 then2会跳过，直接执行catch处理错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  const ajax &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;promise开始执行&#39;);</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        reject(&#96;There&#39;s a mistake&#96;);</span><br><span class="line">      &#125;,1000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ajax()</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      console.log(&#39;then1&#39;);</span><br><span class="line"></span><br><span class="line">      return Promise.resolve();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function()&#123;</span><br><span class="line">      console.log(&#39;then2&#39;);</span><br><span class="line"></span><br><span class="line">      return Promise.reject(&#96;There&#39;s a then mistake&#96;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;catch里面捕获的err: &#39;, err);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 输出</span><br><span class="line">  &#x2F;&#x2F; promise开始执行</span><br><span class="line">  &#x2F;&#x2F; catch里面捕获的err:  There&#39;s a then mistake</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>总结： 不论是Promise还是async/await在写法上解决了异步回调的问题，但是任何写法都不会改变JS单线程、异步的本质，除非js执行引擎发生变化。</li></ul><h3 id="手写-Promise-代码"><a href="#手写-Promise-代码" class="headerlink" title="手写 Promise 代码"></a>手写 Promise 代码</h3><p>这是一个经典的面试问题了，我将它放了最后，不废话直接上代码，共分为 5 部份完成，实现思路如下，理清了 Promise 的实现原理，很多问题自然就迎刃而解了。</p><ol><li>声明 MayJunPromise 类<br>主要在构造函数里做一些初始化操作</li></ol><ul><li>行 {1} 初始化一些默认值，Promise 的状态、成功时的 value、失败时的原因</li><li>行 {2} onResolvedCallbacks 用于一些异步处理 const p = new Promise(resolve =&gt; { setTimeout(function(){ resolve(1) }, 5000) })，当 resolve 在 setTimeout 里时，我们调用 p.then() 此时的状态为 pending，因此我们需要一个地方来保存，此处就是用于保存 Promise resolve 时的回调函数集合</li><li>行 {3} onRejectedCallbacks 与行 {2} 同理，保存 Promise reject 回调函数集合</li><li>行 {4} 成功时回调，先进行状态判断是不可逆的，如果 status = pending 修改状态和成功时的 value</li><li>行 {5} 失败时回调，与上面行 {4} 同理，例如 resolve(1); reject(‘err’); 第二个 reject 就无法覆盖</li><li>行 {6} 自执行</li><li>行 {7} 运行失败错误捕获</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 封装一个自己的 Promise</span><br><span class="line"> *&#x2F;</span><br><span class="line">class MayJunPromise &#123;</span><br><span class="line">  constructor(fn) &#123;</span><br><span class="line">    &#x2F;&#x2F; &#123;1&#125; 初始化一些默认值</span><br><span class="line">    this.status &#x3D; &#39;pending&#39;; &#x2F;&#x2F; 一个 promise 有且只有一个状态 (pending | fulfilled | rejected)</span><br><span class="line">    this.value &#x3D; undefined; &#x2F;&#x2F; 一个 JavaScript 合法值（包括 undefined，thenable，promise）</span><br><span class="line">    this.reason &#x3D; undefined; &#x2F;&#x2F; 是一个表明 promise 失败的原因的值</span><br><span class="line">    this.onResolvedCallbacks &#x3D; []; &#x2F;&#x2F; &#123;2&#125;</span><br><span class="line">    this.onRejectedCallbacks &#x3D; []; &#x2F;&#x2F; &#123;3&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#123;4&#125; 成功回调</span><br><span class="line">    let resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class="line">        this.status &#x3D; &#39;fulfilled&#39;; &#x2F;&#x2F; 终态</span><br><span class="line">        this.value &#x3D; value; &#x2F;&#x2F; 终值</span><br><span class="line">        this.onResolvedCallbacks.forEach(itemFn &#x3D;&gt; &#123;</span><br><span class="line">          itemFn()</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#123;5&#125; 失败回调</span><br><span class="line">    let reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123; &#x2F;&#x2F; 状态不可逆，例如 resolve(1);reject(&#39;err&#39;); 第二个 reject 就无法覆盖</span><br><span class="line">        this.status &#x3D; &#39;rejected&#39;; &#x2F;&#x2F; 终态</span><br><span class="line">        this.reason &#x3D; reason; &#x2F;&#x2F; 终值</span><br><span class="line">        this.onRejectedCallbacks.forEach(itemFn &#x3D;&gt; itemFn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; &#123;6&#125; 自执行</span><br><span class="line">      fn(resolve, reject);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">      reject(err); &#x2F;&#x2F; &#123;7&#125; 失败时捕获</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Then 方法</li></ol><ul><li><p>一个 promise 必须提供一个 then 方法以访问其当前值、终值和据因</p></li><li><p>行 {8} onFulfilled、onRejected 这两个参数可选，由于 Promise .then 是可以链式调用的，对于值穿透的场景要做判断，如果不传，则返回一个函数，也就是将上个结果进行传递</p></li><li><p>行 {9} then 方法必须返回一个 promise 对象</p></li><li><p>行 {10}、{11} 、{12} 也是 then 方法内实现的三种情况，相类似，次数只拿状态等于 fulfilled 进行说明</p></li><li><p>行 {10.1}  Promise/A+ 规范定义：要确保 onFulfilled、onRejected 在下一轮事件循环中被调用，你可以使用 setTimeout 来实现，因为我这里是在 Node.js 环境下，因此推荐使用了 setImmediate 来注册事件（因为可以避免掉 setTimeout 的延迟）</p></li><li><p>行  {10.2} Promise/A+ 标准规定：如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以 [[Resolve]](promise2, x) 处理解析，我们定义解析的函数 resolveMayJunPromise，也是一个核心函数，下面进行讲解 ```javascript /**</p></li><li><p>封装一个自己的 Promise</p></li><li><p>/ class MayJunPromise { …</p></li></ul><ul><li><p>一个 promise 必须提供一个 then 方法以访问其当前值、终值和据因</p></li><li><p>@param { Function } onFulfilled 可选，如果是一个函数一定是在状态为 fulfilled 后调用，并接受一个参数 value</p></li><li><p>@param { Function } onRejected 可选，如果是一个函数一定是在状态为 rejected 后调用，并接受一个参数 reason</p></li><li><p>@returns { Promise } 返回值必须为 Promise</p></li><li><p>/ then(onFulfilled, onRejected) { // {8} 值穿透，把 then 的默认值向后传递，因为标准规定 onFulfilled、onRejected 是可选参数 // 场景：new Promise(resolve =&gt; resolve(1)).then().then(value =&gt; console.log(value)); onFulfilled = Object.prototype.toString.call(onFulfilled) === ‘[object Function]’ ? onFulfilled : function(value) {return value}; onRejected = Object.prototype.toString.call(onRejected) === ‘[object Function]’ ? onRejected : function(reason) {throw reason};</p><p>// {9} then 方法必须返回一个 promise 对象 const promise2 = new MayJunPromise((resolve, reject) =&gt; { // {10} if (this.status === ‘fulfilled’) { // 这里的 this 会继承外层上下文绑定的 this<br>// {10.1} Promise/A+ 规定：确保 onFulfilled、onRejected 在下一轮事件循环中被调用<br>// 可以使用宏任务 (setTimeout、setImmediate) 或微任务（MutationObsever、process.nextTick）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    &#x2F;&#x2F; &#123;10.2&#125; Promise&#x2F;A+ 标准规定：如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以 [[Resolve]](promise2, x) 处理解析</span><br><span class="line">    const x &#x3D; onFulfilled(this.value);</span><br><span class="line">    &#x2F;&#x2F; 这里定义解析 x 的函数为 resolveMayJunPromise</span><br><span class="line">    resolveMayJunPromise(promise2, x, resolve, reject);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>}<br>// {11} if (this.status === ‘rejected’) {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const x &#x3D; onRejected(this.reason)</span><br><span class="line">    resolveMayJunPromise(promise2, x, resolve, reject);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>}<br>// {12} // 有些情况无法及时获取到状态，初始值仍是 pending，例如： // return new Promise(resolve =&gt; { setTimeout(function() { resolve(1) }, 5000) }) // .then(result =&gt; { console.log(result) }) if (this.status === ‘pending’) {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">this.onResolvedCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">  setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      const x &#x3D; onFulfilled(this.value);</span><br><span class="line">      resolveMayJunPromise(promise2, x, resolve, reject);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.onRejectedCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">  setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      const x &#x3D; onRejected(this.reason)</span><br><span class="line">      resolveMayJunPromise(promise2, x, resolve, reject);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>} });<br>return promise2; } }</p></li></ul><ol start="3"><li>Promise 解决过程<br>声明函数 resolveMayJunPromise()，<code>Promise 解决过程</code>是一个抽象的操作，在这里可以做到与系统的 Promise 或一些遵循 Promise/A+ 规范的 Promise 实现相互交互，以下代码建议跟随 Promise/A+ 规范进行阅读，规范上面也写的很清楚。</li></ol><p>注意：在实际编码测试过程中规范 [2.3.2] 样写还是有点问题，你要根据其它的 Promise 的状态值进行判断，此处注释掉了，建议使用  [2.3.3] 也是可以兼容的 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Promise 解决过程</span><br><span class="line"> * @param &#123; Promise &#125; promise2 </span><br><span class="line"> * @param &#123; any &#125; x </span><br><span class="line"> * @param &#123; Function &#125; resolve </span><br><span class="line"> * @param &#123; Function &#125; reject </span><br><span class="line"> *&#x2F;</span><br><span class="line">function resolveMayJunPromise(promise2, x, resolve, reject)&#123;</span><br><span class="line">  &#x2F;&#x2F; [2.3.1] promise 和 x 不能指向同一对象，以 TypeError 为据因拒绝执行 promise，例如：</span><br><span class="line">  &#x2F;&#x2F; let p &#x3D; new MayJunPromise(resolve &#x3D;&gt; resolve(1))</span><br><span class="line">  &#x2F;&#x2F; let p2 &#x3D; p.then(() &#x3D;&gt; p2); &#x2F;&#x2F; 如果不做判断，这样将会陷入死循环</span><br><span class="line">  if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class="line">    return reject(new TypeError(&#39;Chaining cycle detected for promise&#39;));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; [2.3.2] 判断 x 是一个 Promise 实例，可以能使来自系统的 Promise 实例，要兼容，例如：</span><br><span class="line">  &#x2F;&#x2F; new MayJunPromise(resolve &#x3D;&gt; resolve(1))</span><br><span class="line">  &#x2F;&#x2F;        .then(() &#x3D;&gt; new Promise( resolve &#x3D;&gt; resolve(2)))</span><br><span class="line">  &#x2F;&#x2F; 这一块发现也无需，因为 [2.3.3] 已经包含了</span><br><span class="line">  &#x2F;&#x2F; if (x instanceof Promise) &#123;</span><br><span class="line">  &#x2F;&#x2F;     &#x2F;&#x2F; [2.3.2.1] 如果 x 是 pending 状态，那么保留它（递归执行这个 resolveMayJunPromise 处理程序）</span><br><span class="line">  &#x2F;&#x2F;     &#x2F;&#x2F; 直到 pending 状态转为 fulfilled 或 rejected 状态</span><br><span class="line">  &#x2F;&#x2F;     if (x.status &#x3D;&#x3D;&#x3D; &#39;pending&#39;) &#123;</span><br><span class="line">  &#x2F;&#x2F;         x.then(y &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;             resolveMayJunPromise(promise2, y, resolve, reject);</span><br><span class="line">  &#x2F;&#x2F;         &#125;, reject)</span><br><span class="line">  &#x2F;&#x2F;     &#125; else if (x.status &#x3D;&#x3D;&#x3D; &#39;fulfilled&#39;) &#123; &#x2F;&#x2F; [2.3.2.2] 如果 x 处于执行态，resolve 它</span><br><span class="line">  &#x2F;&#x2F;         x.then(resolve); </span><br><span class="line">  &#x2F;&#x2F;     &#125; else if (x.status &#x3D;&#x3D;&#x3D; &#39;rejected&#39;) &#123; &#x2F;&#x2F; [2.3.2.3] 如果 x 处于拒绝态，reject 它</span><br><span class="line">  &#x2F;&#x2F;         x.then(reject);</span><br><span class="line">  &#x2F;&#x2F;     &#125;</span><br><span class="line">  &#x2F;&#x2F;     return;</span><br><span class="line">  &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; [2.3.3] x 为对象或函数，这里可以兼容系统的 Promise</span><br><span class="line">  &#x2F;&#x2F; new MayJunPromise(resolve &#x3D;&gt; resolve(1))</span><br><span class="line">  &#x2F;&#x2F;        .then(() &#x3D;&gt; new Promise( resolve &#x3D;&gt; resolve(2)))</span><br><span class="line">  if (x !&#x3D; null &amp;&amp; (x instanceof Promise || typeof x &#x3D;&#x3D;&#x3D; &#39;object&#39; || typeof x &#x3D;&#x3D;&#x3D; &#39;function&#39;)) &#123;</span><br><span class="line">    let called &#x3D; false;</span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; [2.3.3.1] 把 x.then 赋值给 then</span><br><span class="line">      &#x2F;&#x2F; 存储了一个指向 x.then 的引用，以避免多次访问 x.then 属性，这种预防措施确保了该属性的一致性，因为其值可能在检索调用时被改变。</span><br><span class="line">      const then &#x3D; x.then;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; [2.3.3.3] 如果 then 是函数（默认为是一个 promise），将 x 作为函数的作用域 this 调用之。</span><br><span class="line">      &#x2F;&#x2F; 传递两个回调函数作为参数，第一个参数叫做 resolvePromise (成功回调) ，第二个参数叫做 rejectPromise（失败回调）</span><br><span class="line">      if (typeof then &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; then.call(x, resolvePromise, rejectPromise) 等价于 x.then(resolvePromise, rejectPromise)，笔者理解此时会调用到 x 即 MayJunPromise 我们自己封装的 then 方法上</span><br><span class="line">        then.call(x, y &#x3D;&gt; &#123; &#x2F;&#x2F; [2.3.3.3.1] 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span><br><span class="line">            if (called) return;</span><br><span class="line">            called &#x3D; true;</span><br><span class="line">            resolveMayJunPromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, e &#x3D;&gt; &#123; &#x2F;&#x2F; [2.3.3.3.2] 如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span><br><span class="line">          if (called) return;</span><br><span class="line">          called &#x3D; true;</span><br><span class="line"></span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; [2.3.3.4 ] 如果 then 不是函数，以 x 为参数执行 promise</span><br><span class="line">        resolve(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch(e) &#123; &#x2F;&#x2F; [2.3.3.2] 如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span><br><span class="line">      if (called) return;</span><br><span class="line">      called &#x3D; true;</span><br><span class="line"></span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>验证你的 Promise 是否正确<br>Promise 提供了一个测试脚本，进行正确性验证。</li></ol><p>同时需要暴露出一个 deferred 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MayJunPromise.defer &#x3D; MayJunPromise.deferred &#x3D; function () &#123;</span><br><span class="line">  let dfd &#x3D; &#123;&#125;</span><br><span class="line">  dfd.promise &#x3D; new MayJunPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">    dfd.resolve &#x3D; resolve;</span><br><span class="line">    dfd.reject &#x3D; reject;</span><br><span class="line">  &#125;);</span><br><span class="line">  return dfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; MayJunPromise;</span><br></pre></td></tr></table></figure><ol start="5"><li>catch、resolve、reject、all、race 方法实现<br>Promise/A+ 规范中只提供了 then 方法，但是我们使用的 catch、Promise.all、Promise.race 等都可以在 then 方法的基础上进行实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class MayJunPromise &#123;</span><br><span class="line">   constructor(fn)&#123;...&#125;</span><br><span class="line">  then()&#123;...&#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 捕获错误</span><br><span class="line">   * @param &#123; Function &#125; onRejected </span><br><span class="line">   *&#x2F;</span><br><span class="line">  catch(onRejected) &#123;</span><br><span class="line">    return this.then(undefined, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 仅返回成功态，即 status &#x3D; fulfilled</span><br><span class="line"> *&#x2F;</span><br><span class="line">MayJunPromise.resolve &#x3D; function(value) &#123;</span><br><span class="line">  return (value instanceof Promise || value instanceof MayJunPromise) ? value &#x2F;&#x2F; 如果是 Promise 实例直接返回</span><br><span class="line">    : new MayJunPromise(resolve &#x3D;&gt; resolve(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 仅返回失败态，即 status &#x3D; rejected</span><br><span class="line"> *&#x2F;</span><br><span class="line">MayJunPromise.reject &#x3D; function(value) &#123;</span><br><span class="line">  return (value instanceof Promise || value instanceof MayJunPromise) ? value : new MayJunPromise(reject &#x3D;&gt; reject(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * MayJunPromise.all() 并行执行</span><br><span class="line"> * @param &#123; Array &#125; arr</span><br><span class="line"> * @returns &#123; Array &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">MayJunPromise.all &#x3D; function(arr) &#123;</span><br><span class="line">  return new MayJunPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const length &#x3D; arr.length;</span><br><span class="line">    let results &#x3D; []; &#x2F;&#x2F; 保存执行结果</span><br><span class="line">    let count &#x3D; 0; &#x2F;&#x2F; 计数器</span><br><span class="line"></span><br><span class="line">    for (let i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class="line">      MayJunPromise.resolve(arr[i]).then(res &#x3D;&gt; &#123;</span><br><span class="line">        results[i] &#x3D; res;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        if (count &#x3D;&#x3D;&#x3D; length) &#123; &#x2F;&#x2F; 全部都变为 fulfilled 之后结束</span><br><span class="line">          resolve(results);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, err &#x3D;&gt; reject(err)); &#x2F;&#x2F; 只要有一个失败，就将失败结果返回</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * MayJunPromise.race() 率先执行，只要一个执行完毕就返回结果;</span><br><span class="line"> *&#x2F;</span><br><span class="line">MayJunPromise.race &#x3D; function(arr) &#123;</span><br><span class="line">  return new MayJunPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    for (let i&#x3D;0; i&lt;arr.length; i++) &#123;</span><br><span class="line">      MayJunPromise.resolve(arr[i])</span><br><span class="line">        .then(result &#x3D;&gt; resolve(result), err &#x3D;&gt; reject(err));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>并发请求控制<br>Promise.all 同时将请求发出，假设我现在有上万条请求，势必会造成服务器的压力，如果我想限制在最大并发 100 该怎么做？例如，在 Chrome 浏览器中就有这样的限制，Chrome 中每次最大并发链接为 6 个，其余的链接需要等待其中任一个完成，才能得到执行，下面定义 allByLimit 方法实现类似功能。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 并发请求限制</span><br><span class="line"> * @param &#123; Array &#125; arr 并发请求的数组</span><br><span class="line"> * @param &#123; Number &#125; limit 并发限制数</span><br><span class="line"> *&#x2F;</span><br><span class="line">MayJunPromise.allByLimit &#x3D; function(arr, limit) &#123;</span><br><span class="line">  const length &#x3D; arr.length;</span><br><span class="line">  const requestQueue &#x3D; [];</span><br><span class="line">  const results &#x3D; [];</span><br><span class="line">  let index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  return new MayJunPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const requestHandler &#x3D; function() &#123;    </span><br><span class="line">      console.log(&#39;Request start &#39;, index);</span><br><span class="line">      const request &#x3D; arr[index].then(res &#x3D;&gt; res, err &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;Error&#39;, err);</span><br><span class="line"></span><br><span class="line">        return err;</span><br><span class="line">      &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;Number of concurrent requests&#39;, requestQueue.length)</span><br><span class="line">        const count &#x3D; results.push(res); &#x2F;&#x2F; 保存所有的结果</span><br><span class="line"></span><br><span class="line">        requestQueue.shift(); &#x2F;&#x2F; 每完成一个就从请求队列里剔除一个</span><br><span class="line"></span><br><span class="line">        if (count &#x3D;&#x3D;&#x3D; length) &#123; &#x2F;&#x2F; 所有请求结束，返回结果</span><br><span class="line">          resolve(results);</span><br><span class="line">        &#125; else if (count &lt; length &amp;&amp; index &lt; length - 1) &#123;</span><br><span class="line">          ++index;</span><br><span class="line">          requestHandler(); &#x2F;&#x2F; 继续下一个请求</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      if (requestQueue.push(request) &lt; limit) &#123;</span><br><span class="line">        ++index;</span><br><span class="line">        requestHandler();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    requestHandler()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试，定义一个 sleep 睡眠函数，模拟延迟执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 睡眠函数</span><br><span class="line"> * @param &#123; Number &#125; ms 延迟时间|毫秒</span><br><span class="line"> * @param &#123; Boolean &#125; flag 默认 false，若为 true 返回 reject 测试失败情况</span><br><span class="line"> *&#x2F;</span><br><span class="line">const sleep &#x3D; (ms&#x3D;0, flag&#x3D;false) &#x3D;&gt; new Promise((resolve, reject) &#x3D;&gt; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">  if (flag) &#123;</span><br><span class="line">    reject(&#39;Reject &#39; + ms);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    resolve(ms);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, ms));</span><br><span class="line"></span><br><span class="line">MayJunPromise.allByLimit([</span><br><span class="line">  sleep(1000),</span><br><span class="line">  sleep(1000),</span><br><span class="line">  sleep(1000),</span><br><span class="line">  sleep(5000, true),</span><br><span class="line">  sleep(10000),</span><br><span class="line">], 3).then(res &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下为运行结果</span><br><span class="line"></span><br><span class="line">Request start  0</span><br><span class="line">Request start  1</span><br><span class="line">Request start  2</span><br><span class="line">Number of concurrent requests 3</span><br><span class="line">Request start  3</span><br><span class="line">Number of concurrent requests 3</span><br><span class="line">Request start  4</span><br><span class="line">Number of concurrent requests 3</span><br><span class="line">Error Reject 5000</span><br><span class="line">Number of concurrent requests 2</span><br><span class="line">Number of concurrent requests 1</span><br><span class="line">[ 1000, 1000, 1000, &#39;Reject 5000&#39;, 10000 ]</span><br></pre></td></tr></table></figure></li><li>Promise reference</li></ol><ul><li><a href="https://zhuanlan.zhihu.com/p/21834559">https://zhuanlan.zhihu.com/p/21834559</a></li><li><a href="https://juejin.im/post/5b2f02cd5188252b937548ab">https://juejin.im/post/5b2f02cd5188252b937548ab</a></li><li><a href="https://promisesaplus.com/">https://promisesaplus.com/</a></li><li><a href="https://www.ituring.com.cn/article/66566">https://www.ituring.com.cn/article/66566</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在JavaScript的世界中，所有代码都是单线程执行的。为了使程序不阻塞</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Set、Map</title>
    <link href="http://example.com/2021/03/06/nodejs/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/03/06/nodejs/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-06T15:54:30.000Z</published>
    <updated>2021-03-06T16:05:58.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构Set、Map"><a href="#数据结构Set、Map" class="headerlink" title="数据结构Set、Map"></a>数据结构Set、Map</h3><blockquote><p>在整个的数据开发过程中，涉及到数据结构，能用Map就不使用数组，尤其是复杂的数据结构。如果对要求存储的数据有唯一性要求，推荐使用Set。</p></blockquote><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote><p>类似于数组，但它的一大特性就是集合中的所有元素都是唯一，没有重复。</p></blockquote><ul><li>方法介绍</li></ul><ul><li>add：添加一个元素</li><li>delete：删除一个元素</li><li>clear：清空所有元素</li><li>has：查看集合中是否包含指定元素</li><li>size：相当于数组中的length<h3 id="weakset"><a href="#weakset" class="headerlink" title="weakset"></a>weakset</h3><blockquote><p>weakset的元素只能是对象，WeakSet中的对象是弱引用，只是把地址拿过来，没有clear属性，不能遍历</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let weakList&#x3D;new WeakSet();</span><br><span class="line">  let arg&#x3D;&#123;a:&#39;1&#39;&#125;;</span><br><span class="line">  weakList.add(arg);</span><br><span class="line">  weakList.add(&#123;b:&#39;2&#39;&#125;);</span><br><span class="line">  console.log(&#39;weakList&#39;,weakList);</span><br><span class="line">  &#x2F;&#x2F;weakList WeakSet &#123;Object &#123;b: &quot;2&quot;&#125;, Object &#123;a: &quot;1&quot;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>Map中的key可以是任意数据类型：字符串、数组、对象等 要注意集合Set添加元素用add()，而集合Map添加元素用set()</p></blockquote><h3 id="weakmap"><a href="#weakmap" class="headerlink" title="weakmap"></a>weakmap</h3><blockquote><p>同WeakSet一样接收的key值必须是对象，没有size属性，clear方法，也是不能遍历</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let weakmap&#x3D;new WeakMap();</span><br><span class="line">  let o&#x3D;&#123;&#125;;</span><br><span class="line">  weakmap.set(o,123);</span><br><span class="line">  console.log(weakmap.get(o)); &#x2F;&#x2F;123</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map与array对比"><a href="#map与array对比" class="headerlink" title="map与array对比"></a>map与array对比</h3><blockquote><p>Map与Array横向对比增、查、改、删</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let map&#x3D;new Map();</span><br><span class="line">let array&#x3D;[];</span><br></pre></td></tr></table></figure></li></ul><ul><li>增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.set(&#39;t&#39;,1);</span><br><span class="line">array.push(&#123;t:1&#125;);</span><br><span class="line"></span><br><span class="line">console.info(&#39;map-array&#39;,map,array); &#x2F;&#x2F; map-array Map &#123;&quot;t&quot; &#x3D;&gt; 1&#125; [Object]</span><br></pre></td></tr></table></figure></li><li>查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let map_exist&#x3D;map.has(&#39;t&#39;);</span><br><span class="line">let array_exist&#x3D;array.find(item&#x3D;&gt;item.a);</span><br><span class="line"></span><br><span class="line">console.info(&#39;map-array&#39;,map_exist,!!array_exist); &#x2F;&#x2F; map-array true false</span><br></pre></td></tr></table></figure></li><li>改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.set(&#39;t&#39;,2);</span><br><span class="line">array.forEach(item&#x3D;&gt;item.t?item.t&#x3D;2:&#39;&#39;);</span><br><span class="line"></span><br><span class="line">console.info(&#39;map-array-modify&#39;,map,array); &#x2F;&#x2F; map-array-modify Map &#123;&quot;t&quot; &#x3D;&gt; 2&#125; [Object]</span><br></pre></td></tr></table></figure></li><li>删<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map.delete(&#39;t&#39;);</span><br><span class="line">let index&#x3D;array.findIndex(item&#x3D;&gt;item.t);</span><br><span class="line">array.splice(index,1);</span><br><span class="line"></span><br><span class="line">console.info(&#39;map-array-empty&#39;,map,array); &#x2F;&#x2F; map-array-empty Map &#123;&#125; []</span><br></pre></td></tr></table></figure><h3 id="set与array"><a href="#set与array" class="headerlink" title="set与array"></a>set与array</h3><blockquote><p>Set与Array增、查、改、删对比</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let set&#x3D;new Set();</span><br><span class="line">let array&#x3D;[];</span><br></pre></td></tr></table></figure></li><li>增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.add(&#123;t:1&#125;);</span><br><span class="line">array.push(&#123;t:1&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; set-array Set &#123;Object &#123;t: 1&#125;&#125; [Object]</span><br><span class="line">console.info(&#39;set-array&#39;,set,array);</span><br></pre></td></tr></table></figure></li><li>查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let set_exist&#x3D;set.has(&#123;t:1&#125;); &#x2F;&#x2F; 没有对象引用，将一直为false</span><br><span class="line">let array_exist&#x3D;array.find(item&#x3D;&gt;item.t);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; set-array false Object &#123;t: 1&#125;</span><br><span class="line">console.info(&#39;set-array&#39;,set_exist,array_exist);</span><br></pre></td></tr></table></figure></li><li>改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.forEach(item&#x3D;&gt;item.t?item.t&#x3D;2:&#39;&#39;);</span><br><span class="line">array.forEach(item&#x3D;&gt;item.t?item.t&#x3D;2:&#39;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; set-array-modify Set &#123;Object &#123;t: 2&#125;&#125; [Object]</span><br><span class="line">console.info(&#39;set-array-modify&#39;,set,array);</span><br></pre></td></tr></table></figure></li><li>删<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set.forEach(item&#x3D;&gt;item.t?set.delete(item):&#39;&#39;);</span><br><span class="line">let index&#x3D;array.findIndex(item&#x3D;&gt;item.t);</span><br><span class="line">array.splice(index,1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; set-array-empty Set &#123;&#125; []</span><br><span class="line">console.info(&#39;set-array-empty&#39;,set,array);</span><br></pre></td></tr></table></figure><h3 id="集合map集合set对象三者对比"><a href="#集合map集合set对象三者对比" class="headerlink" title="集合map集合set对象三者对比"></a>集合map集合set对象三者对比</h3><blockquote><p>Map、Set、Object三者增、查、改、删对比</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let item&#x3D;&#123;t:1&#125;;</span><br><span class="line">let map&#x3D;new Map();</span><br><span class="line">let set&#x3D;new Set();</span><br><span class="line">let obj&#x3D;&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li>增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.set(&#39;t&#39;,1);</span><br><span class="line">set.add(item);</span><br><span class="line">obj[&#39;t&#39;]&#x3D;1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; map-set-obj Object &#123;t: 1&#125; Map &#123;&quot;t&quot; &#x3D;&gt; 1&#125; Set &#123;Object &#123;t: 1&#125;&#125;</span><br><span class="line">console.info(&#39;map-set-obj&#39;,obj,map,set);</span><br></pre></td></tr></table></figure></li><li>查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Object &#123;map_exist: true, set_exist: true, obj_exist: true&#125;</span><br><span class="line">console.info(&#123;</span><br><span class="line">    map_exist:map.has(&#39;t&#39;),</span><br><span class="line">    set_exist:set.has(item),</span><br><span class="line">    obj_exist:&#39;t&#39; in obj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.set(&#39;t&#39;,2);</span><br><span class="line">item.t&#x3D;2;</span><br><span class="line">obj[&#39;t&#39;]&#x3D;2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; map-set-obj-modify Object &#123;t: 2&#125; Map &#123;&quot;t&quot; &#x3D;&gt; 2&#125; Set &#123;Object &#123;t: 2&#125;&#125;</span><br><span class="line">console.info(&#39;map-set-obj-modify&#39;,obj,map,set);</span><br></pre></td></tr></table></figure></li><li>删<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.delete(&#39;t&#39;);</span><br><span class="line">set.delete(item);</span><br><span class="line">delete obj[&#39;t&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; map-set-obj-empty Object &#123;&#125; Map &#123;&#125; Set &#123;&#125;</span><br><span class="line">console.info(&#39;map-set-obj-empty&#39;,obj,map,set);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据结构Set、Map&quot;&gt;&lt;a href=&quot;#数据结构Set、Map&quot; class=&quot;headerlink&quot; title=&quot;数据结构Set、Map&quot;&gt;&lt;/a&gt;数据结构Set、Map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在整个的数据开发过程中，涉及到数据结构，能</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 浮点数之迷 大数运算</title>
    <link href="http://example.com/2021/03/06/nodejs/JavaScript_%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B9%8B%E8%BF%B7(2)/"/>
    <id>http://example.com/2021/03/06/nodejs/JavaScript_%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B9%8B%E8%BF%B7(2)/</id>
    <published>2021-03-06T10:30:48.000Z</published>
    <updated>2021-03-06T11:00:50.731Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中浮点数运算时经常出现 0.1+0.2=0.30000000000000004 这样的问题，除了这个问题之外还有一个不容忽视的大数危机（大数处理丢失精度问题），也是近期遇到的一些问题，做下梳理同时理解下背后产生的原因和解决方案。</p><h3 id="JavaScript-最大安全整数"><a href="#JavaScript-最大安全整数" class="headerlink" title="JavaScript 最大安全整数"></a>JavaScript 最大安全整数</h3><p>IEEE 754 双精确度浮点数（Double 64 Bits）中尾数部分是用来存储整数的有效位数，为 52 位，加上省略的一位 1 可以保存的实际数值为 $[-(2^{53}-1), 2^{53}]$。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 53) &#x2F;&#x2F; 9007199254740992</span><br><span class="line"></span><br><span class="line">Number.MAX_SAFE_INTEGER &#x2F;&#x2F; 最大安全整数 9007199254740991 </span><br><span class="line">Number.MIN_SAFE_INTEGER &#x2F;&#x2F; 最小安全整数 -9007199254740991 </span><br></pre></td></tr></table></figure><p>只要不超过 JavaScript 中最大安全整数和最小安全整数范围都是安全的。</p><ul><li>大数处理精度丢失问题复现</li></ul><ul><li>例一<br>当你在 Chrome 的控制台或者 Node.js 运行环境里执行以下代码后会出现以下结果，What？为什么我定义的 200000436035958034 却被转义为了 200000436035958050，在了解了 JavaScript 浮点数存储原理之后，应该明白此时已经触发了 JavaScript 的最大安全整数范围。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const num &#x3D; 200000436035958034;</span><br><span class="line">console.log(num); &#x2F;&#x2F; 200000436035958050</span><br></pre></td></tr></table></figure></li><li>例二<br>以下示例通过流读取传递的数据，保存在一个字符串 data 中，因为传递的是一个 application/json 协议的数据，我们需要对 data 反序列化为一个 obj 做业务处理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class="line">    if (req.method &#x3D;&#x3D;&#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">        let data &#x3D; &#39;&#39;;</span><br><span class="line">        req.on(&#39;data&#39;, chunk &#x3D;&gt; &#123;</span><br><span class="line">            data +&#x3D; chunk;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        req.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;未 JSON 反序列化情况：&#39;, data);</span><br><span class="line">            </span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 反序列化为 obj 对象，用来处理业务</span><br><span class="line">                const obj &#x3D; JSON.parse(data);</span><br><span class="line">                console.log(&#39;经过 JSON 反序列化之后：&#39;, obj);</span><br><span class="line"></span><br><span class="line">                res.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125; catch(e) &#123;</span><br><span class="line">                console.error(e);</span><br><span class="line"></span><br><span class="line">                res.statusCode &#x3D; 400;</span><br><span class="line">                res.end(&quot;Invalid JSON&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.end(&#39;OK&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure>运行上述程序之后在 POSTMAN 调用，200000436035958034 这个是一个大数值。<br><img src="https://www.nodejs.red/javascript/img/20200110_001.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">未 JSON 反序列化情况： &#123;</span><br><span class="line">        &quot;id&quot;: 200000436035958034</span><br><span class="line">&#125;</span><br><span class="line">经过 JSON 反序列化之后： &#123; id: 200000436035958050 &#125;</span><br></pre></td></tr></table></figure>这个问题也实际遇到过，发生的方式是调用第三方接口拿到的是一个大数值的参数，结果 JSON 之后就出现了类似问题，下面做下分析。</li></ul><h3 id="JSON-序列化对大数值解析有什么猫腻？"><a href="#JSON-序列化对大数值解析有什么猫腻？" class="headerlink" title="JSON 序列化对大数值解析有什么猫腻？"></a>JSON 序列化对大数值解析有什么猫腻？</h3><p>先了解下 JSON 的数据格式标准，Internet Engineering Task Force 7159，简称（IETF 7159），是一种轻量级的、基于文本与语言无关的数据交互格式，源自 ECMAScript 编程语言标准.<br><a href="https://www.rfc-editor.org/rfc/rfc7159.txt">https://www.rfc-editor.org/rfc/rfc7159.txt</a> 访问这个地址查看协议的相关内容。<br>我们本节需要关注的是 <code>“一个 JSON 的 Value 是什么呢？”</code> 上述协议中有规定必须为 <strong>object, array, number, or string</strong> 四个数据类型，也可以是 <strong>false, null, true</strong> 这三个值。</p><p>到此，也就揭开了这个谜底，JSON 在解析时对于其它类型的编码都会被默认转换掉。对应我们这个例子中的大数值会默认编码为 number 类型，这也是造成精度丢失的真正原因。</p><h3 id="大数运算的解决方案"><a href="#大数运算的解决方案" class="headerlink" title="大数运算的解决方案"></a>大数运算的解决方案</h3><ol><li>常用方法转字符串<br>在前后端交互中这是通常的一种方案，例如，对订单号的存储采用数值类型 Java 中的 long 类型表示的最大值为 2 的 64 次方，而 JS 中为 Number.MAX_SAFE_INTEGER (Math.pow(2, 53) - 1)，显然超过 JS 中能表示的最大安全值之外就要丢失精度了，最好的解法就是将订单号由数值型转为字符串返回给前端处理，这是再和一个供应商对接过程中实实在在遇到的一个坑。</li><li>新的希望 BigInt<br>Bigint 是 JavaScript 中一个新的数据类型，可以用来操作超出 Number 最大安全范围的整数。</li></ol><ul><li>创建 BigInt 方法一<br>一种方法是在数字后面加上数字 n<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200000436035958034n; &#x2F;&#x2F; 200000436035958034n</span><br></pre></td></tr></table></figure></li><li>创建 BigInt 方法二<br>另一种方法是使用构造函数 BigInt()，还需要注意的是使用 BigInt 时最好还是使用字符串，否则还是会出现精度问题，看官方文档也提到了这块 github.com/tc39/proposal-bigint#gotchas–exceptions 称为疑难杂症<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigInt(&#39;200000436035958034&#39;) &#x2F;&#x2F; 200000436035958034n</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意要使用字符串否则还是会被转义</span><br><span class="line">BigInt(200000436035958034) &#x2F;&#x2F; 200000436035958048n 这不是一个正确的结果</span><br></pre></td></tr></table></figure></li><li>检测类型<br>BigInt 是一个新的数据类型，因此它与 Number 并不是完全相等的，例如 1n 将不会全等于 1。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof 200000436035958034n &#x2F;&#x2F; bigint</span><br><span class="line"></span><br><span class="line">1n &#x3D;&#x3D;&#x3D; 1 &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure></li><li>运算<br>BitInt 支持常见的运算符，但是永远不要与 Number 混合使用，请始终保持一致。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">200000436035958034n + 1n &#x2F;&#x2F; 200000436035958035n</span><br><span class="line">&#x2F;&#x2F; 错误</span><br><span class="line">200000436035958034n + 1</span><br><span class="line">                                ^</span><br><span class="line">TypeError: Cannot mix BigInt and other types, use explicit conversions</span><br></pre></td></tr></table></figure></li><li>BigInt 转为字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String(200000436035958034n) &#x2F;&#x2F; 200000436035958034</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 或者以下方式</span><br><span class="line">(200000436035958034n).toString() &#x2F;&#x2F; 200000436035958034</span><br></pre></td></tr></table></figure></li><li>与 JSON 的冲突<br>使用 JSON.parse(‘{“id”: 200000436035958034}’) 来解析会造成精度丢失问题，既然现在有了一个 BigInt 出现，是否使用以下方式就可以正常解析呢？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(&#39;&#123;&quot;id&quot;: 200000436035958034n&#125;&#39;);</span><br></pre></td></tr></table></figure>运行以上程序之后，会得到一个 <code>SyntaxError: Unexpected token n in JSON at position 25</code> 错误，最麻烦的就在这里，因为 JSON 是一个更为广泛的数据协议类型，影响面非常广泛，不是轻易能够变动的。<br>在 TC39 proposal-bigint 仓库中也有人提过这个问题 github.comtc39/proposal-bigint/issues/24 截至目前，该提案并未被添加到 JSON 中，因为这将破坏 JSON 的格式，很可能导致无法解析。</li><li>BigInt 的支持<br>BigInt 提案目前已进入 Stage 4，已经在 Chrome，Node，Firefox，Babel 中发布，在 Node.js 中支持的版本为 12+。</li><li>BigInt 总结<br>我们使用 BigInt 做一些运算是没有问题的，但是和第三方接口交互，如果对 JSON 字符串做序列化遇到一些大数问题还是会出现精度丢失，显然这是由于与 JSON 的冲突导致的，下面给出第三种方案。</li></ul><ol start="3"><li>第三方库<br>通过一些第三方库也可以解决，但是你可能会想为什么要这么曲折呢？转成字符串大家不都开开心心的吗，但是呢，有的时候你需要对接第三方接口，取到的数据就包含这种大数的情况，且遇到那种拒不改的，业务总归要完成吧！这里介绍第三种实现方案。<br>还拿我们上面<strong>大数处理精度丢失问题复现</strong>的第二个例子进行讲解，通过 <code>json-bigint</code> 这个库来解决。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">const JSONbig &#x3D; require(&#39;json-bigint&#39;)(&#123; &#39;storeAsString&#39;: true&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class="line">    if (req.method &#x3D;&#x3D;&#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">        let data &#x3D; &#39;&#39;;</span><br><span class="line">        req.on(&#39;data&#39;, chunk &#x3D;&gt; &#123;</span><br><span class="line">            data +&#x3D; chunk;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        req.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 使用第三方库进行 JSON 序列化</span><br><span class="line">                const obj &#x3D; JSONbig.parse(data)</span><br><span class="line">                console.log(&#39;经过 JSON 反序列化之后：&#39;, obj);</span><br><span class="line"></span><br><span class="line">                res.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125; catch(e) &#123;</span><br><span class="line">                console.error(e);</span><br><span class="line"></span><br><span class="line">                res.statusCode &#x3D; 400;</span><br><span class="line">                res.end(&quot;Invalid JSON&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.end(&#39;OK&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure>再次验证会看到以下结果，这次是正确的，问题也已经完美解决了！<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON 反序列化之后 id 值： &#123; id: &#39;200000436035958034&#39; &#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>本文提出了一些产生大数精度丢失的原因，同时又给出了几种解决方案，如遇到类似问题，都可参考。还是建议大家在系统设计时去遵循双精度浮点数的规范来做，在查找问题的过程中，有看到有些使用正则来匹配，个人角度还是不推荐的，一是正则本身就是一个耗时的操作，二操作起来还要查找一些匹配规律，一不小心可能会把返回结果中的所有数值都转为字符串，也是不可行的。<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3>[v8.dev/features/bigint github.com/tc39/proposal-bigint en.wikipedia.org/wiki/Double-precision_floating-point_format](v8.dev/features/bigint github.com/tc39/proposal-bigint en.wikipedia.org/wiki/Double-precision_floating-point_format)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 JavaScript 中浮点数运算时经常出现 0.1+0.2=0.30000000000000004 这样的问题，除了这个问题之外还有一个不容忽视的大数危机（大数处理丢失精度问题），也是近期遇到的一些问题，做下梳理同时理解下背后产生的原因和解决方案。&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 浮点数之迷 0.1 + 0.2 为什么不等于 0.3？</title>
    <link href="http://example.com/2021/03/06/nodejs/JavaScript_%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B9%8B%E8%BF%B7(1)/"/>
    <id>http://example.com/2021/03/06/nodejs/JavaScript_%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B9%8B%E8%BF%B7(1)/</id>
    <published>2021-03-06T08:13:52.000Z</published>
    <updated>2021-03-06T10:31:15.010Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/EnXEdK8F8GWpKbeGOUGqqQ">https://mp.weixin.qq.com/s/EnXEdK8F8GWpKbeGOUGqqQ</a>整理</p><h3 id="先修知识"><a href="#先修知识" class="headerlink" title="先修知识"></a>先修知识</h3><p>以下是一些基础的，可能被你所忽略的知识，了解它很有用，因为这些基础知识在我们的下文讲解中都会应用到，如果你已掌握了它，可以跳过本节。</p><ol><li>计算机的内部是如何存储的？一个浮点数 float a = 1 会存储成 1.0 吗？<br>计算机内部都是采用二进制进行表示，即 0 1 编码组成。在计算机中是没有 1.0 的，它只认 0 1 编码。</li><li>1bit 可以存储多少个整数？8bit 可以存储多少个整数？<br>N 个 bit 可以存储的整数是 2 的 N 次方个。8bit 为 2 的 8 次方（$2^{8}=256$）。</li><li>了解下科学计数法，下文讲解会用到<br>在日常生活中遇到一个比较的大的数字，例如全国总人口数、每秒光速等，在物理上用这些大数表达很不方便，通常可以采用科学计数法表达。</li></ol><p><strong>以下为 10 进制科学计数法表达式，底数为 10 ，其中 1≤|a|&lt;10，n 为整数</strong><br>$$ a*10^n $$<br>例如，0.1 的科学计数法表示为 $0.1 = 1 * 10^{-1}$。（一个数的 -1 次方等于该数的倒数，例如 $10^{-1}$ = $\frac{10}{1}$）<br>在 IEEE 754 标准中也类似，只不过它是以一个二进制数来表示，底数为 2，以下为 0.1 的二进制表达式：<br>$$ 1.10011001100110011(0011 无限循环) * 2^{-4} $$<br>4. 十进制小数如何转二进制？<br>十进制小数转二进制，小数部分，乘 2 取整数，若乘之后的小数部分不为 0，继续乘以 2 直到小数部分为 0 ，将取出的整数正向排序。<br>例如： 0.1 转二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0.1 * 2 &#x3D; 0.2 --------------- 取整数 0，小数 0.2</span><br><span class="line">0.2 * 2 &#x3D; 0.4 --------------- 取整数 0，小数 0.4</span><br><span class="line">0.4 * 2 &#x3D; 0.8 --------------- 取整数 0，小数 0.8</span><br><span class="line">0.8 * 2 &#x3D; 1.6 --------------- 取整数 1，小数 0.6</span><br><span class="line">0.6 * 2 &#x3D; 1.2 --------------- 取整数 1，小数 0.2</span><br><span class="line">0.2 * 2 &#x3D; 0.4 --------------- 取整数 0，小数 0.4</span><br><span class="line">0.4 * 2 &#x3D; 0.8 --------------- 取整数 0，小数 0.8</span><br><span class="line">0.8 * 2 &#x3D; 1.6 --------------- 取整数 1，小数 0.6</span><br><span class="line">0.6 * 2 &#x3D; 1.2 --------------- 取整数 1，小数 0.2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最终 0.1 的二进制表示为 0.00110011… 后面将会 0011 无限循环，因此二进制无法精确的保存类似 0.1 这样的小数。那这样无限循环也不是办法，又该保存多少位呢？也就有了我们接下来要重点讲解的 IEEE 754 标准。</p><h3 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h3><p><strong>IEEE 754 是 IEEE 二进制浮点数算术标准的简称</strong>，在这之前各家计算机公司的各型号计算机，有着千差万别的浮点数表示方式，这对数据交换、计算机协同工作造成了极大不便，该标准的出现则解决了这一乱象，目前已成为业界通用的浮点数运算标准。</p><h4 id="双精确度（64位）"><a href="#双精确度（64位）" class="headerlink" title="双精确度（64位）"></a>双精确度（64位）</h4><blockquote><p>这里重点讲解下双精确度（64位）（JS 中使用），单精确度（32 位）同理。<br>在 JavaScript 中不论小数还是整数只有一种数据类型表示，这就是 Number 类型，其遵循 IEEE 754 标准，使用双精度浮点数（double）64 位（8 字节）来存储一个浮点数（所以在 JS 中 1 === 1.0）。<code>其中能够真正决定数字精度的是尾部，即 $2^&#123;53-1&#125;$</code><br>64Bits 分为以下 3 个部分：</p></blockquote><ul><li>sign bit（S，符号）：用来表示正负号，0 为 正 1 为 负（1 bit）</li><li>exponent（E，指数）：用来表示次方数（11 bits）</li><li>mantissa（M，尾数）：用来表示精确度 1 &lt;= M &lt; 2（53 bits）<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/IEEE_754_Double_Floating_Point_Format.svg/1236px-IEEE_754_Double_Floating_Point_Format.svg.png" alt="RUNOOB 图标"></li></ul><p><strong>二进制数公式 V</strong><br>根据 IEEE 754 标准，任意二进制数 V 都可用如下公式表示：<br>$$ V = (-1)^s * M * 2^{E} $$<br><strong>符号 S</strong><br>符号位的作用是什么？你可能会有此疑惑，在计算机中一切万物都以二进制表示，那么二进制中又以 0 1 存储，你可能想用负号（-）表示负数，对不起这是不支持的，为了表示负数通常把最高位当作符号位来表示，这个符号位就表示了正负数，0 表示正数（+），1 表示负数（-）。</p><ol><li>计算机的世界中是否有减法？1 - 1 是如何实现的？</li><li>十进制数 1 的二进制为 0000 0001，-1 对应的二进制是什么？用 1000 0001 表示 -1 对吗？</li></ol><p><strong>尾数 M</strong><br>IEEE 754 规定，在计算机内部保存 M 时，默认这个数的第一位总是 1，因此可以被舍去，只保存后面部分，这样可以节省 1 位有效数字，对于双精度 64 位浮点数，M 为 52 位，将第一位的 1 舍去，可以保存的有效数字为 52 + 1 = 53 位。<br>在双精确度浮点数下二进制数公式 V 演变如下所示：<br>$$ V = (-1)^s * M + 1 * 2^{E} $$<br>指数 E<br>E 为一个无符号整数，在双精度浮点数中 E 为 11 位，取值范围为 $2^{11} = 2048$，即表示的范围为 0 ~ 2047。<br><code>中间值</code>： 由于科学计数法中的 E 是可以出现负数的，IEEE 754 标准规定<code>指数偏移值的固定值</code>为 $2^{e-1}-1$，以双精度浮点数为例：$2^{11-1}-1=1023$，这个固定值也可以理解为中间值。同理单精度浮点数为 $2^{8-1}-1=127$。<br><code>正负范围</code>: 双精确度 64 位中间值为 1023，负数为 [0, 1022] 正数为 [1024, 2047]。<br>双精确度浮点数下二进制数公式 V 最终演变如下所示：</p><p>$$ V = (-1)^s * M + 1 * 2^{E + 1023} $$</p><h4 id="0-1-在-IEEE-754-标准中是如何存储的？"><a href="#0-1-在-IEEE-754-标准中是如何存储的？" class="headerlink" title="0.1 在 IEEE 754 标准中是如何存储的？"></a>0.1 在 IEEE 754 标准中是如何存储的？</h4><ol><li>“0.1” 转为二进制<br>不知道怎么转换的，参考上面 先修知识 的 十进制小数转二进制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.000110011001100110011(0011) &#x2F;&#x2F; 0011 将会无限循环</span><br></pre></td></tr></table></figure></li><li>二进制浮点数的科学计数法表示<br>任何一个数都可以用科学计数法表示，0.1 的二进制科学计数法表示如下所示：<br>$$ 1.10011001100110011(0011 无限循环) * 2^{-4} $$<br>以上结果类似于十进制科学计数法表示：<br>$$ 0.0001234567 = 1.234567 * 10^{-4} $$</li><li>IEEE 754 存储</li></ol><ul><li>0.1 的二进制表示如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ 1.1001100110011001100110011001100110011001100110011001*2^&#123;-4&#125; $$</span><br></pre></td></tr></table></figure></li><li>符号位<br>由于 0.1 为整数，所以符号位 S = 0</li><li>指数位<br>E = -4，实际存储为 -4 + 1023 = 1019，二进制为 1111111011，E 为 11 位，最终为 01111111011</li><li>尾数位<br>在 IEEE 754 中，循环位就不能在无限循环下去了，在双精确度 64 位下最多存储的有效整数位数为 52 位，会采用 就近舍入（round to nearest）模式（进一舍零） 进行存储<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11001100110011001100110011001100110011001100110011001 &#x2F;&#x2F; M 舍去首位的 1，得到如下</span><br><span class="line">1001100110011001100110011001100110011001100110011001 &#x2F;&#x2F; 0 舍 1 入，得到如下</span><br><span class="line">1001100110011001100110011001100110011001100110011010 &#x2F;&#x2F; 最终存储</span><br></pre></td></tr></table></figure></li><li>最终存储结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0    01111111011    1001100110011001100110011001100110011001100110011010</span><br></pre></td></tr></table></figure><img src="https://www.nodejs.red/javascript/img/ieee754_double_64_bit_0.1_binary.png"><br><a href="binaryconvert.com/convert_double.html?decimal=048046049">binaryconvert.com/convert_double.html?decimal=048046049</a><h3 id="0-1-0-2-等于多少？"><a href="#0-1-0-2-等于多少？" class="headerlink" title="0.1 + 0.2 等于多少？"></a>0.1 + 0.2 等于多少？</h3>上面我们讲解了浮点数 0.1 采用 IEEE 754 标准的存储过程，0.2 也同理，可以自己推理下，0.1、0.2 对应的二进制分别如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S  E            M</span><br><span class="line">0  01111111011  1001100110011001100110011001100110011001100110011010 &#x2F;&#x2F; 0.1</span><br><span class="line">0  01111111100  1001100110011001100110011001100110011001100110011010 &#x2F;&#x2F; 0.2</span><br></pre></td></tr></table></figure><h4 id="浮点数运算三步骤"><a href="#浮点数运算三步骤" class="headerlink" title="浮点数运算三步骤"></a>浮点数运算三步骤</h4>对阶<br>求和<br>规格化<h4 id="对阶"><a href="#对阶" class="headerlink" title="对阶"></a>对阶</h4>浮点数加减首先要判断两数的<strong>指数位</strong>是否相同（小数点位置是否对齐），若两数指数位不同，需要对阶保证指数位相同。<br>对阶时遵守<strong>小阶向大阶看齐原则</strong>，尾数向右移位，每移动一位，指数位加 1 直到指数位相同，即完成对阶。<br>本示例，0.1 的阶码为 -4 小于 0.2 的阶码 -3，故对 0.1 做移码操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 0.1 移动之前</span><br><span class="line">0  01111111011  1001100110011001100110011001100110011001100110011010 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 0.1 右移 1 位之后尾数最高位空出一位，（0 舍 1 入，此处舍去末尾 0）</span><br><span class="line">0  01111111100   100110011001100110011001100110011001100110011001101(0) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 0.1 右移 1 位完成</span><br><span class="line">0  01111111100  1100110011001100110011001100110011001100110011001101</span><br></pre></td></tr></table></figure>尾数右移 1 位之后最高位空出来了，如何填补呢？涉及两个概念：</li></ul><ul><li>逻辑右移：最高位永远补 0</li><li>算术右移：不改变最高位值，是 1 补 1，是 0 补 0，尾数部分我们是有隐藏掉最高位是 1 的，不明白的再看看上面 3.3 尾数位 有讲解舍去 M 位 1。<h4 id="尾数求和"><a href="#尾数求和" class="headerlink" title="尾数求和"></a>尾数求和</h4>两个尾数直接求和<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  0  01111111100   1100110011001100110011001100110011001100110011001101 &#x2F;&#x2F; 0.1 </span><br><span class="line">+ 0  01111111100   1001100110011001100110011001100110011001100110011010 &#x2F;&#x2F; 0.2</span><br><span class="line">&#x3D; 0  01111111100 100110011001100110011001100110011001100110011001100111 &#x2F;&#x2F; 产生进位，待处理</span><br></pre></td></tr></table></figure>或者以下方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  0.1100110011001100110011001100110011001100110011001101</span><br><span class="line">+ 1.1001100110011001100110011001100110011001100110011010</span><br><span class="line"> 10.0110011001100110011001100110011001100110011001100111</span><br></pre></td></tr></table></figure><h4 id="规格化和舍入"><a href="#规格化和舍入" class="headerlink" title="规格化和舍入"></a>规格化和舍入</h4>由于产生进位，阶码需要 + 1，对应的十进制为 1021，此时阶码为 1021 - 1023（64 位中间值）= -2，此时符号位、指数位如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  S  E</span><br><span class="line">&#x3D; 0  01111111101</span><br></pre></td></tr></table></figure>尾部进位 2 位，去除最高位默认的 1，因最低位为 1 需进行舍入操作（在二进制中是以 0 结尾的），舍入的方法就是在最低有效位上加 1，若为 0 则直接舍去，若为 1 继续加 1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  100110011001100110011001100110011001100110011001100111 &#x2F;&#x2F; + 1</span><br><span class="line">&#x3D;  00110011001100110011001100110011001100110011001101000 &#x2F;&#x2F; 去除最高位默认的 1</span><br><span class="line">&#x3D;  00110011001100110011001100110011001100110011001101000 &#x2F;&#x2F; 最后一位 0 舍去</span><br><span class="line">&#x3D;  0011001100110011001100110011001100110011001100110100  &#x2F;&#x2F; 尾数最后结果  </span><br></pre></td></tr></table></figure>IEEE 754 中最终存储如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  01111111101 0011001100110011001100110011001100110011001100110100</span><br></pre></td></tr></table></figure>最高位为 1，得到的二进制数如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^-2 * 1.0011001100110011001100110011001100110011001100110100</span><br></pre></td></tr></table></figure>转换为十进制如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.30000000000000004</span><br></pre></td></tr></table></figure><h3 id="只有-JavaScript-中存在吗？"><a href="#只有-JavaScript-中存在吗？" class="headerlink" title="只有 JavaScript 中存在吗？"></a>只有 JavaScript 中存在吗？</h3>这显然不是的，这在大多数语言中基本上都会存在此问题（大都是基于 IEEE 754 标准），让我们看下 0.1 + 0.2 在一些常用语言中的运算结果。</li><li>JavaScript<br>推荐一个用于任意精度十进制和非十进制算术的 JavaScript 库 <a href="github.com/MikeMcl/bignumber.js">github.com/MikeMcl/bignumber.js</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(.1 + .2); &#x2F;&#x2F; 0.30000000000000004</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; bignumber.js 解决方案</span><br><span class="line">const BigNumber &#x3D; require(&#39;bignumber.js&#39;);</span><br><span class="line">const x &#x3D; new BigNumber(0.1);</span><br><span class="line">const y &#x3D; 0.2</span><br><span class="line"></span><br><span class="line">console.log(parseFloat(x.plus(y)));</span><br></pre></td></tr></table></figure></li><li>Python<br>Python2 的 print 语句会将 0.30000000000000004 转换为字符串并将其缩短为 “0.3”，可以使用 print(repr(.1 + .2)) 获取所需要的浮点数运算结果。这一问题在 Python3 中已修复。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Python2</span><br><span class="line">print(.1 + .2) # 0.3</span><br><span class="line">print(repr(.1 + .2)) # 0.30000000000000004</span><br><span class="line"></span><br><span class="line"># Python3</span><br><span class="line">print(.1 + .2) # 0.30000000000000004</span><br></pre></td></tr></table></figure></li><li>Java<br>Java 中使用了 BigDecimal 类内置了对任意精度数字的支持。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(.1 + .2); &#x2F;&#x2F; 0.30000000000000004</span><br><span class="line"></span><br><span class="line">System.out.println(.1F + .2F); &#x2F;&#x2F; 0.3</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>最后做个总结，由于计算机底层存储都是基于二进制的，需要事先由十进制转换为二进制存储与运算，这整个转换过程中，类似于 0.1、0.2 这样的数是无穷尽的，无法用二进制数精确表示。JavaScript 采用的是 IEEE 754 双精确度标准，能够有效存储的位数为 52 位，所以就需要做舍入操作，这无可避免的会引起精度丢失。另外我们在 0.1 与 0.2 相加做对阶、求和、舍入过程中也会产生精度的丢失。<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3></li><li><a href="0.30000000000000004.com/">0.30000000000000004.com/</a></li><li><a href="www.cnblogs.com/yilang/p/11277201.html">www.cnblogs.com/yilang/p/11277201.html</a></li><li><a href="www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html">www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EnXEdK8F8GWpKbeGOUGqqQ&quot;&gt;https://mp.weixin.qq.com/s/EnXEdK8F8GWpKbeGOUGqqQ&lt;/a&gt;整理&lt;/p&gt;
&lt;h3 id=&quot;先修知识&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的正则表达式</title>
    <link href="http://example.com/2021/03/06/nodejs/JavaScript_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/03/06/nodejs/JavaScript_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-06T08:00:06.000Z</published>
    <updated>2021-03-06T08:12:04.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="模式修饰符参数"><a href="#模式修饰符参数" class="headerlink" title="模式修饰符参数"></a>模式修饰符参数</h3><ul><li><code>i</code>：忽略大小写</li><li><code>g</code>：全局匹配</li><li><code>m</code>：多行匹配</li><li><code>/hello/</code>：两个反斜杠是正则表达式的字面量表示法<h3 id="两个测试方法"><a href="#两个测试方法" class="headerlink" title="两个测试方法"></a>两个测试方法</h3></li><li>test<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; new RegExp(&#39;hello world&#39;, &#39;ig&#39;);</span><br><span class="line">console.log(test.test(&#39;hello world&#39;)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li><li>exec<blockquote><p>返回的是数组，有就返回数组的值，没有返回为null。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; new RegExp(&#39;hello world&#39;, &#39;ig&#39;);</span><br><span class="line">console.log(test.exec(&#39;hello&#39;)); &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure><h3 id="4个正则表达式方法"><a href="#4个正则表达式方法" class="headerlink" title="4个正则表达式方法"></a>4个正则表达式方法</h3></li><li>match(pattern)<blockquote><p>将所有匹配的字符串组合成数组返回</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const pattern&#x3D;&#x2F;Box&#x2F;ig;</span><br><span class="line">const str&#x3D;&quot;This is a Box! The is a box!&quot;;</span><br><span class="line"></span><br><span class="line">console.log(str.match(pattern));</span><br></pre></td></tr></table></figure></li><li>search(pattern)<blockquote><p>返回字符串中pattern开始位置，忽略全局匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const pattern&#x3D;&#x2F;Box&#x2F;i;    &#x2F;&#x2F;</span><br><span class="line">const str&#x3D;&quot;This is a Box! The is a box!&quot;;</span><br><span class="line"></span><br><span class="line">console.log(str.search(pattern)); &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure></li><li>replace(pattern)<blockquote><p>替换匹配到的字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const pattern&#x3D;&#x2F;Box&#x2F;ig;</span><br><span class="line">const str&#x3D;&quot;This is a Box! The is a box!&quot;;</span><br><span class="line"></span><br><span class="line">console.log(str.replace(pattern,&#39;Tom&#39;));</span><br></pre></td></tr></table></figure></li><li>split(pattern)<blockquote><p>返回字符串指定pattern拆分数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const pattern &#x3D; &#x2F; &#x2F;ig;    &#x2F;&#x2F;空格</span><br><span class="line">const str &#x3D; &quot;This is a Box! The is a box!&quot;;</span><br><span class="line"></span><br><span class="line">console.log(str.split(pattern)); &#x2F;&#x2F;以空格进行分割，返回的是数组</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出结果</span><br><span class="line">&#x2F;&#x2F; [ &#39;This&#39;, &#39;is&#39;, &#39;a&#39;, &#39;Box!&#39;, &#39;The&#39;, &#39;is&#39;, &#39;a&#39;, &#39;box!&#39; ]</span><br></pre></td></tr></table></figure><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3></li><li><code>\w</code>表示<code>a-zA-Z0-9_</code></li><li>锚元字符匹配<code>(^ $) ^</code>强制首匹配$强制尾匹配，并且只匹配一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const pattern&#x3D;&#x2F;^[a-z]oogle\d$&#x2F;;</span><br><span class="line">const str&#x3D;&quot;aoogle2&quot;;</span><br><span class="line">console.log(pattern.test(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><code>注意： ^</code>符号在<code>[]</code>里面表示 非 在外边表示强制首匹配，并且只匹配一个 要想匹配多个值，使用<code>+</code></li><li><code>\b</code>表示到达边界</li><li><code>|</code>表示匹配或选择模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const pattern&#x3D;&#x2F;baidu|google|bing&#x2F;; &#x2F;&#x2F;匹配或选择其中某个字符，不是相等，包含的意思</span><br><span class="line">const str &#x3D; &quot;baidu a google&quot;; </span><br><span class="line">console.log(pattern.test(str));  &#x2F;&#x2F;返回true</span><br></pre></td></tr></table></figure><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3></li><li>检查邮政编码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const pattern &#x3D; &#x2F;^[1-9]&#123;1&#125;[0-9]&#123;5&#125;$&#x2F;;</span><br><span class="line">const str &#x3D; &quot;122534&quot;; &#x2F;&#x2F;共6位数，第一位不能为0</span><br><span class="line"></span><br><span class="line">console.log(pattern.test(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li><li>压缩包后缀名<br>\w等于a-zA-Z0-9_ 使用^限定从首字母匹配 .是特殊符号需要\n进行转义 |选择符必须使用()进行分组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const pattern &#x3D; &#x2F;^[\w]+\.(zip|gz|rar)$&#x2F;;  </span><br><span class="line">const str&#x3D;&quot;a12_.zip&quot;; &#x2F;&#x2F;文件名 字母_数字.zip,gz,rar</span><br><span class="line">console.log(pattern.test(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li><li>删除多余空格<blockquote><p>方法一：使用replace只匹配一个，所以使用+匹配多个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var pattern&#x3D;&#x2F;^\s+&#x2F;; </span><br><span class="line">var str&#x3D;&quot;        google       &quot;;</span><br><span class="line">var result&#x3D;str.replace(pattern,&#39;&#39;);</span><br><span class="line">    pattern&#x3D;&#x2F;\s+$&#x2F;;</span><br><span class="line">    result&#x3D;result.replace(pattern,&#39;&#39;);</span><br><span class="line">    </span><br><span class="line">console.log(&#39;|&#39;+result+&#39;|&#39;); &#x2F;&#x2F; |google|</span><br></pre></td></tr></table></figure><blockquote><p>方法二：(.+)贪婪模式，使用惰性模式，后面的空格不让匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var pattern&#x3D;&#x2F;^\s+(.+?)\s+$&#x2F;;</span><br><span class="line">var str&#x3D;&quot;     google         &quot;;</span><br><span class="line">var result&#x3D;pattern.exec(str,&#39;&#39;)[1];</span><br><span class="line"></span><br><span class="line">console.log(&#39;|&#39;+result+&#39;|&#39;);</span><br></pre></td></tr></table></figure><blockquote><p>方法三：(.+)贪婪模式，改为惰性模式，使用分组模式，只取匹配的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var pattern&#x3D;&#x2F;^\s+(.+?)\s+$&#x2F;;</span><br><span class="line">var str&#x3D;&quot;     google         &quot;;</span><br><span class="line">var result&#x3D;str.replace(pattern,&#39;$1&#39;); &#x2F;&#x2F;使用分组模式</span><br><span class="line"></span><br><span class="line">console.log(&#39;|&#39;+result+&#39;|&#39;); &#x2F;&#x2F; |google|</span><br></pre></td></tr></table></figure></li><li>简单邮箱验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var pattern&#x3D;&#x2F;^([\w\.\_]+)@([\w\_]+)\.([a-zA-Z])&#123;2,4&#125;$&#x2F;;</span><br><span class="line">var str&#x3D;&quot;qzfweb@gmail.com&quot;;</span><br><span class="line">console.log(pattern.test(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;h3 id=&quot;模式修饰符参数&quot;&gt;&lt;a href=&quot;#模式修饰符参数&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的原型</title>
    <link href="http://example.com/2021/03/06/nodejs/JavaScript_%E5%8E%9F%E5%9E%8B/"/>
    <id>http://example.com/2021/03/06/nodejs/JavaScript_%E5%8E%9F%E5%9E%8B/</id>
    <published>2021-03-06T07:36:40.000Z</published>
    <updated>2021-03-06T07:54:40.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型概念"><a href="#原型概念" class="headerlink" title="原型概念"></a>原型概念</h3><blockquote><p>我们所创建的每个原型都有一个(原型)属性，这个属性是一个对象。<br>原型模式的执行流程<br>1.先查找构造函数实例里的属性或方法，如果有，立刻返回<br>2.如果构造函数实例里没有，则去它的原型对象里找，如果有，就返回</p></blockquote><h3 id="构造函数实例属性方法"><a href="#构造函数实例属性方法" class="headerlink" title="构造函数实例属性方法"></a>构造函数实例属性方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Box(name,age)&#123;</span><br><span class="line">    this.name&#x3D;name;     &#x2F;&#x2F;实例属性</span><br><span class="line">    this.age&#x3D;age;</span><br><span class="line">    this.run&#x3D;function()&#123; &#x2F;&#x2F;实例方法</span><br><span class="line">        return this.name+this.age+&quot;运行中.....&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var box1&#x3D;new Box(&#39;zhangsan&#39;,20);</span><br><span class="line">var box2&#x3D;new Box(&#39;lisi&#39;,18);</span><br><span class="line">alert(box1.run&#x3D;&#x3D;box2.run); &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><h3 id="构建原型属性方法"><a href="#构建原型属性方法" class="headerlink" title="构建原型属性方法"></a>构建原型属性方法</h3><p>构造函数体内什么都没有，这里如果有，叫作实例属性，实例方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Box()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Box.prototype.name&#x3D;&#39;lee&#39;; &#x2F;&#x2F;原型属性</span><br><span class="line">Box.prototype.age&#x3D;23;</span><br><span class="line">Box.prototype.run&#x3D;function()&#123;&#x2F;&#x2F;原型方法</span><br><span class="line">    return this.name+this.age+&quot;运行中......&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果是实例化方法，不同的实例化，他们的地址是不一样的，是唯一的，如果是原型方法，那么他们地址是共享的，大家都一样，看以下示例<code>box1.run==box2.run</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var box1&#x3D;new Box();</span><br><span class="line">var box2&#x3D;new Box();</span><br><span class="line">alert(box1.run&#x3D;&#x3D;box2.run);  &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>这个属性是一个对象，访问不到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.prototype);</span><br></pre></td></tr></table></figure><p>这个属性是一个指针指向prototype原型对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.__proto__);</span><br></pre></td></tr></table></figure><p>构造属性可以获取构造函数本身，作用是被原型指针定位，然后得到构造函数本身，其实就是对象实例对应的原型对象的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.constructor);</span><br></pre></td></tr></table></figure><h3 id="原型字面量创建对象"><a href="#原型字面量创建对象" class="headerlink" title="原型字面量创建对象"></a>原型字面量创建对象</h3><blockquote><p>使用构造函数创建原型对象和使用字面量创建对象在使用上基本相同，但还是有一些区别，字面量创建的方式使用constructor属性不会指向实例，而会指向Object，构造函数则相反。</p></blockquote><h3 id="字面量创建对象"><a href="#字面量创建对象" class="headerlink" title="字面量创建对象"></a>字面量创建对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function Box()&#123;&#125;</span><br></pre></td></tr></table></figure><p>使用字面量的方式创建原型对象，这里{}就是对象(Object),new Object就相当于{}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Box.prototype&#x3D;&#123;</span><br><span class="line">    name:&#39;lee&#39;,</span><br><span class="line">    age:20,</span><br><span class="line">    run:function()&#123;</span><br><span class="line">        return this.name+this.age+&quot;运行中.......&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var box1&#x3D;new Box();</span><br><span class="line">alert(box1.constructor);&#x2F;&#x2F;返回function Object()&#123;&#125;对象</span><br></pre></td></tr></table></figure><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Box(name,age)&#123;</span><br><span class="line">    this.name&#x3D;name;</span><br><span class="line">    this.age&#x3D;age;</span><br><span class="line">    this.run&#x3D;function()&#123;</span><br><span class="line">        return this.name+this.age+&quot;运行中....&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var box1&#x3D;new Box(&#39;zhangsan&#39;,20);</span><br><span class="line">alert(box1.constructor); &#x2F;&#x2F;返回的是function Box()&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="原型对象的重写需要注意的问题"><a href="#原型对象的重写需要注意的问题" class="headerlink" title="原型对象的重写需要注意的问题"></a>原型对象的重写需要注意的问题</h3><p>1.重写原型对象之后，不会保存之前原型的任何信息<br>2.把原来的原型对象和构造函数对象实例之间的关系切断了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Box()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Box.prototype&#x3D;&#123;</span><br><span class="line">    constructor:Box,&#x2F;&#x2F;让它强制指向Box</span><br><span class="line">    name:&#39;lee&#39;,</span><br><span class="line">    age:20,</span><br><span class="line">    run:function()&#123;</span><br><span class="line">        return this.name+this.age+&quot;运行中.......&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重写原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Box.prototype&#x3D;&#123;</span><br><span class="line">    age:21</span><br><span class="line">&#125;</span><br><span class="line">var box1&#x3D;new Box();</span><br><span class="line">alert(box1.name); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><p>可以使用addstring()方法向原型添加内容，这样可以避免原型重写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.addstring&#x3D;function()&#123;</span><br><span class="line">    return this+&#39;，被添加了！&#39;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var box1&#x3D;new Box();</span><br><span class="line">alert(box1.name.addstring()); &#x2F;&#x2F; lee，被添加了！</span><br></pre></td></tr></table></figure><h3 id="原型的实际应用"><a href="#原型的实际应用" class="headerlink" title="原型的实际应用"></a>原型的实际应用</h3><ul><li>先找到入口函数<code>window.$</code></li><li>根据入口函数找到构造函数<code>new ...</code></li><li>根据构造函数找到原型的定义<code>zepto.Z.prototype</code><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3>以下实例中通过Jquery或Zepto操作dom元素，例如css方法、text方法都是操作的原型上的的方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Zepto&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;zepto&#x2F;1.1.6&#x2F;zepto.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;zepto.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; 这是一个测试 &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt; 这是一个测试2 &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div &#x3D; $(&#39;div&#39;); &#x2F;&#x2F; 得到一个实例</span><br><span class="line">        div.css(&#39;color&#39;, &#39;red&#39;); &#x2F;&#x2F; 原型方法css</span><br><span class="line">        alert(div.text()); &#x2F;&#x2F; 原型方法text</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="zepto中原型的应用"><a href="#zepto中原型的应用" class="headerlink" title="zepto中原型的应用"></a>zepto中原型的应用</h3>以下实例也是取了关于原型部分的源码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var Zepto &#x3D; (function() &#123;</span><br><span class="line">    var $, zepto&#x3D;&#123;&#125;, emptyArray&#x3D;[], slice&#x3D;emptyArray.slice, document&#x3D;window.document;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 构造函数</span><br><span class="line">    zepto.Z &#x3D; function(dom, selector) &#123;</span><br><span class="line">        dom &#x3D; dom || []</span><br><span class="line">        dom.__proto__ &#x3D; $.fn</span><br><span class="line">        dom.selector &#x3D; selector || &#39;&#39;;</span><br><span class="line"></span><br><span class="line">        return dom</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zepto.init &#x3D; function(selector) &#123;</span><br><span class="line">        var dom;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果选择器不存在，返回一个空的Zepto集合</span><br><span class="line">        if (!selector) return zepto.Z();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 优化字符串选择器</span><br><span class="line">        if (typeof selector &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">            selector &#x3D; selector.trim();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 还有一系列的判断此处忽略，进行简化 ...</span><br><span class="line">            dom &#x3D; slice.call(document.querySelectorAll(selector))</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 更多可以去查看源码 ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return zepto.Z(dom, selector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ &#x3D; function(selector) &#123;</span><br><span class="line">        return zepto.init(selector);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    $.fn &#x3D; &#123;</span><br><span class="line">        text: function() &#123;</span><br><span class="line">            return (0 in this ? this[0].textContent : null)</span><br><span class="line">        &#125;,</span><br><span class="line">        css: function() &#123;</span><br><span class="line">            alert(&#39;css&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; $.fn赋值给构造函数的原型</span><br><span class="line">    zepto.Z.prototype &#x3D; $.fn;</span><br><span class="line"></span><br><span class="line">    return $;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">window.Zepto &#x3D; Zepto;</span><br><span class="line">window.$ &#x3D;&#x3D;&#x3D; undefined &amp;&amp; (window.$ &#x3D; Zepto); &#x2F;&#x2F; 如果window.$不存在，赋予window.$为Zepto;</span><br></pre></td></tr></table></figure><h3 id="jquery中原型应用"><a href="#jquery中原型应用" class="headerlink" title="jquery中原型应用"></a>jquery中原型应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(function(global, factory) &#123;</span><br><span class="line">    &#x2F;&#x2F; 浏览器环境、Node环境判断</span><br><span class="line">    if ( typeof module &#x3D;&#x3D;&#x3D; &quot;object&quot; &amp;&amp; typeof module.exports &#x3D;&#x3D;&#x3D; &quot;object&quot; ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Node环境处理，这里不做阐述，具体参考源码</span><br><span class="line">        &#x2F;&#x2F; factory(global, true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 进入浏览器环境</span><br><span class="line">        factory(global);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(typeof window !&#x3D;&#x3D; &quot;undefined&quot; ? window : this, function(window, noGlobal) &#123;</span><br><span class="line">    var Jquery &#x3D; function(selector) &#123;</span><br><span class="line">        return new jQuery.fn.init(selector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Jquery.fn &#x3D; Jquery.prototype &#x3D; &#123;</span><br><span class="line">        css: function() &#123;</span><br><span class="line">            alert(&#39;css&#39;);</span><br><span class="line">        &#125;,</span><br><span class="line">        text: function() &#123;</span><br><span class="line">            return (0 in this ? this[0].textContent : null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义构造函数</span><br><span class="line">    var init &#x3D; Jquery.fn.init &#x3D; function(selector) &#123;</span><br><span class="line">        var slice &#x3D; Array.prototype.slice;</span><br><span class="line">        var dom &#x3D; slice.call(document.querySelectorAll(selector));</span><br><span class="line"></span><br><span class="line">        var i, len&#x3D;dom ? dom.length : 0;</span><br><span class="line">        for (i&#x3D;0; i&lt;len; i++) &#123;</span><br><span class="line">            this[i] &#x3D; dom[i];</span><br><span class="line">        &#125;</span><br><span class="line">        this.length &#x3D; len;</span><br><span class="line">        this.selector &#x3D; selector || &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 构造函数原型赋值</span><br><span class="line">    init.prototype &#x3D; Jquery.fn;</span><br><span class="line"></span><br><span class="line">    if ( !noGlobal ) &#123; &#x2F;&#x2F; 判断是否为浏览器环境</span><br><span class="line">        window.jQuery &#x3D; window.$ &#x3D; Jquery;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="原型的扩展"><a href="#原型的扩展" class="headerlink" title="原型的扩展"></a>原型的扩展</h3></li></ul><p>1.插件扩展在<code>$.fn</code>之上，并不是扩展在构造函数的原型<br>2.对外开放的只有<code>$</code>，构造函数并没有开放<br>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; 插件扩展：获取tagName</span><br><span class="line">        $.fn.getTagName &#x3D; function() &#123;</span><br><span class="line">            return (0 in this ? this[0].tagName : &#39;&#39;);</span><br><span class="line">        &#125;    </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;div&gt; 这是一个测试 &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt; 这是一个测试2 &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div &#x3D; $(&#39;div&#39;); &#x2F;&#x2F; 得到一个实例</span><br><span class="line">        alert(div.getTagName()); &#x2F;&#x2F; 封装的插件</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原型概念&quot;&gt;&lt;a href=&quot;#原型概念&quot; class=&quot;headerlink&quot; title=&quot;原型概念&quot;&gt;&lt;/a&gt;原型概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们所创建的每个原型都有一个(原型)属性，这个属性是一个对象。&lt;br&gt;原型模式的执行流程&lt;br&gt;1</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象</title>
    <link href="http://example.com/2021/03/04/nodejs/JavaScript_%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/03/04/nodejs/JavaScript_%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-04T15:04:22.000Z</published>
    <updated>2021-03-06T07:34:37.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面试指南"><a href="#面试指南" class="headerlink" title="面试指南"></a>面试指南</h3><ul><li><code>什么是引用传递？&#123;&#125; == &#123;&#125; 是否等于true </code></li><li><code>如何编写一个对象的深度拷贝函数？</code></li><li><code>new操作符具体做了哪些操作，重要知识点！</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; [];</span><br><span class="line">var A &#x3D; new Function();</span><br><span class="line">A.prototype &#x3D; p;</span><br><span class="line">var a &#x3D; new A;</span><br><span class="line">a.push(1);</span><br><span class="line">console.log(a.length);</span><br><span class="line">console.log(p.length);</span><br></pre></td></tr></table></figure><h3 id="对象的三种类型介绍"><a href="#对象的三种类型介绍" class="headerlink" title="对象的三种类型介绍:"></a>对象的三种类型介绍:</h3></li></ul><ul><li>内置对象，（String、Number、Boolean、Object、Function、Array）</li><li>宿主对象，由Javascript解释器所嵌入的宿主环境定义的，表示网页结构的HTMLElement对象均是宿主对象，也可以当成内置对象</li><li>自定义对象<h3 id="创建对象的四种方法"><a href="#创建对象的四种方法" class="headerlink" title="创建对象的四种方法:"></a>创建对象的四种方法:</h3></li><li>对象字面量 var obj = { a: 1 }</li><li>使用new关键字构造形式创建 var obj = new Object({ a: 1})</li><li>原型（prototype）创建</li><li>ES5的Object.create() 方法创建<h3 id="对象字面量创建"><a href="#对象字面量创建" class="headerlink" title="对象字面量创建"></a>对象字面量创建</h3>对象字面量是由若干个键／值对组成的映射表，整个映射表用{}包括起来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;;</span><br><span class="line">console.log(obj.a);</span><br></pre></td></tr></table></figure><h3 id="在ES6中增加了可计算属性名"><a href="#在ES6中增加了可计算属性名" class="headerlink" title="在ES6中增加了可计算属性名"></a>在ES6中增加了可计算属性名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var variable &#x3D; 2;</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    [1 + variable]: &#39;我是一个可计算属性名&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj); &#x2F;&#x2F; &#123;3: &quot;我是一个可计算属性名&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的内容访问"><a href="#对象的内容访问" class="headerlink" title="对象的内容访问"></a>对象的内容访问</h3>对象值的存入方式是多种多样的，存入在对象容器中的是这些属性的名称，学过C的同学可以想象一下指针的引用，在js中可以理解为对象的引用。内容访问可以通过以下两种符号:</li><li><code>.</code> 指属性访问</li><li><code>[]</code> 指键访问<br>注意：对象中属性名永远必将是字符串，obj[2]看似2是整数，在对象属性名中数字是会被转换为字符串的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    &#39;a&#39;: &#39;属性访问&#39;,</span><br><span class="line">    2: &#39;键访问&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj.a); &#x2F;&#x2F; 属性访问</span><br><span class="line">console.log(obj[2]); &#x2F;&#x2F; 键访问</span><br></pre></td></tr></table></figure><h3 id="使用new关键字构造形式创建"><a href="#使用new关键字构造形式创建" class="headerlink" title="使用new关键字构造形式创建"></a>使用new关键字构造形式创建</h3>先介绍下new操作符构造对象的整个过程，这个很重要，明白之后有助于对后续的理解<h3 id="new操作符构造对象过程"><a href="#new操作符构造对象过程" class="headerlink" title="new操作符构造对象过程"></a>new操作符构造对象过程</h3></li><li>创建一个全新的对象</li><li>新对象会被执行prototype操作（prototype之后会写文章专门进行介绍，感兴趣的童鞋可以先关注下）</li><li>新对象会被绑定到函数调用的this</li><li>如果函数没有返回新对象，new表达式中的函数调用会自动返回这个新对象（对于一个构造函数，即使它内部没有return，也会默认返回return this）<br>看一道曾经遇到的面试题，如果在看本篇文章介绍之前，你能够正确理解并读出下面语句，那么恭喜你对这块理解很透彻<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; [2, 3];</span><br><span class="line">var A &#x3D; new Function();</span><br><span class="line">    A.prototype &#x3D; p;</span><br><span class="line"></span><br><span class="line">console.log(A.prototype)</span><br><span class="line"></span><br><span class="line">var a &#x3D; new A;</span><br><span class="line"></span><br><span class="line">console.log(a.__proto__)</span><br><span class="line"></span><br><span class="line">a.push(1);</span><br><span class="line"></span><br><span class="line">console.log(a.length); &#x2F;&#x2F; 3</span><br><span class="line">console.log(p.length); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>new A 时发生了什么?</li></ul><p>1.创建一个新的对象obj<br><code>var obj = &#123;&#125;</code><br>2.新对象执行prototype操作，设置新对象的_proto_属性指向构造函数的A.prototype<br><code>obj._proto_ = A.prototype</code><br>3.构造函数的作用域（this）赋值给新对象<br><code>A.apply(obj)</code><br>4.返回该对象<br>上面示例中实例a已经不是一个对象，而是一个数组对象，感兴趣的童鞋可以在电脑上操作看下 <code>A.prototype</code> 和 <code>a.__proto__</code> 的实际输出结果</p><h3 id="new操作符创建数组对象"><a href="#new操作符创建数组对象" class="headerlink" title="new操作符创建数组对象"></a>new操作符创建数组对象</h3><p>数组属于内置对象，所以可以当作一个普通的键/值对来使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; new Array(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;); &#x2F;&#x2F; 类似于 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line"></span><br><span class="line">console.log(arr[0]); &#x2F;&#x2F; a</span><br><span class="line">console.log(arr[1]); &#x2F;&#x2F; b</span><br><span class="line">console.log(arr[2]); &#x2F;&#x2F; c </span><br><span class="line">console.log(arr.length); &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">arr[3] &#x3D; &#39;d&#39;;</span><br><span class="line">console.log(arr.length); &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure><h3 id="对象的create方法创建"><a href="#对象的create方法创建" class="headerlink" title="对象的create方法创建"></a>对象的create方法创建</h3><p>Object.create(obj, [options])方法是ECMAScript5中定义的方法</p><ul><li><code>obj</code> 第一个参数是创建这个对象的原型</li><li><code>options</code> 第二个为可选参数，用于描述对象的属性<h3 id="null创建一个没有原型的新对象"><a href="#null创建一个没有原型的新对象" class="headerlink" title="null创建一个没有原型的新对象"></a>null创建一个没有原型的新对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; Object.create(null)</span><br><span class="line"></span><br><span class="line">console.log(obj.prototype); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><h3 id="创建一个空对象"><a href="#创建一个空对象" class="headerlink" title="创建一个空对象"></a>创建一个空对象</h3>以下 <code>Object.create(Object.prototype)</code> 等价于 {} 或 <code>new Object()</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; Object.create(Object.prototype)</span><br><span class="line"></span><br><span class="line">console.log(obj.prototype); &#x2F;&#x2F; &#123;constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …&#125;</span><br></pre></td></tr></table></figure><h3 id="创建原型对象"><a href="#创建原型对象" class="headerlink" title="创建原型对象"></a>创建原型对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; Object.create(&#123; a: 1, b: 2 &#125;)</span><br><span class="line"></span><br><span class="line">console.log(obj.b); &#x2F;&#x2F; 2 </span><br></pre></td></tr></table></figure><h3 id="原型prototype创建"><a href="#原型prototype创建" class="headerlink" title="原型prototype创建"></a>原型prototype创建</h3>除了 null 之外的每一个对象都从原型继承属性，关于javascript的原型之后会有一篇文章进行讲解，本次主要讨论对象的一些内容，所以在这里不做过多讨论</li><li>new Object或者{}创建的对象，原型是 Object.prototype</li><li>new Array创建的对象，原型是 Array.prototype</li><li>new Date创建的对象，原型是 Date.prototype<h3 id="对象属性描述符"><a href="#对象属性描述符" class="headerlink" title="对象属性描述符"></a>对象属性描述符</h3>ES5之后才拥有了描述对象检测对象属性的方法</li><li>属性描述符含义<ul><li>{value: 1, writable: true, enumerable: true, configurable: true}</li><li>value 属性值</li><li>writable 属性值是否可以修改</li><li>enumerable 是否希望某些属性出现在枚举中</li><li>configurable 属性是否可以配置，如果是可配置，可以结合 Object.defineProperty() 方法使用</li></ul></li><li>Object.getOwnPropertyDescriptor(obj, prop)<ul><li>获取指定对象的自身属性描述符</li><li>obj 属性对象</li><li>prop 属性名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;</span><br><span class="line">var propertyDesc &#x3D; Object.getOwnPropertyDescriptor(obj, &#39;a&#39;);</span><br><span class="line"></span><br><span class="line">console.log(propertyDesc); &#x2F;&#x2F; &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>Object.defineProperty(obj, prop, descriptor)<ul><li>该方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象</li><li>obj 属性对象</li><li>prop 属性名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;</span><br><span class="line">var propertyDesc &#x3D; Object.getOwnPropertyDescriptor(obj, &#39;a&#39;);</span><br><span class="line"></span><br><span class="line">console.log(propertyDesc); &#x2F;&#x2F; &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>Object.defineProperty(obj, prop, descriptor)<ul><li>该方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象</li><li>obj 属性对象</li><li>prop 属性名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">    writable: false, &#x2F;&#x2F; 不可写</span><br><span class="line">    configurable: false, &#x2F;&#x2F; 设置为不可配置后将无法使用delete 删除</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.a &#x3D; 2;</span><br><span class="line"></span><br><span class="line">console.log(obj.a); &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">delete obj.a;</span><br><span class="line"></span><br><span class="line">console.log(obj.a); &#x2F;&#x2F; 1 </span><br></pre></td></tr></table></figure></li></ul></li><li>Object.preventExtensions(obj)<ul><li>禁止一个对象添加新的属性</li><li>obj 属性对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">Object.preventExtensions(obj)</span><br><span class="line"></span><br><span class="line">obj.b &#x3D; 2;</span><br><span class="line"></span><br><span class="line">console.log(obj.b); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><h3 id="对象的存在性检测"><a href="#对象的存在性检测" class="headerlink" title="对象的存在性检测"></a>对象的存在性检测</h3>区分对象中的某个属性是否存在<h3 id="操作符in检查"><a href="#操作符in检查" class="headerlink" title="操作符in检查"></a>操作符in检查</h3>in操作符除了检查属性是否在对象中存在之外还会检查在原型是否存在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">console.log(&#39;a&#39; in obj); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">console.log(obj.hasOwnProperty(&#39;a&#39;)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="对象引用传递"><a href="#对象引用传递" class="headerlink" title="对象引用传递"></a>对象引用传递</h3><blockquote><p>对象属于引用类型是属性和方法的集合。引用类型可以拥有属性和方法，属性也可以是基本类型和引用类型。<br>avascript不允许直接访问内存中的位置，不能直接操作对象的内存空间。实际上操作的是对象的引用，所以引用类型的值是按引用访问的。准确说引用类型的存储需要内存的栈区和堆区(堆内存)共同完成，栈区内保存变量标识符和指向堆内存中该对象的指针(也可以说该对象在堆内存中的地址)。</p></blockquote><h3 id="引用类型示例分析"><a href="#引用类型示例分析" class="headerlink" title="引用类型示例分析"></a>引用类型示例分析</h3></li></ul></li></ul><p>1.引用类型比较<br>引用类型是按照引用访问的，因此对象(引用类型)比较的是堆内存中的地址是否一致，很明显a和b在内存中的地址是不一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;&#125;;</span><br><span class="line">const b &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">a &#x3D;&#x3D; b &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><p>2.引用类型比较<br>下面对象d是对象c的引用，这个值d的副本实际上是一个指针，而这个指针指向堆内存中的一个对。因此赋值操作后两个变量指向了同一个对象地址，只要改变同一个对象的值另外一个也会发生改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const c &#x3D; &#123;&#125;;</span><br><span class="line">const d &#x3D; c;</span><br><span class="line"></span><br><span class="line">c &#x3D;&#x3D; d &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">c.name &#x3D; &#39;zhangsan&#39;;</span><br><span class="line">d.age &#x3D; 24;</span><br><span class="line"></span><br><span class="line">console.log(c); &#x2F;&#x2F;&#123;name: &quot;zhangsan&quot;, age: 24&#125;</span><br><span class="line">console.log(d); &#x2F;&#x2F;&#123;name: &quot;zhangsan&quot;, age: 24&#125;</span><br></pre></td></tr></table></figure><h3 id="对象copy实现"><a href="#对象copy实现" class="headerlink" title="对象copy实现"></a>对象copy实现</h3><ul><li>利用json实现<br>可以利用JSON，将对象先序列化为一个JSON字符串，在用JSON.parse()反序列化，可能不是一种很好的方法，但能适用于部分场景<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;</span><br><span class="line">    name: &#39;zhangsan&#39;,</span><br><span class="line">    school: &#123;</span><br><span class="line">        university: &#39;shanghai&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const b &#x3D; JSON.parse(JSON.stringify(a));</span><br><span class="line"></span><br><span class="line">b.school.university &#x3D; &#39;beijing&#39;;</span><br><span class="line"></span><br><span class="line">console.log(a.school.university); &#x2F;&#x2F; shanghai</span><br><span class="line">console.log(b.school.university); &#x2F;&#x2F; beijing</span><br></pre></td></tr></table></figure></li><li>es6内置方法<br>ES6内置的 <code>Object.assign(target,source1,source2, ...)</code> ，第一个参数是目标参数，后面是需要合并的源对象可以有多个，后合并的属性（方法）会覆盖之前的同名属性（方法），需要注意 Object.assign() 进行的拷贝是浅拷贝<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const obj1 &#x3D; &#123;a: &#123;b: 1&#125;&#125;;</span><br><span class="line">const obj2 &#x3D; Object.assign(&#123;&#125;, obj1);</span><br><span class="line"> </span><br><span class="line">obj2.a.b &#x3D; 3;</span><br><span class="line">obj2.aa &#x3D; &#39;aa&#39;;</span><br><span class="line"></span><br><span class="line">console.log(obj1.a.b) &#x2F;&#x2F; 3</span><br><span class="line">console.log(obj2.a.b) &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">console.log(obj1.aa) &#x2F;&#x2F; undefined</span><br><span class="line">console.log(obj2.aa) &#x2F;&#x2F; aa</span><br></pre></td></tr></table></figure></li><li>实现一个数组对象深度拷贝<blockquote><p>对于下面这样一个复杂的数组对象，要做到深度拷贝(采用递归的方式)，在每次遍历之前创建一个新的对象或者数组，从而开辟一个新的存储地址，这样就切断了引用对象的指针联系。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * [copy 深度copy函数]</span><br><span class="line"> * @param &#123; Object &#125; elments [需要赋值的目标对象]]</span><br><span class="line"> *&#x2F;</span><br><span class="line">function copy(elments)&#123;</span><br><span class="line">    &#x2F;&#x2F;根据传入的元素判断是数组还是对象</span><br><span class="line">    let newElments &#x3D; elments instanceof Array ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    for(let key in elments)&#123;</span><br><span class="line">        &#x2F;&#x2F;注意数组也是对象类型，如果遍历的元素是对象，进行深度拷贝</span><br><span class="line">        newElments[key] &#x3D; typeof elments[key] &#x3D;&#x3D;&#x3D; &#39;object&#39; ? copy(elments[key]) : elments[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newElments;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>需要赋值的目标对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;</span><br><span class="line">    name: &#39;zhangsan&#39;,</span><br><span class="line">    school: &#123;</span><br><span class="line">        university: &#39;shanghai&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    hobby: [&#39;篮球&#39;, &#39;足球&#39;],</span><br><span class="line">    classmates: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;lisi&#39;,</span><br><span class="line">            age: 22,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#39;wangwu&#39;,</span><br><span class="line">            age: 21,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>测试验证，复制出来的对象b完全是一个新的对象，修改b的值，不会在对a进行影响。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const b &#x3D; copy(a);</span><br><span class="line"></span><br><span class="line">b.age &#x3D; 24;</span><br><span class="line">b.school.highSchool &#x3D; &#39;jiangsu&#39;;</span><br><span class="line">b.hobby.push(&#39;🏃&#39;);</span><br><span class="line">b.classmates[0].age &#x3D; 25;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(a)); </span><br><span class="line">&#x2F;&#x2F;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;school&quot;:&#123;&quot;university&quot;:&quot;shanghai&quot;&#125;,&quot;hobby&quot;:[&quot;篮球&quot;,&quot;足球&quot;],&quot;classmates&quot;:[&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:22&#125;,&#123;&quot;name&quot;:&quot;wangwu&quot;,&quot;age&quot;:21&#125;]&#125;</span><br><span class="line">console.log(JSON.stringify(b));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;school&quot;:&#123;&quot;university&quot;:&quot;shanghai&quot;,&quot;highSchool&quot;:&quot;jiangsu&quot;&#125;,&quot;hobby&quot;:[&quot;篮球&quot;,&quot;足球&quot;,&quot;🏃&quot;],&quot;classmates&quot;:[&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:25&#125;,&#123;&quot;name&quot;:&quot;wangwu&quot;,&quot;age&quot;:21&#125;],&quot;age&quot;:24&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;面试指南&quot;&gt;&lt;a href=&quot;#面试指南&quot; class=&quot;headerlink&quot; title=&quot;面试指南&quot;&gt;&lt;/a&gt;面试指南&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;什么是引用传递？&amp;#123;&amp;#125; == &amp;#123;&amp;#125; 是否等于true &lt;/co</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的函数</title>
    <link href="http://example.com/2021/03/04/nodejs/JavaScript_%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/03/04/nodejs/JavaScript_%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-04T14:24:02.000Z</published>
    <updated>2021-03-04T15:43:29.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p></blockquote><h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><blockquote><p>对于<strong>函数声明</strong>解释器会首先读取，并使其在执行任何代码之前可用；<br>对于<strong>函数表达式</strong>，则必须等到解释器执行到它所在的代码行，才会被真正解析。<br>例如下面例子，函数表达式test2必须声明在其调用之前才可用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">console.log(test1(1, 2)); &#x2F;&#x2F; 3</span><br><span class="line">console.log(test2(1, 2)); &#x2F;&#x2F; test2 is not defined</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;函数声明</span><br><span class="line">function test1(a, b)&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;函数表达式</span><br><span class="line">const test2 &#x3D; function f(a, b)&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><ul><li>push()<blockquote><p>数组添加新值后的返回值，返回当前数组的Length。<br><code>let a = [].push(&#39;test&#39;);</code> 输出a的值为1而不是<code>[&#39;test&#39;]</code>，因为<code>push()</code>返回的是数组的长度。</p></blockquote></li><li>arguments对象<blockquote><p>系统内置的arguments对象，可以用于获取函数参数、参数长度等</p></blockquote><h3 id="call和apply的使用与区别"><a href="#call和apply的使用与区别" class="headerlink" title="call和apply的使用与区别"></a>call和apply的使用与区别</h3></li><li>apply使用情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function box(num1,num2)&#123;</span><br><span class="line">    return num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sum(num1,num2)&#123;</span><br><span class="line">    &#x2F;&#x2F;this 表示全局作用域，浏览器环境下window，node环境global，[]表示传递的参数</span><br><span class="line">    return box.apply(this,[num1,num2]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;或者下面写法arguments可以当数组传递</span><br><span class="line">    &#x2F;&#x2F;return box.apply(this,arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(10,10)); &#x2F;&#x2F;输出结果: 20</span><br></pre></td></tr></table></figure></li><li>call的使用示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function box(num1,num2)&#123;</span><br><span class="line">    return num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sum2(num1,num2)&#123;</span><br><span class="line">    return box.call(this,num1,num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(10,10)); &#x2F;&#x2F;输出结果: 20</span><br></pre></td></tr></table></figure>apply传递参数是按照数组传递，call是一个一个传递</li></ul><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><blockquote><p>javascript没有引用传递，如果传递的参数是一个值，是按值传递；如果传递的是一个对象，则传递的是一个对象的引用。</p></blockquote><ul><li>示例一：js代码按值传递<br>如果按引用传递，那么函数里面的num会变成类似全局变量，最后输出60<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function box(num)&#123; &#x2F;&#x2F; 按值传递</span><br><span class="line">    num+&#x3D;10;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br><span class="line">var num&#x3D;50;</span><br><span class="line"></span><br><span class="line">console.log(box(num));  &#x2F;&#x2F; 60</span><br><span class="line">console.log(num);        &#x2F;&#x2F; 50</span><br></pre></td></tr></table></figure></li><li>示例二：php代码传递一个参数：<br>php中的引用传递，会改变外部的num值，最后num也会输出60。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function box(&amp;$num)&#123; </span><br><span class="line">    &#x2F;&#x2F;加上&amp;符号将num变成全局变量</span><br><span class="line">    $num+&#x3D;10;</span><br><span class="line">    return $num;</span><br><span class="line">&#125;</span><br><span class="line">$num &#x3D; 50;</span><br><span class="line">echo box($num);    &#x2F;&#x2F; 60</span><br><span class="line">echo $num;    &#x2F;&#x2F; 60</span><br></pre></td></tr></table></figure></li><li>示例三：js代码传递一个对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function box(obj)&#123; &#x2F;&#x2F; 按对象传递</span><br><span class="line">    obj.num+&#x3D;10;</span><br><span class="line"></span><br><span class="line">    return obj.num;</span><br><span class="line">&#125;</span><br><span class="line">var obj &#x3D; &#123; num: 50 &#125;;</span><br><span class="line"></span><br><span class="line">console.log(box(obj));  &#x2F;&#x2F; 60</span><br><span class="line">console.log(obj.num);    &#x2F;&#x2F; 60</span><br></pre></td></tr></table></figure><h3 id="匿名函数与闭包"><a href="#匿名函数与闭包" class="headerlink" title="匿名函数与闭包"></a>匿名函数与闭包</h3><blockquote><p>匿名函数就是没有名字的函数，闭包是可访问一个函数作用域里变量的函数，由于闭包作用域返回的局部变量资源不会被立刻销毁回收，所以可能会占用更多的内存。过度使用闭包会导致性能下降，建议在非常有必要的时候才使用闭包。</p></blockquote></li></ul><p><strong>匿名函数的自我执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(num)&#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;)(1) &#x2F;&#x2F;1</span><br></pre></td></tr></table></figure><p><strong>函数里放一个匿名函数将会产生闭包</strong></p><ul><li>使用局部变量实现累加功能。</li><li>定义函数test1，返回一个匿名函数形成一个闭包</li><li>将test1赋给test2，此时test2会初始化变量a，值为test1返回的匿名函数</li><li>执行test2()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">function test1()&#123;</span><br><span class="line">    var a &#x3D; 1;</span><br><span class="line"></span><br><span class="line">    return function()&#123;</span><br><span class="line">        &#x2F;&#x2F; a++;</span><br><span class="line">        &#x2F;&#x2F; return a;</span><br><span class="line">        &#x2F;&#x2F; 或以下写法</span><br><span class="line">        return ++a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var test2 &#x3D; test1();</span><br><span class="line"></span><br><span class="line">console.log(test2()); &#x2F;&#x2F; 2</span><br><span class="line">console.log(test2()); &#x2F;&#x2F; 3</span><br><span class="line">console.log(test2()); &#x2F;&#x2F; 4</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不能这样写,这样外层函数每次也会执行，从而age每次都会初始化</span><br><span class="line">console.log(test1()()); &#x2F;&#x2F; 2</span><br><span class="line">console.log(test1()()); &#x2F;&#x2F; 2</span><br><span class="line">console.log(test1()()); &#x2F;&#x2F; 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>闭包中使用this对象将会导致的一些问题</strong></p><blockquote><p>在闭包中使用this对象也可能会导致一些问题，this对象是在运行时基于函数的执行环境绑定的，如果this在全局范围就是window，如果在对象内部就指向这个对象。而闭包却在运行时指向window的，因为闭包并不属于这个对象的属性或方法<br>返回object</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var box&#x3D;&#123;</span><br><span class="line">    getThis:function()&#123;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(box.getThis()); &#x2F;&#x2F; &#123; getThis: [Function: getThis] &#125;</span><br></pre></td></tr></table></figure><p>闭包中的this将返回全局对象，浏览器中<code>window</code>对象，Node.js中<code>global</code>对象，可以使用对象冒充或者赋值来解决闭包中this全局对象问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var box&#x3D;&#123;</span><br><span class="line">    user: &#39;zs&#39;,</span><br><span class="line">    getThis:function()&#123;</span><br><span class="line">        return function()&#123;</span><br><span class="line">            return this;   </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(box.getThis()());</span><br></pre></td></tr></table></figure><p><strong>对象冒充</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var box&#x3D;&#123;</span><br><span class="line">    user: &#39;zs&#39;,</span><br><span class="line">    getThis:function()&#123;</span><br><span class="line">        return function()&#123;</span><br><span class="line">            return this;   </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(box.getThis().call(box)); &#x2F;&#x2F; &#123; user: &#39;zs&#39;, getThis: [Function: getThis] &#125;</span><br></pre></td></tr></table></figure><p><strong>赋值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var box&#x3D;&#123;</span><br><span class="line">    user: &#39;zs&#39;,</span><br><span class="line">    getThis:function()&#123;</span><br><span class="line">        var that &#x3D; this; &#x2F;&#x2F; 此时的this指的是box对象</span><br><span class="line">        return function()&#123;</span><br><span class="line">            return that.user;   </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(box.getThis()()); &#x2F;&#x2F; zs</span><br></pre></td></tr></table></figure><p><strong>一个例子看懂循环和闭包之间的关系</strong><br>下例，循环中的每个迭代器在运行时都会给自己捕获一个i的副本，但是根据作用域的工作原理，尽管循环中的五个函数分别是在各个迭代器中分别定义的，但是它们都会被封闭在一个共享的全局作用域中，实际上只有一个i，结果每次都会输出6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i&#x3D;1; i &lt;&#x3D; 5; i++)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决上面的问题，在每个循环迭代中都需要一个闭包作用域，下面示例，循环中的每个迭代器都会生成一个新的作用域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(var i&#x3D;1; i &lt;&#x3D; 5; i++)&#123;</span><br><span class="line">    (function(j)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(j);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用let解决，let声明，可以用来劫持块作用域，并且在这个块作用域中声明一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(let i&#x3D;1; i &lt;&#x3D; 5; i++)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数表达式实现一个阶乘函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const factorial &#x3D; (function f(num)&#123;</span><br><span class="line">    if(num &lt;&#x3D; 1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return num * f(num -1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(factorial(3)); &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>阅读电子书</title>
    <link href="http://example.com/2021/03/02/%E9%98%85%E8%AF%BB%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    <id>http://example.com/2021/03/02/%E9%98%85%E8%AF%BB%E7%94%B5%E5%AD%90%E4%B9%A6/</id>
    <published>2021-03-02T15:22:38.501Z</published>
    <updated>2021-03-03T15:45:34.637Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nodejs.red/">nodejs技术栈</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.nodejs.red/&quot;&gt;nodejs技术栈&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>详解 JavaScript 中的 this</title>
    <link href="http://example.com/2021/03/02/nodejs/JavaScript_this/"/>
    <id>http://example.com/2021/03/02/nodejs/JavaScript_this/</id>
    <published>2021-03-02T14:24:01.000Z</published>
    <updated>2021-03-04T13:44:50.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两种错误认识"><a href="#两种错误认识" class="headerlink" title="两种错误认识"></a>两种错误认识</h3><h2 id="指向自身"><a href="#指向自身" class="headerlink" title="指向自身"></a>指向自身</h2><p><strong>this 的第一个错误认识是，很容易把 this 理解成指向函数自身，</strong>其实this 的指向在函数定义阶段是无法确定的，只有函数执行时才能确定 this 到底指向谁，实际 this 的最终指向是调用它的那个对象。<br>下面示例，声明函数 foo()，执行 foo.count=0 时，像函数对象 foo 添加一个属性 count。但是函数 foo 内部代码 this.count 中的 this 并不是指向那个函数对象，for 循环中的 foo(i) 掉用它的对象是 window，等价于 window.foo(i)，因此函数 foo 里面的 this 指向的是 window。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function foo(num)&#123;</span><br><span class="line">  this.count++; &#x2F;&#x2F; 记录 foo 被调用次数</span><br><span class="line">&#125;</span><br><span class="line">foo.count &#x3D; 0;</span><br><span class="line">window.count &#x3D; 0;</span><br><span class="line">for(let i&#x3D;0; i&lt;10; i++)&#123;</span><br><span class="line">  if(i &gt; 5)&#123;</span><br><span class="line">    foo(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo.count, window.count); &#x2F;&#x2F; 0 4</span><br></pre></td></tr></table></figure><h2 id="指向函数的作用域"><a href="#指向函数的作用域" class="headerlink" title="指向函数的作用域"></a>指向函数的作用域</h2><p><strong>对 this 的第二种误解就是 this 指向函数的作用域</strong><br>以下这段代码，在 foo 中试图调用 bar 函数，是否成功调用，取决于环境。</p><ul><li><strong>浏览器：</strong>在浏览器环境里是没有问题的，全局声明的函数放在了 window 对象下，foo 函数里面的 this 代指的是 window 对象，在全局环境中并没有声明变量 a，因此在 bar 函数中的 this.a 自然没有定义，输出 undefined。</li><li><strong>Node.js：</strong>在 Node.js 环境下，声明的 function 不会放在 global 全局对象下，因此在 foo 函数里调用 this.bar 函数会报<code>TypeError: this.bar is not a function</code>错误。要想运行不报错，调用 bar 函数时省去前面的 this。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line">  var a &#x3D; 2;</span><br><span class="line">  this.bar();</span><br><span class="line">&#125;</span><br><span class="line">function bar()&#123;</span><br><span class="line">  console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><h3 id="This-四种绑定规则"><a href="#This-四种绑定规则" class="headerlink" title="This 四种绑定规则"></a>This 四种绑定规则</h3><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2>当函数调用属于独立调用（不带函数引用的调用），无法调用其他的绑定规则，我们给它一个称呼 “默认绑定”，在非严格模式下绑定到全局对象，在使用了严格模式 (use strict) 下绑定到 undefined。</li></ul><p><strong>严格模式下调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;</span><br><span class="line">function demo()&#123;</span><br><span class="line">  &#x2F;&#x2F; TypeError: Cannot read property &#39;a&#39; of undefined</span><br><span class="line">  console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line">const a &#x3D; 1;</span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p><strong>非严格模式下调用</strong><br>在浏览器环境下会将 a 绑定到 window.a，以下代码使用 var 声明的变量 a 会输出 1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function demo()&#123;</span><br><span class="line">  console.log(this.a); &#x2F;&#x2F; 1</span><br><span class="line">&#125;</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p>以下代码使用 let 或 const 声明变量 a 结果会输出 undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function demo()&#123;</span><br><span class="line">  console.log(this.a); &#x2F;&#x2F; undefined</span><br><span class="line">&#125;</span><br><span class="line">let a &#x3D; 1;</span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p><code>顶层对象</code>的概念，顶层对象（浏览器环境指 window、Node.js 环境指 Global）的属性和全局变量属性的赋值是相等价的，使用 var 和 function 声明的是顶层对象的属性，而 let 就属于 ES6 规范了，但是 ES6 规范中 let、const、class 这些声明的全局变量，不再属于顶层对象的属性。</p><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>在函数的调用位置处被某个对象包含，拥有上下文，看以下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function child() &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">let parent &#x3D; &#123;</span><br><span class="line">  name: &#39;zhangsan&#39;,</span><br><span class="line">  child,</span><br><span class="line">&#125;</span><br><span class="line">parent.child(); &#x2F;&#x2F; zhangsan</span><br></pre></td></tr></table></figure><p>函数在调用时会使用 parent 对象上下文来引用函数 child，可以理解为child 函数被调用时 parent 对象拥有或包含它。</p><h2 id="隐式绑定的隐患"><a href="#隐式绑定的隐患" class="headerlink" title="隐式绑定的隐患"></a>隐式绑定的隐患</h2><p>被隐式绑定的函数，因为一些不小心的操作会丢失绑定对象，此时就会应用最开始讲的绑定规则中的默认绑定，看下面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function child() &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">let parent &#x3D; &#123;</span><br><span class="line">  name: &#39;zhangsan&#39;,</span><br><span class="line">  child,</span><br><span class="line">&#125;</span><br><span class="line">let parent2 &#x3D; parent.child;</span><br><span class="line">var name &#x3D; &#39;lisi&#39;;</span><br><span class="line">parent2(); &#x2F;&#x2F; lisi</span><br></pre></td></tr></table></figure><p>将 parent.child 函数本身赋给 parent2，调用 parent2() 其实是一个不带任何修饰的函数调用，因此会应用默认绑定。</p><h2 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h2><p>显示绑定和隐式绑定从字面意思理解，有一个相反的对比，一个表现的更直接，一个表现的更委婉，下面在看下两个规则各自的含义:</p><ul><li><strong>隐式绑定：</strong>在一个对象的内部通过属性间接引用函数，从而把 this 隐式绑定到对象内部属性所指向的函数（例如上例中的对象 parent 的 child 属性引用函数 function child(){}）。</li><li><strong>显示绑定：</strong>需要引用一个对象时进行强制绑定调用，js 有提供 call()、apply() 方法，ES5 中也提供了内置的方法 <code>Function.prototype.bind</code>。<br>call()、apply() 这两个函数的第一个参数都是设置 this 对象，区别是 apply 传递参数是按照数组传递，call 是一个一个传递。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fruit(...args)&#123;</span><br><span class="line">  console.log(this.name, args);</span><br><span class="line">&#125;</span><br><span class="line">var apple &#x3D; &#123;</span><br><span class="line">  name: &#39;苹果&#39;</span><br><span class="line">&#125;</span><br><span class="line">var banana &#x3D; &#123;</span><br><span class="line">  name: &#39;香蕉&#39;</span><br><span class="line">&#125;</span><br><span class="line">fruit.call(banana, &#39;a&#39;, &#39;b&#39;)  &#x2F;&#x2F; 香蕉 [ &#39;a&#39;, &#39;b&#39; ]</span><br><span class="line">fruit.apply(apple, [&#39;a&#39;, &#39;b&#39;]) &#x2F;&#x2F; 苹果 [ &#39;a&#39;, &#39;b&#39; ]</span><br></pre></td></tr></table></figure>下面是 bind 绑定的示例，只是将一个值绑定到函数的 this 上，并将绑定好的函数返回，只有在执行 fruit 函数时才会输出信息，例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function fruit()&#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">var apple &#x3D; &#123;</span><br><span class="line">  name: &#39;苹果&#39;</span><br><span class="line">&#125;</span><br><span class="line">fruit &#x3D; fruit.bind(apple);</span><br><span class="line">fruit(); &#x2F;&#x2F; 苹果</span><br></pre></td></tr></table></figure>除了以上 call、apply、bind 还可以通过上下文 context，例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function fruit(name)&#123;</span><br><span class="line">  console.log(&#96;$&#123;this.name&#125;: $&#123;name&#125;&#96;);</span><br><span class="line">&#125;</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  name: &#39;这是水果&#39;,</span><br><span class="line">&#125;</span><br><span class="line">const arr &#x3D; [&#39;苹果&#39;, &#39;香蕉&#39;];</span><br><span class="line">arr.forEach(fruit, obj);</span><br><span class="line">&#x2F;&#x2F; 这是水果: 苹果</span><br><span class="line">&#x2F;&#x2F; 这是水果: 香蕉</span><br></pre></td></tr></table></figure><h3 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h3>new 绑定也可以影响 this 调用，它是一个构造函数，每一次 new 绑定都会创建一个新对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Fruit(name)&#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const f1 &#x3D; new Fruit(&#39;apple&#39;);</span><br><span class="line">const f2 &#x3D; new Fruit(&#39;banana&#39;);</span><br><span class="line">console.log(f1.name, f2.name); &#x2F;&#x2F; apple banana</span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3>如果 this 的调用位置同时应用了多种绑定规则，它是有优先级的：new 绑定 -&gt; 显示绑定 -&gt; 隐式绑定 -&gt; 默认绑定。<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3>箭头函数并非使用 function 关键字进行定义，也不会使用上面所讲解的 this 四种标准规范，箭头函数会继承自外层函数调用的 this 绑定。<br>执行 <code>fruit.call(apple)</code> 时，箭头函数 this 已被绑定，无法再次被修改。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function fruit()&#123;</span><br><span class="line">  return () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var apple &#x3D; &#123;</span><br><span class="line">  name: &#39;苹果&#39;</span><br><span class="line">&#125;</span><br><span class="line">var banana &#x3D; &#123;</span><br><span class="line">  name: &#39;香蕉&#39;</span><br><span class="line">&#125;</span><br><span class="line">var fruitCall &#x3D; fruit.call(apple);</span><br><span class="line">fruitCall.call(banana); &#x2F;&#x2F; 苹果</span><br></pre></td></tr></table></figure><h3 id="This-使用常见问题"><a href="#This-使用常见问题" class="headerlink" title="This 使用常见问题"></a>This 使用常见问题</h3><h2 id="通过函数和原型链模拟类"><a href="#通过函数和原型链模拟类" class="headerlink" title="通过函数和原型链模拟类"></a>通过函数和原型链模拟类</h2>以下示例，定义函数 Fruit，之后在原型链上定义 info 方法，实例化对象 f1 和定义对象 f2 分别调用 info 方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Fruit(name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Fruit.prototype.info &#x3D; function() &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">const f1 &#x3D; new Fruit(&#39;Apple&#39;);</span><br><span class="line">f1.info();</span><br><span class="line">const f2 &#x3D; &#123; name: &#39;Banana&#39; &#125;;</span><br><span class="line">f2.info &#x3D; f1.info;</span><br><span class="line">f2.info()</span><br></pre></td></tr></table></figure>输出之后，两次结果是不一样的，原因是 info 方法里的 this 对应的不是定义时的上下文，而是调用时的上下文，根据我们上面讲的几种绑定规则，对应的是隐式绑定规则。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple</span><br><span class="line">Banana</span><br></pre></td></tr></table></figure><h2 id="原型链上使用箭头函数"><a href="#原型链上使用箭头函数" class="headerlink" title="原型链上使用箭头函数"></a>原型链上使用箭头函数</h2>如果使用构造函数和原型链模拟类，不能在原型链上定义箭头函数，因为箭头函数的里的 this 会继承外层函数调用的 this 绑定。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Fruit(name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Fruit.prototype.info &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Banana&#39;</span><br><span class="line">const f1 &#x3D; new Fruit(&#39;Apple&#39;);</span><br><span class="line">f1.info(); &#x2F;&#x2F; Banana</span><br></pre></td></tr></table></figure><h2 id="在事件中的使用"><a href="#在事件中的使用" class="headerlink" title="在事件中的使用"></a>在事件中的使用</h2>举一个 Node.js 示例，在事件中使用时，当我们的监听器被调用时，如果声明的是普通函数，this 会被指向监听器所绑定的 EventEmitter 实例，如果使用的箭头函数方式 this 不会指向 EventEmitter 实例。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;);</span><br><span class="line">class MyEmitter extends EventEmitter &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.name &#x3D; &#39;myEmitter&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const func1 &#x3D; () &#x3D;&gt; console.log(this.name);</span><br><span class="line">const func2 &#x3D; function () &#123; console.log(this.name); &#125;;</span><br><span class="line">const myEmitter &#x3D; new MyEmitter();</span><br><span class="line">myEmitter.on(&#39;event&#39;, func1); &#x2F;&#x2F; undefined</span><br><span class="line">myEmitter.on(&#39;event&#39;, func2); &#x2F;&#x2F; myEmitter</span><br><span class="line">myEmitter.emit(&#39;event&#39;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;两种错误认识&quot;&gt;&lt;a href=&quot;#两种错误认识&quot; class=&quot;headerlink&quot; title=&quot;两种错误认识&quot;&gt;&lt;/a&gt;两种错误认识&lt;/h3&gt;&lt;h2 id=&quot;指向自身&quot;&gt;&lt;a href=&quot;#指向自身&quot; class=&quot;headerlink&quot; title=&quot;指</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础问题</title>
    <link href="http://example.com/2021/03/02/nodejs/JavaScript%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/03/02/nodejs/JavaScript%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-02T14:24:01.000Z</published>
    <updated>2021-03-02T15:45:11.290Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nodejs.red/">https://www.nodejs.red/</a>整理</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><font color=#e96900 size=3>JavaScript</font> 七种内置类型:<code>number、string、boolean、undefined、null、object、symbol</code>(ES6新增加)</li><li><font color=#e96900 size=3>基本类型：</font> 指保存在栈内存中的数据<br><font color=#e96900 size=3>引用类型：</font> <code>(对象引用)</code>指保存在堆内存中的对象，传递的是引用的地址</li><li><font color=#e96900 size=3>(typeof null === ‘object’) = true</font>正确的返回值应该是null，但是这个bug由来已久<br><font color=#e96900 size=3>(undefined == null) = true</font></li><li><code>indexOf</code>为<code>ECMAScript5</code>新方法，<code>IE8</code>及以下不支持</li><li><code>setTimeout(callback, 100)</code>，setTimeout只接受一个函数做为参数不接受闭包，因为闭包会自执行，Nodejs 下最小延迟 1ms<h3 id="undefined与undeclared的区别"><a href="#undefined与undeclared的区别" class="headerlink" title="undefined与undeclared的区别"></a>undefined与undeclared的区别</h3><code>undefined：</code> 已在作用域中声明但还没有赋值的变量是undefined。<br><code>undeclared：</code>还没有在作用域中声明过的变量是undeclared，对于undeclared这种情况typeof处理的时候返回的是undefined。尝试访问一个undeclared的变量，浏览器会报错，JS执行会中断。<h3 id="欺骗词法作用域"><a href="#欺骗词法作用域" class="headerlink" title="欺骗词法作用域"></a>欺骗词法作用域</h3><blockquote><p>词法作用域由写代码期间函数所声明的位置来定义，javascript有两种机制(eval()、with)在运行时来修改词法作用域，这样做通常会导致性能下降，内存泄漏问题。</p></blockquote></li><li>eval函数接收一个字符串为参数，解析字符串生成代码并运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function test(str, b)&#123;</span><br><span class="line">    eval(str);</span><br><span class="line"></span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; 1;</span><br><span class="line"></span><br><span class="line">test(&quot;var a &#x3D; 3&quot;, 2); &#x2F;&#x2F; 3 2</span><br><span class="line"></span><br><span class="line">console.log(a); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><p>上面这段代码示例，eval调用的str相当于在test函数作用域内部声明了一个新的变量b，当console.log()在打印时会在foo函数内部找到a和b，将无法找到外部的a，因此最终输出结果是3和2，最外层a仍就输出是1，两者比较可以看到效果。</p><ul><li>with通常被当作重复引用同一个对象中的多个属性的快捷方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">function withObj(obj)&#123;</span><br><span class="line">    with(obj)&#123;</span><br><span class="line">        a &#x3D; 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let o1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let o2 &#x3D; &#123;</span><br><span class="line">    b: 1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">withObj(o1);</span><br><span class="line">console.log(o1.a); &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">withObj(o2);</span><br><span class="line">console.log(o2.a); &#x2F;&#x2F; undefined</span><br><span class="line">console.log(a); &#x2F;&#x2F; 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上示例中withObj(obj)函数接受一个obj参数，该参数是一个对象引用，执行了with，o1传进去，a=2赋值操作找到了o1.a并将2赋值给它，o2传进去，因为o2没有a属性，就不会创建这个属性，o2.a保持undefined，这个时候就会创建一个新的全局变量a。</li><li>对性能的影响<br>javascript引擎在编译阶段会进行性能优化，很多优化依赖于能够根据代码词法进行静态分析，预先确定了变量和函数的定义位置，才能快速找到标识符，但是在词法分析阶段遇到了with或eval无法明确知道它们会接收什么代码，也就无法判断标识符的位置，最简单的做法就是遇到with或eval不做任何优化，使用其中一个都会导致代码运行变慢，因此，请不要使用他们。<h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3></li><li><code>typeof</code>：基本类型用<code>typeof</code>来检测</li><li><code>instanceof</code>：用来检测是否为数组、对象、正则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let box &#x3D; [1,2,3];</span><br><span class="line">console.log(box instanceof Array); &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">let box1&#x3D;&#123;&#125;;</span><br><span class="line">console.log(box1 instanceof Object); &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">let box2&#x3D;&#x2F;g&#x2F;;</span><br><span class="line">console.log(box2 instanceof RegExp); &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3></li><li>ReferenceError错误<blockquote><p>如果在所有嵌套的作用域中遍寻不到所需的变量，引擎会抛出ReferenceError错误，意味这，这是一个未声明的变量，这个错误是一个非常重要的异常类型。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;a: &#39;, a); &#x2F;&#x2F; Uncaught ReferenceError: a is not defined</span><br><span class="line">let a &#x3D; 2;</span><br></pre></td></tr></table></figure></li><li>TypeError错误<blockquote><p>这种错误表示作用域判别成功，但是进行了非法的操作，例如，对一个非函数类型的值进行函数调用，或者引用null、undefined类型的值中的属性，将会抛出TypeError异常错误。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; null; &#x2F;&#x2F; 或者a &#x3D; undefined</span><br><span class="line">console.log(a.b); &#x2F;&#x2F; Uncaught TypeError: Cannot read property &#39;b&#39; of null</span><br></pre></td></tr></table></figure>对一个非函数类型的值进行函数调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; 2;</span><br><span class="line">a(); &#x2F;&#x2F; TypeError: a is not a function</span><br></pre></td></tr></table></figure><h3 id="数组去重的三种实现方式"><a href="#数组去重的三种实现方式" class="headerlink" title="数组去重的三种实现方式"></a>数组去重的三种实现方式</h3></li><li>Set数组去重<blockquote><p>ES6新的数据结构Set，类似于数组，它的元素都是唯一的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let arr &#x3D; [1, 22, 33, 44, 22, 44];</span><br><span class="line"></span><br><span class="line">console.log([...new Set(arr)]); &#x2F;&#x2F;[1, 22, 33, 44]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>reduce数组对象去重<blockquote><p>reduce对数组中的每一个元素依次执行回调函数，不含数组中未赋值、被删除的元素，回调函数接收四个参数</p></blockquote></li><li>callback：执行数组中每个值的函数，包含四个参数<ul><li>previousValue：上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li>currentValue：数组中当前被处理的元素</li><li>index：当前元素在数组中的索引</li><li>array：调用 reduce 的数组</li><li>initialValue：可选，作为第一次调用 callback 的第一个参数。<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let hash &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function unique(arr, initialValue)&#123;</span><br><span class="line">    return arr.reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class="line">        hash[currentValue.name] ? &#39;&#39; : hash[currentValue.name] &#x3D; true &amp;&amp; previousValue.push(currentValue);</span><br><span class="line"></span><br><span class="line">        return previousValue</span><br><span class="line">    &#125;, initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const uniqueArr &#x3D; unique([&#123;name: &#39;zs&#39;, age: 15&#125;, &#123;name: &#39;lisi&#39;&#125;, &#123;name: &#39;zs&#39;&#125;], []);</span><br><span class="line"></span><br><span class="line">console.log(uniqueArr); &#x2F;&#x2F; uniqueArr.length &#x3D;&#x3D; 2</span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3></li></ul></li><li>方法一：将数组字符串化<blockquote><p>利用数组与字符串的隐式转换，使用+符号链接一个对象，javascript会默认调用toString方法转为字符串，再使用字符串分割成字符串数组，最后转成数值形数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [[222, 333, 444], [55, 66, 77], 11, ]</span><br><span class="line">arr +&#x3D; &#39;&#39;;</span><br><span class="line">arr &#x3D; arr.split(&#39;,&#39;);</span><br><span class="line">arr &#x3D; arr.map(item &#x3D;&gt; Number(item));</span><br><span class="line"></span><br><span class="line">console.log(arr); &#x2F;&#x2F; [222, 333, 444, 55, 66, 77, 11]</span><br></pre></td></tr></table></figure></li><li>方法二：利用apply和concat转换<blockquote><p>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function reduceDimension(arr) &#123;</span><br><span class="line">        return Array.prototype.concat.apply([], arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(reduceDimension([[123], 4, [7, 8],[9, [111]]]));</span><br><span class="line">    &#x2F;&#x2F; [123, 4, 7, 8, 9, Array(1)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法三 自定义函数实现<blockquote><p>推荐使用，经测试这个是执行效率最高的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function reduceDimension(arr)&#123;</span><br><span class="line">    let ret &#x3D; [];</span><br><span class="line"></span><br><span class="line">    let toArr &#x3D; function(arr)&#123;</span><br><span class="line">        arr.forEach(function(item)&#123;</span><br><span class="line">            item instanceof Array ? toArr(item) : ret.push(item);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toArr(arr);</span><br><span class="line"></span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr &#x3D; [[12], 4, [333, [4444, 5555]], [9, [111, 222]]];</span><br><span class="line"></span><br><span class="line">for(let i &#x3D; 0; i &lt; 100000; i++)&#123;</span><br><span class="line">    arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let start &#x3D; new Date().getTime();</span><br><span class="line"></span><br><span class="line">console.log(&#39;reduceDimension: &#39;, reduceDimension(arr));</span><br><span class="line">console.log(&#39;耗时: &#39;, new Date().getTime() - start);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.nodejs.red/&quot;&gt;https://www.nodejs.red/&lt;/a&gt;整理&lt;/p&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>node排查记录</title>
    <link href="http://example.com/2021/03/02/202103/node%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/03/02/202103/node%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-02T11:46:44.000Z</published>
    <updated>2021-03-07T11:00:41.872Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63">https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63</a>整理</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>部分的服务内存已飙升到1G以上</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>easy-monitor<br>alinode进行监控</p><h3 id="几种结果"><a href="#几种结果" class="headerlink" title="几种结果"></a>几种结果</h3><p>1、error 全局监测<br>2、重复引用，无法释放</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63&quot;&gt;https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63&lt;/a&gt;整理&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>生成新的SSH</title>
    <link href="http://example.com/2021/02/28/%E7%94%9F%E6%88%90%E6%96%B0%E7%9A%84SSH/"/>
    <id>http://example.com/2021/02/28/%E7%94%9F%E6%88%90%E6%96%B0%E7%9A%84SSH/</id>
    <published>2021-02-28T14:17:57.000Z</published>
    <updated>2021-03-02T15:24:18.540Z</updated>
    
    <content type="html"><![CDATA[<p>地址：<a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a><br>1、Open Terminal.<br>2、Paste the text below, substituting in your GitHub email address.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><ul><li>Note: If you are using a legacy system that doesn’t support the Ed25519 algorithm, use:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li>This creates a new ssh key, using the provided email as a label.<br>Generating public/private ed25519 key pair.<br>3、When you’re prompted to “Enter a file in which to save the key,” press Enter. This accepts the default file location.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a file in which to save the key (&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_ed25519): [Press enter]</span><br></pre></td></tr></table></figure>4、At the prompt, type a secure passphrase. For more information, see “Working with SSH key passphrases”.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;地址：&lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;https://d</summary>
      
    
    
    
    
  </entry>
  
</feed>
