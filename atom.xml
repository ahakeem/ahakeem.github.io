<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>五五</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-02T15:24:49.316Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>闫海江</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读电子书</title>
    <link href="http://example.com/2021/03/02/%E9%98%85%E8%AF%BB%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    <id>http://example.com/2021/03/02/%E9%98%85%E8%AF%BB%E7%94%B5%E5%AD%90%E4%B9%A6/</id>
    <published>2021-03-02T15:22:38.501Z</published>
    <updated>2021-03-02T15:24:49.316Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nodejs.red/">nodejs技术栈</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.nodejs.red/&quot;&gt;nodejs技术栈&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>详解 JavaScript 中的 this</title>
    <link href="http://example.com/2021/03/02/nodejs/JavaScript_this/"/>
    <id>http://example.com/2021/03/02/nodejs/JavaScript_this/</id>
    <published>2021-03-02T14:24:01.000Z</published>
    <updated>2021-03-02T15:48:14.277Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两种错误认识"><a href="#两种错误认识" class="headerlink" title="两种错误认识"></a>两种错误认识</h3><h2 id="指向自身"><a href="#指向自身" class="headerlink" title="指向自身"></a>指向自身</h2><p><strong>this 的第一个错误认识是，很容易把 this 理解成指向函数自身，</strong>其实this 的指向在函数定义阶段是无法确定的，只有函数执行时才能确定 this 到底指向谁，实际 this 的最终指向是调用它的那个对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;两种错误认识&quot;&gt;&lt;a href=&quot;#两种错误认识&quot; class=&quot;headerlink&quot; title=&quot;两种错误认识&quot;&gt;&lt;/a&gt;两种错误认识&lt;/h3&gt;&lt;h2 id=&quot;指向自身&quot;&gt;&lt;a href=&quot;#指向自身&quot; class=&quot;headerlink&quot; title=&quot;指</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础问题</title>
    <link href="http://example.com/2021/03/02/nodejs/JavaScript%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/03/02/nodejs/JavaScript%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-02T14:24:01.000Z</published>
    <updated>2021-03-02T15:45:11.290Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nodejs.red/">https://www.nodejs.red/</a>整理</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><font color=#e96900 size=3>JavaScript</font> 七种内置类型:<code>number、string、boolean、undefined、null、object、symbol</code>(ES6新增加)</li><li><font color=#e96900 size=3>基本类型：</font> 指保存在栈内存中的数据<br><font color=#e96900 size=3>引用类型：</font> <code>(对象引用)</code>指保存在堆内存中的对象，传递的是引用的地址</li><li><font color=#e96900 size=3>(typeof null === ‘object’) = true</font>正确的返回值应该是null，但是这个bug由来已久<br><font color=#e96900 size=3>(undefined == null) = true</font></li><li><code>indexOf</code>为<code>ECMAScript5</code>新方法，<code>IE8</code>及以下不支持</li><li><code>setTimeout(callback, 100)</code>，setTimeout只接受一个函数做为参数不接受闭包，因为闭包会自执行，Nodejs 下最小延迟 1ms<h3 id="undefined与undeclared的区别"><a href="#undefined与undeclared的区别" class="headerlink" title="undefined与undeclared的区别"></a>undefined与undeclared的区别</h3><code>undefined：</code> 已在作用域中声明但还没有赋值的变量是undefined。<br><code>undeclared：</code>还没有在作用域中声明过的变量是undeclared，对于undeclared这种情况typeof处理的时候返回的是undefined。尝试访问一个undeclared的变量，浏览器会报错，JS执行会中断。<h3 id="欺骗词法作用域"><a href="#欺骗词法作用域" class="headerlink" title="欺骗词法作用域"></a>欺骗词法作用域</h3><blockquote><p>词法作用域由写代码期间函数所声明的位置来定义，javascript有两种机制(eval()、with)在运行时来修改词法作用域，这样做通常会导致性能下降，内存泄漏问题。</p></blockquote></li><li>eval函数接收一个字符串为参数，解析字符串生成代码并运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function test(str, b)&#123;</span><br><span class="line">    eval(str);</span><br><span class="line"></span><br><span class="line">    console.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; 1;</span><br><span class="line"></span><br><span class="line">test(&quot;var a &#x3D; 3&quot;, 2); &#x2F;&#x2F; 3 2</span><br><span class="line"></span><br><span class="line">console.log(a); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><p>上面这段代码示例，eval调用的str相当于在test函数作用域内部声明了一个新的变量b，当console.log()在打印时会在foo函数内部找到a和b，将无法找到外部的a，因此最终输出结果是3和2，最外层a仍就输出是1，两者比较可以看到效果。</p><ul><li>with通常被当作重复引用同一个对象中的多个属性的快捷方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">function withObj(obj)&#123;</span><br><span class="line">    with(obj)&#123;</span><br><span class="line">        a &#x3D; 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let o1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let o2 &#x3D; &#123;</span><br><span class="line">    b: 1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">withObj(o1);</span><br><span class="line">console.log(o1.a); &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">withObj(o2);</span><br><span class="line">console.log(o2.a); &#x2F;&#x2F; undefined</span><br><span class="line">console.log(a); &#x2F;&#x2F; 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上示例中withObj(obj)函数接受一个obj参数，该参数是一个对象引用，执行了with，o1传进去，a=2赋值操作找到了o1.a并将2赋值给它，o2传进去，因为o2没有a属性，就不会创建这个属性，o2.a保持undefined，这个时候就会创建一个新的全局变量a。</li><li>对性能的影响<br>javascript引擎在编译阶段会进行性能优化，很多优化依赖于能够根据代码词法进行静态分析，预先确定了变量和函数的定义位置，才能快速找到标识符，但是在词法分析阶段遇到了with或eval无法明确知道它们会接收什么代码，也就无法判断标识符的位置，最简单的做法就是遇到with或eval不做任何优化，使用其中一个都会导致代码运行变慢，因此，请不要使用他们。<h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3></li><li><code>typeof</code>：基本类型用<code>typeof</code>来检测</li><li><code>instanceof</code>：用来检测是否为数组、对象、正则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let box &#x3D; [1,2,3];</span><br><span class="line">console.log(box instanceof Array); &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">let box1&#x3D;&#123;&#125;;</span><br><span class="line">console.log(box1 instanceof Object); &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">let box2&#x3D;&#x2F;g&#x2F;;</span><br><span class="line">console.log(box2 instanceof RegExp); &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3></li><li>ReferenceError错误<blockquote><p>如果在所有嵌套的作用域中遍寻不到所需的变量，引擎会抛出ReferenceError错误，意味这，这是一个未声明的变量，这个错误是一个非常重要的异常类型。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;a: &#39;, a); &#x2F;&#x2F; Uncaught ReferenceError: a is not defined</span><br><span class="line">let a &#x3D; 2;</span><br></pre></td></tr></table></figure></li><li>TypeError错误<blockquote><p>这种错误表示作用域判别成功，但是进行了非法的操作，例如，对一个非函数类型的值进行函数调用，或者引用null、undefined类型的值中的属性，将会抛出TypeError异常错误。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; null; &#x2F;&#x2F; 或者a &#x3D; undefined</span><br><span class="line">console.log(a.b); &#x2F;&#x2F; Uncaught TypeError: Cannot read property &#39;b&#39; of null</span><br></pre></td></tr></table></figure>对一个非函数类型的值进行函数调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; 2;</span><br><span class="line">a(); &#x2F;&#x2F; TypeError: a is not a function</span><br></pre></td></tr></table></figure><h3 id="数组去重的三种实现方式"><a href="#数组去重的三种实现方式" class="headerlink" title="数组去重的三种实现方式"></a>数组去重的三种实现方式</h3></li><li>Set数组去重<blockquote><p>ES6新的数据结构Set，类似于数组，它的元素都是唯一的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let arr &#x3D; [1, 22, 33, 44, 22, 44];</span><br><span class="line"></span><br><span class="line">console.log([...new Set(arr)]); &#x2F;&#x2F;[1, 22, 33, 44]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>reduce数组对象去重<blockquote><p>reduce对数组中的每一个元素依次执行回调函数，不含数组中未赋值、被删除的元素，回调函数接收四个参数</p></blockquote></li><li>callback：执行数组中每个值的函数，包含四个参数<ul><li>previousValue：上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li>currentValue：数组中当前被处理的元素</li><li>index：当前元素在数组中的索引</li><li>array：调用 reduce 的数组</li><li>initialValue：可选，作为第一次调用 callback 的第一个参数。<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let hash &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function unique(arr, initialValue)&#123;</span><br><span class="line">    return arr.reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class="line">        hash[currentValue.name] ? &#39;&#39; : hash[currentValue.name] &#x3D; true &amp;&amp; previousValue.push(currentValue);</span><br><span class="line"></span><br><span class="line">        return previousValue</span><br><span class="line">    &#125;, initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const uniqueArr &#x3D; unique([&#123;name: &#39;zs&#39;, age: 15&#125;, &#123;name: &#39;lisi&#39;&#125;, &#123;name: &#39;zs&#39;&#125;], []);</span><br><span class="line"></span><br><span class="line">console.log(uniqueArr); &#x2F;&#x2F; uniqueArr.length &#x3D;&#x3D; 2</span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3></li></ul></li><li>方法一：将数组字符串化<blockquote><p>利用数组与字符串的隐式转换，使用+符号链接一个对象，javascript会默认调用toString方法转为字符串，再使用字符串分割成字符串数组，最后转成数值形数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [[222, 333, 444], [55, 66, 77], 11, ]</span><br><span class="line">arr +&#x3D; &#39;&#39;;</span><br><span class="line">arr &#x3D; arr.split(&#39;,&#39;);</span><br><span class="line">arr &#x3D; arr.map(item &#x3D;&gt; Number(item));</span><br><span class="line"></span><br><span class="line">console.log(arr); &#x2F;&#x2F; [222, 333, 444, 55, 66, 77, 11]</span><br></pre></td></tr></table></figure></li><li>方法二：利用apply和concat转换<blockquote><p>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function reduceDimension(arr) &#123;</span><br><span class="line">        return Array.prototype.concat.apply([], arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(reduceDimension([[123], 4, [7, 8],[9, [111]]]));</span><br><span class="line">    &#x2F;&#x2F; [123, 4, 7, 8, 9, Array(1)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法三 自定义函数实现<blockquote><p>推荐使用，经测试这个是执行效率最高的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function reduceDimension(arr)&#123;</span><br><span class="line">    let ret &#x3D; [];</span><br><span class="line"></span><br><span class="line">    let toArr &#x3D; function(arr)&#123;</span><br><span class="line">        arr.forEach(function(item)&#123;</span><br><span class="line">            item instanceof Array ? toArr(item) : ret.push(item);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toArr(arr);</span><br><span class="line"></span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr &#x3D; [[12], 4, [333, [4444, 5555]], [9, [111, 222]]];</span><br><span class="line"></span><br><span class="line">for(let i &#x3D; 0; i &lt; 100000; i++)&#123;</span><br><span class="line">    arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let start &#x3D; new Date().getTime();</span><br><span class="line"></span><br><span class="line">console.log(&#39;reduceDimension: &#39;, reduceDimension(arr));</span><br><span class="line">console.log(&#39;耗时: &#39;, new Date().getTime() - start);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.nodejs.red/&quot;&gt;https://www.nodejs.red/&lt;/a&gt;整理&lt;/p&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问</summary>
      
    
    
    
    <category term="技术知识" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://example.com/2021/03/02/nodejs/My-New-Post/"/>
    <id>http://example.com/2021/03/02/nodejs/My-New-Post/</id>
    <published>2021-03-02T14:24:01.000Z</published>
    <updated>2021-03-02T14:24:08.583Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>node排查记录</title>
    <link href="http://example.com/2021/03/02/202103/node%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/03/02/202103/node%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-02T11:46:44.000Z</published>
    <updated>2021-03-02T13:56:46.614Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63">https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63</a>整理</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>部分的服务内存已飙升到1G以上</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>easy-monitor<br>alinode进行监控</p><h3 id="几种结果"><a href="#几种结果" class="headerlink" title="几种结果"></a>几种结果</h3><p>1、error 全局监测<br>2、重复引用，无法释放</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63&quot;&gt;https://cnodejs.org/topic/5aaba2dc19b2e3db18959e63&lt;/a&gt;整理&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>生成新的SSH</title>
    <link href="http://example.com/2021/02/28/%E7%94%9F%E6%88%90%E6%96%B0%E7%9A%84SSH/"/>
    <id>http://example.com/2021/02/28/%E7%94%9F%E6%88%90%E6%96%B0%E7%9A%84SSH/</id>
    <published>2021-02-28T14:17:57.000Z</published>
    <updated>2021-03-02T15:24:18.540Z</updated>
    
    <content type="html"><![CDATA[<p>地址：<a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a><br>1、Open Terminal.<br>2、Paste the text below, substituting in your GitHub email address.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><ul><li>Note: If you are using a legacy system that doesn’t support the Ed25519 algorithm, use:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li>This creates a new ssh key, using the provided email as a label.<br>Generating public/private ed25519 key pair.<br>3、When you’re prompted to “Enter a file in which to save the key,” press Enter. This accepts the default file location.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a file in which to save the key (&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_ed25519): [Press enter]</span><br></pre></td></tr></table></figure>4、At the prompt, type a secure passphrase. For more information, see “Working with SSH key passphrases”.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;地址：&lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;https://d</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Http协议、http1.1、http2、https</title>
    <link href="http://example.com/2021/02/28/202102/Http%E5%8D%8F%E8%AE%AE%E3%80%81http1.1%E3%80%81http2%E3%80%81https/"/>
    <id>http://example.com/2021/02/28/202102/Http%E5%8D%8F%E8%AE%AE%E3%80%81http1.1%E3%80%81http2%E3%80%81https/</id>
    <published>2021-02-28T11:39:23.000Z</published>
    <updated>2021-02-28T11:51:16.169Z</updated>
    
    <content type="html"><![CDATA[<p>[<a href="http://www.ptbird.cn/http-http1-1-http2-https.html]%E6%95%B4%E7%90%86">http://www.ptbird.cn/http-http1-1-http2-https.html]整理</a></p><h3 id="一、http协议"><a href="#一、http协议" class="headerlink" title="一、http协议"></a>一、http协议</h3><p>地址：<a href="http://www.cnblogs.com/ranyonsue/p/5984001.html">http://www.cnblogs.com/ranyonsue/p/5984001.html</a><br><strong>文章内容：</strong><br>1.HTTP简介<br>2.主要特点<br>3.HTTP之URL<br>4.URI和URL的区别<br>5.HTTP之请求消息Request<br>6.HTTP之响应消息Response<br>7.HTTP之状态码<br>8.HTTP请求方法<br>9.HTTP工作原理<br>10.GET和POST请求的区别</p><h3 id="二、http头字段"><a href="#二、http头字段" class="headerlink" title="二、http头字段"></a>二、http头字段</h3><p>地址: <a href="http://www.jianshu.com/p/6e86903d74f7">http://www.jianshu.com/p/6e86903d74f7</a><br><strong>内容：</strong><br>http头字段列表</p><h3 id="三、http2-（包括与http1-1的比较）"><a href="#三、http2-（包括与http1-1的比较）" class="headerlink" title="三、http2 （包括与http1.1的比较）"></a>三、http2 （包括与http1.1的比较）</h3><p>地址：<a href="https://www.qcloud.com/community/article/541321">https://www.qcloud.com/community/article/541321</a><br><strong>内容：</strong><br>一、多路复用的单一长连接<br>二、头部压缩和二进制格式<br>三、服务端推送Server Push</p><h3 id="四、《http2讲解》-gitbook翻译"><a href="#四、《http2讲解》-gitbook翻译" class="headerlink" title="四、《http2讲解》 gitbook翻译"></a>四、《http2讲解》 gitbook翻译</h3><p>地址： <a href="https://ye11ow.gitbooks.io/http2-explained/content/">https://ye11ow.gitbooks.io/http2-explained/content/</a><br><strong>内容：</strong><br>有比较详细的对http2的介绍，但是翻译的质量很一般，不是特别建议。<br>上面http2 腾讯云上的文章已经足够了解http2了</p><h3 id="四、https的内容"><a href="#四、https的内容" class="headerlink" title="四、https的内容"></a>四、https的内容</h3><p>地址：：<a href="http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html">http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html</a><br><strong>内容</strong></p><ul><li>HTTPS简介<br>客户端发起HTTPS请求<br>服务端的配置<br>传送证书<br>客户端解析证书<br>传送加密信息<br>服务段解密信息<br>传输加密后的信息<br>客户端解密信息<h3 id="五、http2-图"><a href="#五、http2-图" class="headerlink" title="五、http2 图"></a>五、http2 图</h3><img src="http://www.ptbird.cn/usr/uploads/2017/08/1599163816.png" alt="RUNOOB 图标"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a href=&quot;http://www.ptbird.cn/http-http1-1-http2-https.html]%E6%95%B4%E7%90%86&quot;&gt;http://www.ptbird.cn/http-http1-1-http2-https.html]整理&lt;/a</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http 缓存更新策略：强制缓存与协商缓存</title>
    <link href="http://example.com/2021/02/28/202102/Http%20%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/2021/02/28/202102/Http%20%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/</id>
    <published>2021-02-28T11:04:30.000Z</published>
    <updated>2021-02-28T11:39:15.289Z</updated>
    
    <content type="html"><![CDATA[<p>[<a href="http://www.ptbird.cn/http-cache-expires-max-age.html]%E6%95%B4%E7%90%86">http://www.ptbird.cn/http-cache-expires-max-age.html]整理</a></p><h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><ul><li>内容来自《前端工程化体系设计与实践》<br>浏览器缓存静态资源实际上是通过 HTTP 协议缓存策略，有两种策略分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。<br>强制缓存会根据过期时间判断是使用本地缓存还是请求新的资源。<br>协商缓存每次都会发出请求，经过服务器对比之后决定采用本地缓存还是新的资源。<br>使用哪种缓存策略是通过 HTTP 协议的 header 信息决定。<h3 id="二、强制缓存：Expires-和-Cache-control"><a href="#二、强制缓存：Expires-和-Cache-control" class="headerlink" title="二、强制缓存：Expires 和 Cache-control"></a>二、强制缓存：Expires 和 Cache-control</h3>Expires 和 max-age 是强制缓存的关键的信息，都会在 http 响应的 header 信息。</li></ul><p><strong>1、Expires</strong><br>Expires 是通过指定一耳光明确的时间点作为缓存资源的过期时间，在这个时间之前，客户端都是使用本地缓存的文件来响应 HTTP 请求，不会向服务器发出实体请求不过<strong>调试的时候能够发现这个请求</strong>，并且这个请求是 200<br>Expires 的优点：</p><ul><li>在缓存过期时间内减少客户端的 HTTP 请求，不仅节省客户端处理时间和提高 Web 应用执行速度，也减少了服务器负载以及客户端网络资源的损耗<br>Expires 的 header 信息示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires:Wed, 23 Aug 2019 14:00:00 GMT</span><br></pre></td></tr></table></figure>上面的意思是缓存过期时间是 2019年8月23日 14:00:00<br>Expires 的 缺点：</li><li>指定的时间是以服务端为准但是客户端进行过期判断时是将本地的时间和这个时间进行对比</li><li>如果客户端端时间和服务端时间存在差异，则会存在问题</li></ul><p><strong>2、Cache-control</strong><br>为了解决 Expires 的缺点，HTTP 1.1 增加了新的 header 字段 <code>Cache-control</code> 来更精准的控制缓存常用的 Cache-control 信息有下面几个：</p><ul><li>no-cache 和 no-store</li><li>public 和 private</li><li>max-age<br>1）no-cache 和 no-store<br><code>no-cache</code> 不是禁止缓存的意思，需要先和服务器确认返回的响应时否发生了变化，如果资源没变化，使用缓存的副本<br><code>no-store</code> 是禁止缓存，每次资源请求都会向服务器发送新的请求<br>2）public 和 private<br><code>public</code> 表示可以被浏览器和中间CDN缓存（一般不用，都是使用 max-age），而<br><code>private</code> 表示可以被浏览器缓存但是不能被 CDN 缓存<br>3）max-age<br>这个是最重要的 Cache-control 信息，一般都会通过 max-age 控制缓存的有效时长。<br>从请求的时刻开始计算，能够控制最长保留多久，单位是 s。<br>比如 <code>max-age=3600</code> 表示浏览器在1小时内使用缓存，不会发送实体请求到服务器。<br>(<a href="http://www.ptbird.cn/usr/uploads/2019/07/88767257.png">http://www.ptbird.cn/usr/uploads/2019/07/88767257.png</a>)<br>相比于 Expires ，max-age 通过控制时间长度而不需要与服务端时间戳进行计算，控制的更加精准，没有时间误差。</li></ul><p><strong>3、没有指定　no-cache 的缓存判断流程图</strong><br><img src="http://www.ptbird.cn/usr/uploads/2019/07/3895469623.png" alt="RUNOOB 图标"></p><h3 id="三、协商缓存"><a href="#三、协商缓存" class="headerlink" title="三、协商缓存"></a>三、协商缓存</h3><p><strong>1、Etag</strong><br>Etag 是服务器给资源分配的字符串形式唯一性标识，作为响应的 header 信息返回给浏览器，浏览器在 Cache-control指定 no-cache 或者是 max-age 和 expires 都过期的情况下，将 Etag 值通过 <code>If-none-match</code> 作为请求首部信息发送给服务器，服务器接收到请求之后，对比锁清秋资源的 Etag 值是否改变：</p><ul><li>如果没改变，会返回 304 Not Modified ，并且根据之前的缓存策略分配新的 Cache-control 信息</li><li>如果发生了改变，会返回新的资源并且分配新的 Etag<br><img src="http://www.ptbird.cn/usr/uploads/2019/07/3177953286.png" alt="RUNOOB 图标"><br>如果要强制使用协商缓存，则需要将 Cache-control 设置为 no-cache，这样不回去判断 max-age 和 Expires ，每次都会经过服务器的 Etag 对比。<br><img src="http://www.ptbird.cn/usr/uploads/2019/07/4293610916.png" alt="RUNOOB 图标"><br>协商缓存并非比强制缓存低级，而是要看使用场景，在 HTML 文件场景下，如果一个 URL <code>www.example.com/index.html</code> 其中 <code>index.html</code> 是不能强制缓存的，因为要保证内容的实时更新，因此必须使用协商缓存</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[&lt;a href=&quot;http://www.ptbird.cn/http-cache-expires-max-age.html]%E6%95%B4%E7%90%86&quot;&gt;http://www.ptbird.cn/http-cache-expires-max-age.html]整</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>强化知识</title>
    <link href="http://example.com/2021/02/28/%E5%BC%BA%E5%8C%96%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/02/28/%E5%BC%BA%E5%8C%96%E7%9F%A5%E8%AF%86/</id>
    <published>2021-02-28T09:03:23.000Z</published>
    <updated>2021-02-28T09:04:28.524Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">气沉丹田</span><br><span class="line">知识体系扫描</span><br><span class="line">合并别人笔记</span><br><span class="line">容易记忆</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>词组</title>
    <link href="http://example.com/2021/02/28/book/1/"/>
    <id>http://example.com/2021/02/28/book/1/</id>
    <published>2021-02-28T09:03:23.000Z</published>
    <updated>2021-03-02T16:21:40.606Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ps 基础学习</title>
    <link href="http://example.com/2021/02/28/202102/ps%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/02/28/202102/ps%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-28T08:55:42.000Z</published>
    <updated>2021-02-28T09:00:06.219Z</updated>
    
    <content type="html"><![CDATA[<p>1、图片大小概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">尺寸大小，内存大小</span><br><span class="line">保存的品质设置的72</span><br></pre></td></tr></table></figure><p>2、存储格式<br>3、图层知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选中矩形 前景色 填充 取消选择</span><br><span class="line">叠加 自动选择勾选 移动工具 互换位置 不透明度设置</span><br></pre></td></tr></table></figure><p>4、图片嵌套图层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选中图层，移动图片到图层中，alt放在图层与图片中间 点击 弯曲的图形</span><br></pre></td></tr></table></figure><p>5、图层蒙版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">形状工具 黑白互擦</span><br></pre></td></tr></table></figure><p>6、创建剪切蒙版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个文字合并一个</span><br></pre></td></tr></table></figure><p>7、图层样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多层对齐</span><br></pre></td></tr></table></figure><p>8、魔棒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + +</span><br></pre></td></tr></table></figure><p>9、ps切图步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">复制图层到新建</span><br><span class="line">alt + i + r 裁剪 依次按</span><br><span class="line">ctrl + alt + shift + s 保存</span><br><span class="line">裁剪图标 复制到图层 ， 删除背景，并复制样式 就可以做到 背景透明。</span><br><span class="line">快键键</span><br><span class="line">ctrl + n 窗口</span><br><span class="line">alt + delete 填充前景色</span><br><span class="line">ctrl + D 取消选择</span><br><span class="line">ctrl + G 创建组</span><br><span class="line">ctrl + T + shift 等比发大</span><br><span class="line">ctrl + del 填充背景色</span><br><span class="line">ctrl + alt 同时 鼠标点击 加减图层 选择图层</span><br><span class="line">v 位移工具</span><br><span class="line">Ctrl + j 原位复制 粘贴图层内容</span><br><span class="line">ctrl + alt + z 后退操作</span><br><span class="line">视图 Ctrl + r 标尺 视图 对齐 对齐</span><br><span class="line">Ctrl + E 合并</span><br><span class="line">alt + e + s 描边</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、图片大小概念&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ps" scheme="http://example.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>PPT 基础学习</title>
    <link href="http://example.com/2021/02/28/202102/PPT%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/02/28/202102/PPT%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-28T08:44:55.000Z</published>
    <updated>2021-02-28T08:58:37.604Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、年终总结ppt</li></ul><p>工作整体回顾<br>重要项目与成果展示<br>成功的经验分享<br>工作不足及原因分析<br>下阶段规划与展望</p><ul><li>2、标题的重要性</li></ul><p>干货<br>提问<br>情感<br>数字标题</p><ul><li>3、重要逻辑</li></ul><p>团队建设<br>个人发展<br>业务发展</p><ul><li>4、关键词</li></ul><p>态度<br>坚定<br>期待</p><ul><li>5、取色器</li></ul><p>文本 形态 填充 格式 配色</p><ul><li>6、封面</li></ul><p>圆心 留白 图标</p><ul><li>7、制作</li></ul><p>图 缩小 放大 裁剪 色块 置顶<br>插入 形状 格式 ctrl 合并剪掉<br>设置背景 插入 形状 取色 取图标库 插入圆圈 文本</p><ul><li>8、图</li></ul><p>Pixabay<br>pexels<br>沙沙野-让作品遇见全世界</p><ul><li>9、smartart</li></ul><p>时间轴图</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;1、年终总结ppt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工作整体回顾&lt;br&gt;重要项目与成果展示&lt;br&gt;成功的经验分享&lt;br&gt;工作不足及原因分析&lt;br&gt;下阶段规划与展望&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2、标题的重要性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;干货&lt;br&gt;提问&lt;br&gt;情感&lt;</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ppt" scheme="http://example.com/tags/ppt/"/>
    
  </entry>
  
  <entry>
    <title>Excel 基础学习</title>
    <link href="http://example.com/2021/02/28/202102/Excel%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/02/28/202102/Excel%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-28T08:42:31.000Z</published>
    <updated>2021-02-28T08:58:31.796Z</updated>
    
    <content type="html"><![CDATA[<p>1、分数输入<br>应该先输入0 空格 在输入3/5,否则系统会默认日期处理。<br>2、身份证输入 单元格设置成文本格式<br>3、填充序列 选中俩列往下拉<br>4、总分计算 = 表格相加<br>运用绝对引用 字母前后加$ “$b$”12<br>5、公式插入 总分(sun)、平均分(average)、平均分取整((int)、平均分保留小数(round)、排名(rank)、统计个数(count)<br>if 例如： =IF(SUM(C4:E4)&lt;=8000,SUM(E4:G4)0.02,80000.02+(SUM(E4:G4)-8000)*0.5)<br>6、冻结行数<br>7、隐藏对应的计算公式，要对单元格设置，同时要设置保护<br>8、数据 自定义排序 筛选<br>9、数据 分级显示和组合 分类汇总<br>10、打印 页面布局 工作表 打印区域</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、分数输入&lt;br&gt;应该先输入0 空格 在输入3/5,否则系统会默认日期处理。&lt;br&gt;2、身份证输入 单元格设置成文本格式&lt;br&gt;3、填充序列 选中俩列往下拉&lt;br&gt;4、总分计算 = 表格相加&lt;br&gt;运用绝对引用 字母前后加$ “$b$”12&lt;br&gt;5、公式插入 总分(su</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Excel" scheme="http://example.com/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>中国的智慧城市有哪些</title>
    <link href="http://example.com/2021/02/28/202102/%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>http://example.com/2021/02/28/202102/%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E6%9C%89%E5%93%AA%E4%BA%9B/</id>
    <published>2021-02-28T08:39:17.000Z</published>
    <updated>2021-02-28T08:58:28.621Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">2017-2018年度中国最具影响力智慧城市</span><br><span class="line">北京、深圳</span><br><span class="line"></span><br><span class="line">2017-2018年度中国最具创新力智慧城市</span><br><span class="line">杭州、重庆</span><br><span class="line"></span><br><span class="line">2018-2019年度中国最具投资价值智慧城市</span><br><span class="line">2018-2019年度中国最具发展潜力智慧城市</span><br><span class="line">2018-2019年度中国最具投资价值智慧城市</span><br><span class="line">成都、武汉</span><br><span class="line"></span><br><span class="line">2018-2019年度中国最具发展潜力智慧城市</span><br><span class="line">福州、西安、贵阳、长沙</span><br><span class="line"></span><br><span class="line">2017-2018年度中国最具旅游特色智慧城市</span><br><span class="line">2017-2018年度中国最具魅力宜居智慧城市</span><br><span class="line">2017-2018年度中国最具旅游特色智慧城市</span><br><span class="line">苏州、丽江、南京、三亚、洛阳、秦皇岛</span><br><span class="line"></span><br><span class="line">2017-2018年度中国最具魅力宜居智慧城市</span><br><span class="line">广州、青岛、昆明、大连</span><br><span class="line"></span><br><span class="line">2017-2018年度转型升级优秀智慧城市</span><br><span class="line">2017-2018年度信息惠民优秀智慧城市</span><br><span class="line">2017-2018年度转型升级优秀智慧城市</span><br><span class="line">郑州、邯郸、太原、兰州、沈阳、运城、乌海、大庆</span><br><span class="line">鹰潭、东莞、梧州、咸阳、敦煌、新余、阜阳</span><br><span class="line"></span><br><span class="line">2017-2018年度信息惠民优秀智慧城市</span><br><span class="line">宁波、无锡、南宁、宜昌、齐齐哈尔、辽源、石家庄、哈尔滨</span><br><span class="line">南平、湘潭、威海、莆田、宝鸡、绵阳、保山、黄山、济源</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
    <category term="房产" scheme="http://example.com/tags/%E6%88%BF%E4%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>识别UMD库</title>
    <link href="http://example.com/2021/02/28/202102/%E8%AF%86%E5%88%ABUMD%E5%BA%93/"/>
    <id>http://example.com/2021/02/28/202102/%E8%AF%86%E5%88%ABUMD%E5%BA%93/</id>
    <published>2021-02-28T08:33:57.000Z</published>
    <updated>2021-03-02T15:18:13.669Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function (root, factory) &#123;</span><br><span class="line">    if (typeof define &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; define.amd) &#123;</span><br><span class="line">        define([&quot;libName&quot;], factory);</span><br><span class="line">    &#125; else if (typeof module &#x3D;&#x3D;&#x3D; &quot;object&quot; &amp;&amp; module.exports) &#123;</span><br><span class="line">        module.exports &#x3D; factory(require(&quot;libName&quot;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        root.returnExports &#x3D; factory(root.libName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(this, function (b) &#123;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo教程</title>
    <link href="http://example.com/2021/02/27/Hexo%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2021/02/27/Hexo%E6%95%99%E7%A8%8B/</id>
    <published>2021-02-27T15:00:25.209Z</published>
    <updated>2021-03-02T15:23:51.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://hexo.io/">https://hexo.io</a></li><li><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot;&gt;https://hexo.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
